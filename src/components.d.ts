/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface SeApp {}
  interface SeAppAttributes extends StencilHTMLAttributes {}

  interface SeButton {
    /**
    * Optional property that defines the background color of the button. `primary` is a green color. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color': 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Optional property that determines if your button includes an icon.
    */
    'icon': string;
    /**
    * Defines the visual appearance of the button. `flat` is the default mode, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `text` mode has no border or background color. `login` and `signup` modes are specific for "Login" and "Sign Up" buttons in your application.
    */
    'mode': 'flat' | 'raised' | 'outline' | 'text' | 'login' | 'signup';
    /**
    * Set a selected button from the parent component.
    */
    'setActive': (val: boolean) => void;
    /**
    * Set a color for your button from the parent component.
    */
    'setColor': (val: "primary" | "accent" | "warn" | "error") => void;
    /**
    * Set the disabled property for your button from the parent component.
    */
    'setDisabled': (val: boolean) => void;
    /**
    * Indicate if the button is part of a group of buttons within the `se-buttons` component.
    */
    'setGrouped': () => void;
    /**
    * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
    */
    'value': string;
  }
  interface SeButtonAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines the background color of the button. `primary` is a green color. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color'?: 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Optional property that determines if your button includes an icon.
    */
    'icon'?: string;
    /**
    * Defines the visual appearance of the button. `flat` is the default mode, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `text` mode has no border or background color. `login` and `signup` modes are specific for "Login" and "Sign Up" buttons in your application.
    */
    'mode'?: 'flat' | 'raised' | 'outline' | 'text' | 'login' | 'signup';
    /**
    * Passes button data to the parent component on a click.
    */
    'onClicked'?: (event: CustomEvent<any>) => void;
    /**
    * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
    */
    'value'?: string;
  }

  interface SeButtons {
    /**
    * Optional property that defines the background color of each button in the group. `primary` is a green color. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color': 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Defines the functionality of your button group. `checkbox` is the default option, where all buttons in the group can be selected. `radio` mode indicates that only one button in the group can be selected at a time.
    */
    'mode': 'checkbox' | 'radio';
  }
  interface SeButtonsAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines the background color of each button in the group. `primary` is a green color. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color'?: 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Defines the functionality of your button group. `checkbox` is the default option, where all buttons in the group can be selected. `radio` mode indicates that only one button in the group can be selected at a time.
    */
    'mode'?: 'checkbox' | 'radio';
    /**
    * Passes the selected button value to the parent component when clicking on a button in the group.
    */
    'onChange'?: (event: CustomEvent) => void;
  }

  interface SeCheckbox {
    /**
    * Defines the background color of the button. `primary` is a green color and is the default value. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color': 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value': string;
  }
  interface SeCheckboxAttributes extends StencilHTMLAttributes {
    /**
    * Defines the background color of the button. `primary` is a green color and is the default value. `accent` is a blue color. `warn` is an orange color. `error` is a red color.
    */
    'color'?: 'primary' | 'accent' | 'warn' | 'error';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Send the checkbox value to the parent component when clicking on the checkbox.
    */
    'onChange'?: (event: CustomEvent) => void;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value'?: string;
  }

  interface SeChip {
    /**
    * The text you want to display in your chip.
    */
    'value': string;
  }
  interface SeChipAttributes extends StencilHTMLAttributes {
    /**
    * Send the chip value to the parent component when clicking the close button of a chip.
    */
    'onClicked'?: (event: CustomEvent) => void;
    /**
    * The text you want to display in your chip.
    */
    'value'?: string;
  }

  interface SeHeader {
    /**
    * Title of the application
    */
    'appTitle': string;
  }
  interface SeHeaderAttributes extends StencilHTMLAttributes {
    /**
    * Title of the application
    */
    'appTitle'?: string;
  }

  interface SeIconEcostruxure {}
  interface SeIconEcostruxureAttributes extends StencilHTMLAttributes {}

  interface SeIconSchneider {}
  interface SeIconSchneiderAttributes extends StencilHTMLAttributes {}

  interface SeNavbar {
    'color': 'primary' | 'secondary' | 'tab';
  }
  interface SeNavbarAttributes extends StencilHTMLAttributes {
    'color'?: 'primary' | 'secondary' | 'tab';
  }

  interface SeRadioOnOff {
    /**
    * Optional property that defines if the radio on/off switch is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Defines the visual appearance of the on/off radio switch. `default` is the default mode. Use `header` if the on/off radio switch is within a header element to reduce its visual height.
    */
    'mode': 'default' | 'header';
    /**
    * Defines the text the user will see for the "off" or "inactive" part of the radio switch.
    */
    'textOff': string;
    /**
    * Defines the text the user will see for the "on" or "active" part of the radio switch.
    */
    'textOn': string;
  }
  interface SeRadioOnOffAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines if the radio on/off switch is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Defines the visual appearance of the on/off radio switch. `default` is the default mode. Use `header` if the on/off radio switch is within a header element to reduce its visual height.
    */
    'mode'?: 'default' | 'header';
    /**
    * Passes the current state (true or false) to the parent component when clicking on a button in the group.
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * Defines the text the user will see for the "off" or "inactive" part of the radio switch.
    */
    'textOff'?: string;
    /**
    * Defines the text the user will see for the "on" or "active" part of the radio switch.
    */
    'textOn'?: string;
  }

  interface SeWidgetContainer {}
  interface SeWidgetContainerAttributes extends StencilHTMLAttributes {}

  interface SeWidgetContent {}
  interface SeWidgetContentAttributes extends StencilHTMLAttributes {}

  interface SeWidgetFooter {}
  interface SeWidgetFooterAttributes extends StencilHTMLAttributes {}

  interface SeWidgetHeader {}
  interface SeWidgetHeaderAttributes extends StencilHTMLAttributes {}

  interface SeWidget {}
  interface SeWidgetAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'SeApp': Components.SeApp;
    'SeButton': Components.SeButton;
    'SeButtons': Components.SeButtons;
    'SeCheckbox': Components.SeCheckbox;
    'SeChip': Components.SeChip;
    'SeHeader': Components.SeHeader;
    'SeIconEcostruxure': Components.SeIconEcostruxure;
    'SeIconSchneider': Components.SeIconSchneider;
    'SeNavbar': Components.SeNavbar;
    'SeRadioOnOff': Components.SeRadioOnOff;
    'SeWidgetContainer': Components.SeWidgetContainer;
    'SeWidgetContent': Components.SeWidgetContent;
    'SeWidgetFooter': Components.SeWidgetFooter;
    'SeWidgetHeader': Components.SeWidgetHeader;
    'SeWidget': Components.SeWidget;
  }

  interface StencilIntrinsicElements {
    'se-app': Components.SeAppAttributes;
    'se-button': Components.SeButtonAttributes;
    'se-buttons': Components.SeButtonsAttributes;
    'se-checkbox': Components.SeCheckboxAttributes;
    'se-chip': Components.SeChipAttributes;
    'se-header': Components.SeHeaderAttributes;
    'se-icon-ecostruxure': Components.SeIconEcostruxureAttributes;
    'se-icon-schneider': Components.SeIconSchneiderAttributes;
    'se-navbar': Components.SeNavbarAttributes;
    'se-radio-on-off': Components.SeRadioOnOffAttributes;
    'se-widget-container': Components.SeWidgetContainerAttributes;
    'se-widget-content': Components.SeWidgetContentAttributes;
    'se-widget-footer': Components.SeWidgetFooterAttributes;
    'se-widget-header': Components.SeWidgetHeaderAttributes;
    'se-widget': Components.SeWidgetAttributes;
  }


  interface HTMLSeAppElement extends Components.SeApp, HTMLStencilElement {}
  var HTMLSeAppElement: {
    prototype: HTMLSeAppElement;
    new (): HTMLSeAppElement;
  };

  interface HTMLSeButtonElement extends Components.SeButton, HTMLStencilElement {}
  var HTMLSeButtonElement: {
    prototype: HTMLSeButtonElement;
    new (): HTMLSeButtonElement;
  };

  interface HTMLSeButtonsElement extends Components.SeButtons, HTMLStencilElement {}
  var HTMLSeButtonsElement: {
    prototype: HTMLSeButtonsElement;
    new (): HTMLSeButtonsElement;
  };

  interface HTMLSeCheckboxElement extends Components.SeCheckbox, HTMLStencilElement {}
  var HTMLSeCheckboxElement: {
    prototype: HTMLSeCheckboxElement;
    new (): HTMLSeCheckboxElement;
  };

  interface HTMLSeChipElement extends Components.SeChip, HTMLStencilElement {}
  var HTMLSeChipElement: {
    prototype: HTMLSeChipElement;
    new (): HTMLSeChipElement;
  };

  interface HTMLSeHeaderElement extends Components.SeHeader, HTMLStencilElement {}
  var HTMLSeHeaderElement: {
    prototype: HTMLSeHeaderElement;
    new (): HTMLSeHeaderElement;
  };

  interface HTMLSeIconEcostruxureElement extends Components.SeIconEcostruxure, HTMLStencilElement {}
  var HTMLSeIconEcostruxureElement: {
    prototype: HTMLSeIconEcostruxureElement;
    new (): HTMLSeIconEcostruxureElement;
  };

  interface HTMLSeIconSchneiderElement extends Components.SeIconSchneider, HTMLStencilElement {}
  var HTMLSeIconSchneiderElement: {
    prototype: HTMLSeIconSchneiderElement;
    new (): HTMLSeIconSchneiderElement;
  };

  interface HTMLSeNavbarElement extends Components.SeNavbar, HTMLStencilElement {}
  var HTMLSeNavbarElement: {
    prototype: HTMLSeNavbarElement;
    new (): HTMLSeNavbarElement;
  };

  interface HTMLSeRadioOnOffElement extends Components.SeRadioOnOff, HTMLStencilElement {}
  var HTMLSeRadioOnOffElement: {
    prototype: HTMLSeRadioOnOffElement;
    new (): HTMLSeRadioOnOffElement;
  };

  interface HTMLSeWidgetContainerElement extends Components.SeWidgetContainer, HTMLStencilElement {}
  var HTMLSeWidgetContainerElement: {
    prototype: HTMLSeWidgetContainerElement;
    new (): HTMLSeWidgetContainerElement;
  };

  interface HTMLSeWidgetContentElement extends Components.SeWidgetContent, HTMLStencilElement {}
  var HTMLSeWidgetContentElement: {
    prototype: HTMLSeWidgetContentElement;
    new (): HTMLSeWidgetContentElement;
  };

  interface HTMLSeWidgetFooterElement extends Components.SeWidgetFooter, HTMLStencilElement {}
  var HTMLSeWidgetFooterElement: {
    prototype: HTMLSeWidgetFooterElement;
    new (): HTMLSeWidgetFooterElement;
  };

  interface HTMLSeWidgetHeaderElement extends Components.SeWidgetHeader, HTMLStencilElement {}
  var HTMLSeWidgetHeaderElement: {
    prototype: HTMLSeWidgetHeaderElement;
    new (): HTMLSeWidgetHeaderElement;
  };

  interface HTMLSeWidgetElement extends Components.SeWidget, HTMLStencilElement {}
  var HTMLSeWidgetElement: {
    prototype: HTMLSeWidgetElement;
    new (): HTMLSeWidgetElement;
  };

  interface HTMLElementTagNameMap {
    'se-app': HTMLSeAppElement
    'se-button': HTMLSeButtonElement
    'se-buttons': HTMLSeButtonsElement
    'se-checkbox': HTMLSeCheckboxElement
    'se-chip': HTMLSeChipElement
    'se-header': HTMLSeHeaderElement
    'se-icon-ecostruxure': HTMLSeIconEcostruxureElement
    'se-icon-schneider': HTMLSeIconSchneiderElement
    'se-navbar': HTMLSeNavbarElement
    'se-radio-on-off': HTMLSeRadioOnOffElement
    'se-widget-container': HTMLSeWidgetContainerElement
    'se-widget-content': HTMLSeWidgetContentElement
    'se-widget-footer': HTMLSeWidgetFooterElement
    'se-widget-header': HTMLSeWidgetHeaderElement
    'se-widget': HTMLSeWidgetElement
  }

  interface ElementTagNameMap {
    'se-app': HTMLSeAppElement;
    'se-button': HTMLSeButtonElement;
    'se-buttons': HTMLSeButtonsElement;
    'se-checkbox': HTMLSeCheckboxElement;
    'se-chip': HTMLSeChipElement;
    'se-header': HTMLSeHeaderElement;
    'se-icon-ecostruxure': HTMLSeIconEcostruxureElement;
    'se-icon-schneider': HTMLSeIconSchneiderElement;
    'se-navbar': HTMLSeNavbarElement;
    'se-radio-on-off': HTMLSeRadioOnOffElement;
    'se-widget-container': HTMLSeWidgetContainerElement;
    'se-widget-content': HTMLSeWidgetContentElement;
    'se-widget-footer': HTMLSeWidgetFooterElement;
    'se-widget-header': HTMLSeWidgetHeaderElement;
    'se-widget': HTMLSeWidgetElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
