import { Component, Element, Prop } from "@stencil/core";

@Component({
  tag: "se-dropdown",
  styleUrl: "dropdown.scss"
})
export class DropdownComponent {
  @Element() el: HTMLElement;

  /**
   * Defines the visual appearance of the button.
   * `flat` is the default mode, which includes a gray background.
   * `raised` adds a box shadow to the button.
   * `outline` adds a border to the button.
   */
  @Prop() mode: "flat" | "raised" | "outline" | "inherit" = "flat";

  /**
   * Define if the list element should be selected or not
   */
  @Prop() text: string;

  /**
   * Define if the list element should be selected or not
   */
  @Prop() icon: string;

  /**
   * Optional property to overwrite the default color of the icon. Default is inherited from the parent
   */
  @Prop() iconColor: 'standard' | 'alternative' | 'primary' | 'secondary' ;

  /**
   * Optional property that defines the background color of the button. Default will be inherited from its parent.
   */
  @Prop({mutable: true}) color: 'standard' | 'alternative' | 'primary' | 'secondary' = 'standard';

  /**
   * Define if the dropdown is collapsed/closed.
   */
  @Prop({ mutable: true }) collapsed: boolean = true;

  @Prop({ mutable: true }) disabled: boolean = false;

  private toggleCollapse() {
    console.log("collapse toggle");
    this.collapsed = !this.collapsed;
  }

  render() {
    return [
      <se-button
        icon={this.icon}
        icon-color={this.iconColor}
        mode={this.mode}
        onClick={() => this.toggleCollapse()}>
        {this.text}
      </se-button>,
      <div class="list-item" style={{ display: this.collapsed ? 'none' : 'block' }}>
        <slot />
      </div>
    ];
  }
}
