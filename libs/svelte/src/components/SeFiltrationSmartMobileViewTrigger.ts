/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartMobileViewTriggerProps {
  
  /** The text label of the "Show filter" button. */
  label?: Components.SeFiltrationSmartMobileViewTrigger["label"]
  
  /** The number of facets in which there are selected refinements. */
  count?: Components.SeFiltrationSmartMobileViewTrigger["count"]
}

interface SeFiltrationSmartMobileViewTriggerEvents {
  
  /** Event that toggle visibility of the mobile view. */
  toggleMobileView: Parameters<JSX.SeFiltrationSmartMobileViewTrigger["onToggleMobileView"]>[0]
}

interface SeFiltrationSmartMobileViewTriggerSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_filtration_smart_mobile_view_trigger;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			se_filtration_smart_mobile_view_trigger = element("se-filtration-smart-mobile-view-trigger");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_mobile_view_trigger, "label", /*label*/ ctx[0]);
			set_custom_element_data(se_filtration_smart_mobile_view_trigger, "count", /*count*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_mobile_view_trigger, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_mobile_view_trigger, null);
			}

			/*se_filtration_smart_mobile_view_trigger_binding*/ ctx[7](se_filtration_smart_mobile_view_trigger);
			current = true;

			if (!mounted) {
				dispose = listen(se_filtration_smart_mobile_view_trigger, "toggleMobileView", /*onEvent*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*label*/ 1) {
				set_custom_element_data(se_filtration_smart_mobile_view_trigger, "label", /*label*/ ctx[0]);
			}

			if (!current || dirty & /*count*/ 2) {
				set_custom_element_data(se_filtration_smart_mobile_view_trigger, "count", /*count*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_mobile_view_trigger);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_mobile_view_trigger_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { label } = $$props;
	let { count = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_mobile_view_trigger_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("count" in $$props) $$invalidate(1, count = $$props.count);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		label,
		count,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_mobile_view_trigger_binding
	];
}

class SeFiltrationSmartMobileViewTrigger extends SvelteComponent {
  $$prop_def: SeFiltrationSmartMobileViewTriggerProps;
  $$events_def: SeFiltrationSmartMobileViewTriggerEvents;
  $$slot_def: SeFiltrationSmartMobileViewTriggerSlots;

  $on<K extends keyof SeFiltrationSmartMobileViewTriggerEvents>(type: K, callback: (e: SeFiltrationSmartMobileViewTriggerEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartMobileViewTriggerProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { label: 0, count: 1, getWebComponent: 4 });
	}

	get label() {
		return this.$$.ctx[0];
	}

	set label(label) {
		this.$set({ label });
		flush();
	}

	get count() {
		return this.$$.ctx[1];
	}

	set count(count) {
		this.$set({ count });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartMobileViewTriggerElement | undefined {
		return this.$$.ctx[4];
	}
}

export default SeFiltrationSmartMobileViewTrigger;