/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeBlockContentProps {
  
  /** The block-content component will add 8px padding on the top and bottom, and 16px padding on the left and right by default.
When the option is set to `fill`, the content will fill the whole space of the block-content with no padding. */
  option?: Components.SeBlockContent["option"]
  
  /** Defines maximum height of the component.
If set, scroll will be applied to the block if its height exceeds `maxHeight`.
Also, its top and bottom parts will be covered by semi-transparent overlays. */
  maxHeight?: Components.SeBlockContent["maxHeight"]
}

interface SeBlockContentEvents {
  
}

interface SeBlockContentSlots {
  default: any
}
  
/* generated by Svelte v3.44.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_block_content;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			se_block_content = element("se-block-content");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_block_content, "option", /*option*/ ctx[0]);
			set_custom_element_data(se_block_content, "max-height", /*maxHeight*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, se_block_content, anchor);

			if (default_slot) {
				default_slot.m(se_block_content, null);
			}

			/*se_block_content_binding*/ ctx[6](se_block_content);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*option*/ 1) {
				set_custom_element_data(se_block_content, "option", /*option*/ ctx[0]);
			}

			if (!current || dirty & /*maxHeight*/ 2) {
				set_custom_element_data(se_block_content, "max-height", /*maxHeight*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_block_content);
			if (default_slot) default_slot.d(detaching);
			/*se_block_content_binding*/ ctx[6](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { option = undefined } = $$props;
	let { maxHeight = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_block_content_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('option' in $$props) $$invalidate(0, option = $$props.option);
		if ('maxHeight' in $$props) $$invalidate(1, maxHeight = $$props.maxHeight);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [
		option,
		maxHeight,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_block_content_binding
	];
}

class SeBlockContent extends SvelteComponent {
  $$prop_def: SeBlockContentProps;
  $$events_def: SeBlockContentEvents;
  $$slot_def: SeBlockContentSlots;

  $on<K extends keyof SeBlockContentEvents>(type: K, callback: (e: SeBlockContentEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeBlockContentProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			option: 0,
			maxHeight: 1,
			getWebComponent: 3
		});
	}

	get option() {
		return this.$$.ctx[0];
	}

	set option(option) {
		this.$$set({ option });
		flush();
	}

	get maxHeight() {
		return this.$$.ctx[1];
	}

	set maxHeight(maxHeight) {
		this.$$set({ maxHeight });
		flush();
	}

	get getWebComponent(): HTMLSeBlockContentElement | undefined {
		return this.$$.ctx[3];
	}
}

export default SeBlockContent;