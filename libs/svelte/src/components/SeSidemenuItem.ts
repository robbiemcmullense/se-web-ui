/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeSidemenuItemProps {
  
  /** Defines the title of the menu item. */
  item?: Components.SeSidemenuItem["item"]
  
  /** Defines if the menu item is active or not.
The default setting is `false`. */
  active?: Components.SeSidemenuItem["active"]
}

interface SeSidemenuItemEvents {
  
  /** Send an event when the sidemenu item changes */
  didClick: Parameters<JSX.SeSidemenuItem["onDidClick"]>[0]
}

interface SeSidemenuItemSlots {
  default: any
}
  
/* generated by Svelte v3.44.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_sidemenu_item;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			se_sidemenu_item = element("se-sidemenu-item");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_sidemenu_item, "item", /*item*/ ctx[0]);
			set_custom_element_data(se_sidemenu_item, "active", /*active*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, se_sidemenu_item, anchor);

			if (default_slot) {
				default_slot.m(se_sidemenu_item, null);
			}

			/*se_sidemenu_item_binding*/ ctx[7](se_sidemenu_item);
			current = true;

			if (!mounted) {
				dispose = listen(se_sidemenu_item, "didClick", /*onEvent*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*item*/ 1) {
				set_custom_element_data(se_sidemenu_item, "item", /*item*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 2) {
				set_custom_element_data(se_sidemenu_item, "active", /*active*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_sidemenu_item);
			if (default_slot) default_slot.d(detaching);
			/*se_sidemenu_item_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { item = undefined } = $$props;
	let { active = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_sidemenu_item_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('item' in $$props) $$invalidate(0, item = $$props.item);
		if ('active' in $$props) $$invalidate(1, active = $$props.active);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		item,
		active,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_sidemenu_item_binding
	];
}

class SeSidemenuItem extends SvelteComponent {
  $$prop_def: SeSidemenuItemProps;
  $$events_def: SeSidemenuItemEvents;
  $$slot_def: SeSidemenuItemSlots;

  $on<K extends keyof SeSidemenuItemEvents>(type: K, callback: (e: SeSidemenuItemEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeSidemenuItemProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { item: 0, active: 1, getWebComponent: 4 });
	}

	get item() {
		return this.$$.ctx[0];
	}

	set item(item) {
		this.$$set({ item });
		flush();
	}

	get active() {
		return this.$$.ctx[1];
	}

	set active(active) {
		this.$$set({ active });
		flush();
	}

	get getWebComponent(): HTMLSeSidemenuItemElement | undefined {
		return this.$$.ctx[4];
	}
}

export default SeSidemenuItem;