/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartViewMoreRefinementsButtonProps {
  
  /**  */
  facetId?: Components.SeFiltrationSmartViewMoreRefinementsButton["facetId"]
  
  /** Defines what label should be used inside the button:
 true => "show less"
 false => "show more" */
  isAllRefinementsVisible?: Components.SeFiltrationSmartViewMoreRefinementsButton["isAllRefinementsVisible"]
  
  /** Defines what number should be rendered in the circle inside the button. */
  count?: Components.SeFiltrationSmartViewMoreRefinementsButton["count"]
  
  /** Defines text of the "View more" button. */
  viewMoreLabel?: Components.SeFiltrationSmartViewMoreRefinementsButton["viewMoreLabel"]
  
  /** Defines text of the "View less" button. */
  viewLessLabel?: Components.SeFiltrationSmartViewMoreRefinementsButton["viewLessLabel"]
}

interface SeFiltrationSmartViewMoreRefinementsButtonEvents {
  
  /** Event that signals Smart Filter to toggle visibility of all its refinements. */
  toggleViewMoreRefinements: Parameters<JSX.SeFiltrationSmartViewMoreRefinementsButton["onToggleViewMoreRefinements"]>[0]
}

interface SeFiltrationSmartViewMoreRefinementsButtonSlots {
  default: any
}
  
/* generated by Svelte v3.42.6 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_filtration_smart_view_more_refinements_button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			se_filtration_smart_view_more_refinements_button = element("se-filtration-smart-view-more-refinements-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_view_more_refinements_button, "facet-id", /*facetId*/ ctx[0]);
			set_custom_element_data(se_filtration_smart_view_more_refinements_button, "is-all-refinements-visible", /*isAllRefinementsVisible*/ ctx[1]);
			set_custom_element_data(se_filtration_smart_view_more_refinements_button, "count", /*count*/ ctx[2]);
			set_custom_element_data(se_filtration_smart_view_more_refinements_button, "view-more-label", /*viewMoreLabel*/ ctx[3]);
			set_custom_element_data(se_filtration_smart_view_more_refinements_button, "view-less-label", /*viewLessLabel*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_view_more_refinements_button, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_view_more_refinements_button, null);
			}

			/*se_filtration_smart_view_more_refinements_button_binding*/ ctx[10](se_filtration_smart_view_more_refinements_button);
			current = true;

			if (!mounted) {
				dispose = listen(se_filtration_smart_view_more_refinements_button, "toggleViewMoreRefinements", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*facetId*/ 1) {
				set_custom_element_data(se_filtration_smart_view_more_refinements_button, "facet-id", /*facetId*/ ctx[0]);
			}

			if (!current || dirty & /*isAllRefinementsVisible*/ 2) {
				set_custom_element_data(se_filtration_smart_view_more_refinements_button, "is-all-refinements-visible", /*isAllRefinementsVisible*/ ctx[1]);
			}

			if (!current || dirty & /*count*/ 4) {
				set_custom_element_data(se_filtration_smart_view_more_refinements_button, "count", /*count*/ ctx[2]);
			}

			if (!current || dirty & /*viewMoreLabel*/ 8) {
				set_custom_element_data(se_filtration_smart_view_more_refinements_button, "view-more-label", /*viewMoreLabel*/ ctx[3]);
			}

			if (!current || dirty & /*viewLessLabel*/ 16) {
				set_custom_element_data(se_filtration_smart_view_more_refinements_button, "view-less-label", /*viewLessLabel*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_view_more_refinements_button);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_view_more_refinements_button_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { facetId } = $$props;
	let { isAllRefinementsVisible = undefined } = $$props;
	let { count = undefined } = $$props;
	let { viewMoreLabel = undefined } = $$props;
	let { viewLessLabel = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_view_more_refinements_button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('facetId' in $$props) $$invalidate(0, facetId = $$props.facetId);
		if ('isAllRefinementsVisible' in $$props) $$invalidate(1, isAllRefinementsVisible = $$props.isAllRefinementsVisible);
		if ('count' in $$props) $$invalidate(2, count = $$props.count);
		if ('viewMoreLabel' in $$props) $$invalidate(3, viewMoreLabel = $$props.viewMoreLabel);
		if ('viewLessLabel' in $$props) $$invalidate(4, viewLessLabel = $$props.viewLessLabel);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		facetId,
		isAllRefinementsVisible,
		count,
		viewMoreLabel,
		viewLessLabel,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_view_more_refinements_button_binding
	];
}

class SeFiltrationSmartViewMoreRefinementsButton extends SvelteComponent {
  $$prop_def: SeFiltrationSmartViewMoreRefinementsButtonProps;
  $$events_def: SeFiltrationSmartViewMoreRefinementsButtonEvents;
  $$slot_def: SeFiltrationSmartViewMoreRefinementsButtonSlots;

  $on<K extends keyof SeFiltrationSmartViewMoreRefinementsButtonEvents>(type: K, callback: (e: SeFiltrationSmartViewMoreRefinementsButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartViewMoreRefinementsButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			facetId: 0,
			isAllRefinementsVisible: 1,
			count: 2,
			viewMoreLabel: 3,
			viewLessLabel: 4,
			getWebComponent: 7
		});
	}

	get facetId() {
		return this.$$.ctx[0];
	}

	set facetId(facetId) {
		this.$$set({ facetId });
		flush();
	}

	get isAllRefinementsVisible() {
		return this.$$.ctx[1];
	}

	set isAllRefinementsVisible(isAllRefinementsVisible) {
		this.$$set({ isAllRefinementsVisible });
		flush();
	}

	get count() {
		return this.$$.ctx[2];
	}

	set count(count) {
		this.$$set({ count });
		flush();
	}

	get viewMoreLabel() {
		return this.$$.ctx[3];
	}

	set viewMoreLabel(viewMoreLabel) {
		this.$$set({ viewMoreLabel });
		flush();
	}

	get viewLessLabel() {
		return this.$$.ctx[4];
	}

	set viewLessLabel(viewLessLabel) {
		this.$$set({ viewLessLabel });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartViewMoreRefinementsButtonElement | undefined {
		return this.$$.ctx[7];
	}
}

export default SeFiltrationSmartViewMoreRefinementsButton;