/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationProps {
  
  /** text to display in the header */
  item?: Components.SeFiltration["item"]
  
  /** Text for the placeholder. the default is `enter text` */
  labelHint?: Components.SeFiltration["labelHint"]
  
  /** Boolean property to indicate if the content will be visible or hidden
collapsed = `true` => content is shown
collapsed = `false` => content is hidden */
  collapsed?: Components.SeFiltration["collapsed"]
  
  /** Boolean property to indicate if there should be a shadow around the box
valid values are `true` or `false` */
  shadow?: Components.SeFiltration["shadow"]
  
  /** Default value to display for viewing more content */
  labelViewMore?: Components.SeFiltration["labelViewMore"]
  
  /** Default text to display for viewing less content */
  labelViewLess?: Components.SeFiltration["labelViewLess"]
  
  /** Variable to show 'Select all' */
  labelSelectAll?: Components.SeFiltration["labelSelectAll"]
  
  /** Minimum number of items to be displayed when collapsed. Default is `5` */
  minItems?: Components.SeFiltration["minItems"]
  
  /** Maximum number of items to be displayed when expanded. Default is `10` */
  maxItems?: Components.SeFiltration["maxItems"]
  
  /** Optional property to indicate if multiple selections will be made
`true` = multiple selection | `false` = single selection */
  showSelectAll?: Components.SeFiltration["showSelectAll"]
  
  /** Optional property to show a search box inside the form */
  searchable?: Components.SeFiltration["searchable"]
  
  /** The search value in the search field. Mostly used to clear the search box when needed. */
  search?: Components.SeFiltration["search"]
}

interface SeFiltrationEvents {
  
  /**  */
  didSearch: Parameters<JSX.SeFiltration["onDidSearch"]>[0]
  
  /** Event emitter for callback to select all items */
  didSelectAll: Parameters<JSX.SeFiltration["onDidSelectAll"]>[0]
}

interface SeFiltrationSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_filtration;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	return {
		c() {
			se_filtration = element("se-filtration");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration, "item", /*item*/ ctx[0]);
			set_custom_element_data(se_filtration, "label-hint", /*labelHint*/ ctx[1]);
			set_custom_element_data(se_filtration, "collapsed", /*collapsed*/ ctx[2]);
			set_custom_element_data(se_filtration, "shadow", /*shadow*/ ctx[3]);
			set_custom_element_data(se_filtration, "label-view-more", /*labelViewMore*/ ctx[4]);
			set_custom_element_data(se_filtration, "label-view-less", /*labelViewLess*/ ctx[5]);
			set_custom_element_data(se_filtration, "label-select-all", /*labelSelectAll*/ ctx[6]);
			set_custom_element_data(se_filtration, "min-items", /*minItems*/ ctx[7]);
			set_custom_element_data(se_filtration, "max-items", /*maxItems*/ ctx[8]);
			set_custom_element_data(se_filtration, "show-select-all", /*showSelectAll*/ ctx[9]);
			set_custom_element_data(se_filtration, "searchable", /*searchable*/ ctx[10]);
			set_custom_element_data(se_filtration, "search", /*search*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, se_filtration, anchor);

			if (default_slot) {
				default_slot.m(se_filtration, null);
			}

			/*se_filtration_binding*/ ctx[17](se_filtration);
			current = true;

			if (!mounted) {
				dispose = [
					listen(se_filtration, "didSearch", /*onEvent*/ ctx[13]),
					listen(se_filtration, "didSelectAll", /*onEvent*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*item*/ 1) {
				set_custom_element_data(se_filtration, "item", /*item*/ ctx[0]);
			}

			if (!current || dirty & /*labelHint*/ 2) {
				set_custom_element_data(se_filtration, "label-hint", /*labelHint*/ ctx[1]);
			}

			if (!current || dirty & /*collapsed*/ 4) {
				set_custom_element_data(se_filtration, "collapsed", /*collapsed*/ ctx[2]);
			}

			if (!current || dirty & /*shadow*/ 8) {
				set_custom_element_data(se_filtration, "shadow", /*shadow*/ ctx[3]);
			}

			if (!current || dirty & /*labelViewMore*/ 16) {
				set_custom_element_data(se_filtration, "label-view-more", /*labelViewMore*/ ctx[4]);
			}

			if (!current || dirty & /*labelViewLess*/ 32) {
				set_custom_element_data(se_filtration, "label-view-less", /*labelViewLess*/ ctx[5]);
			}

			if (!current || dirty & /*labelSelectAll*/ 64) {
				set_custom_element_data(se_filtration, "label-select-all", /*labelSelectAll*/ ctx[6]);
			}

			if (!current || dirty & /*minItems*/ 128) {
				set_custom_element_data(se_filtration, "min-items", /*minItems*/ ctx[7]);
			}

			if (!current || dirty & /*maxItems*/ 256) {
				set_custom_element_data(se_filtration, "max-items", /*maxItems*/ ctx[8]);
			}

			if (!current || dirty & /*showSelectAll*/ 512) {
				set_custom_element_data(se_filtration, "show-select-all", /*showSelectAll*/ ctx[9]);
			}

			if (!current || dirty & /*searchable*/ 1024) {
				set_custom_element_data(se_filtration, "searchable", /*searchable*/ ctx[10]);
			}

			if (!current || dirty & /*search*/ 2048) {
				set_custom_element_data(se_filtration, "search", /*search*/ ctx[11]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { item = undefined } = $$props;
	let { labelHint = undefined } = $$props;
	let { collapsed = undefined } = $$props;
	let { shadow = undefined } = $$props;
	let { labelViewMore = undefined } = $$props;
	let { labelViewLess = undefined } = $$props;
	let { labelSelectAll = undefined } = $$props;
	let { minItems = undefined } = $$props;
	let { maxItems = undefined } = $$props;
	let { showSelectAll = undefined } = $$props;
	let { searchable = undefined } = $$props;
	let { search = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(12, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(12, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("item" in $$props) $$invalidate(0, item = $$props.item);
		if ("labelHint" in $$props) $$invalidate(1, labelHint = $$props.labelHint);
		if ("collapsed" in $$props) $$invalidate(2, collapsed = $$props.collapsed);
		if ("shadow" in $$props) $$invalidate(3, shadow = $$props.shadow);
		if ("labelViewMore" in $$props) $$invalidate(4, labelViewMore = $$props.labelViewMore);
		if ("labelViewLess" in $$props) $$invalidate(5, labelViewLess = $$props.labelViewLess);
		if ("labelSelectAll" in $$props) $$invalidate(6, labelSelectAll = $$props.labelSelectAll);
		if ("minItems" in $$props) $$invalidate(7, minItems = $$props.minItems);
		if ("maxItems" in $$props) $$invalidate(8, maxItems = $$props.maxItems);
		if ("showSelectAll" in $$props) $$invalidate(9, showSelectAll = $$props.showSelectAll);
		if ("searchable" in $$props) $$invalidate(10, searchable = $$props.searchable);
		if ("search" in $$props) $$invalidate(11, search = $$props.search);
		if ("$$scope" in $$props) $$invalidate(15, $$scope = $$props.$$scope);
	};

	return [
		item,
		labelHint,
		collapsed,
		shadow,
		labelViewMore,
		labelViewLess,
		labelSelectAll,
		minItems,
		maxItems,
		showSelectAll,
		searchable,
		search,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_binding
	];
}

class SeFiltration extends SvelteComponent {
  $$prop_def: SeFiltrationProps;
  $$events_def: SeFiltrationEvents;
  $$slot_def: SeFiltrationSlots;

  $on<K extends keyof SeFiltrationEvents>(type: K, callback: (e: SeFiltrationEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			item: 0,
			labelHint: 1,
			collapsed: 2,
			shadow: 3,
			labelViewMore: 4,
			labelViewLess: 5,
			labelSelectAll: 6,
			minItems: 7,
			maxItems: 8,
			showSelectAll: 9,
			searchable: 10,
			search: 11,
			getWebComponent: 14
		});
	}

	get item() {
		return this.$$.ctx[0];
	}

	set item(item) {
		this.$set({ item });
		flush();
	}

	get labelHint() {
		return this.$$.ctx[1];
	}

	set labelHint(labelHint) {
		this.$set({ labelHint });
		flush();
	}

	get collapsed() {
		return this.$$.ctx[2];
	}

	set collapsed(collapsed) {
		this.$set({ collapsed });
		flush();
	}

	get shadow() {
		return this.$$.ctx[3];
	}

	set shadow(shadow) {
		this.$set({ shadow });
		flush();
	}

	get labelViewMore() {
		return this.$$.ctx[4];
	}

	set labelViewMore(labelViewMore) {
		this.$set({ labelViewMore });
		flush();
	}

	get labelViewLess() {
		return this.$$.ctx[5];
	}

	set labelViewLess(labelViewLess) {
		this.$set({ labelViewLess });
		flush();
	}

	get labelSelectAll() {
		return this.$$.ctx[6];
	}

	set labelSelectAll(labelSelectAll) {
		this.$set({ labelSelectAll });
		flush();
	}

	get minItems() {
		return this.$$.ctx[7];
	}

	set minItems(minItems) {
		this.$set({ minItems });
		flush();
	}

	get maxItems() {
		return this.$$.ctx[8];
	}

	set maxItems(maxItems) {
		this.$set({ maxItems });
		flush();
	}

	get showSelectAll() {
		return this.$$.ctx[9];
	}

	set showSelectAll(showSelectAll) {
		this.$set({ showSelectAll });
		flush();
	}

	get searchable() {
		return this.$$.ctx[10];
	}

	set searchable(searchable) {
		this.$set({ searchable });
		flush();
	}

	get search() {
		return this.$$.ctx[11];
	}

	set search(search) {
		this.$set({ search });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationElement | undefined {
		return this.$$.ctx[14];
	}
}

export default SeFiltration;