/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeRadioGroupProps {
  
  /** Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background. */
  color?: Components.SeRadioGroup["color"]
  
  /** Defines the height of each button in the group.
`small` is the default setting, rendering a 32px height and a 14px font size.
`nano` sets the height to 24px and the font size to 12px. */
  size?: Components.SeRadioGroup["size"]
  
  /** Defines the direction of the flex element.
`row` is the default if used with `se-button`.
`column` is the default if used with `se-radio`. */
  direction?: Components.SeRadioGroup["direction"]
  
  /** Optional property that defines if the button is disabled.  Set to `false` by default. */
  disabled?: Components.SeRadioGroup["disabled"]
  
  /** Specify the currently selected child Radio value.. */
  value?: Components.SeRadioGroup["value"]
}

interface SeRadioGroupEvents {
  
  /** Passes the selected button value to the parent component when clicking on a button in the group. */
  didChange: Parameters<JSX.SeRadioGroup["onDidChange"]>[0]
}

interface SeRadioGroupSlots {
  default: any
}
  
/* generated by Svelte v3.42.6 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_radio_group;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			se_radio_group = element("se-radio-group");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_radio_group, "color", /*color*/ ctx[1]);
			set_custom_element_data(se_radio_group, "size", /*size*/ ctx[2]);
			set_custom_element_data(se_radio_group, "direction", /*direction*/ ctx[3]);
			set_custom_element_data(se_radio_group, "disabled", /*disabled*/ ctx[4]);
			set_custom_element_data(se_radio_group, "value", /*value*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, se_radio_group, anchor);

			if (default_slot) {
				default_slot.m(se_radio_group, null);
			}

			/*se_radio_group_binding*/ ctx[10](se_radio_group);
			current = true;

			if (!mounted) {
				dispose = listen(se_radio_group, "didChange", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*color*/ 2) {
				set_custom_element_data(se_radio_group, "color", /*color*/ ctx[1]);
			}

			if (!current || dirty & /*size*/ 4) {
				set_custom_element_data(se_radio_group, "size", /*size*/ ctx[2]);
			}

			if (!current || dirty & /*direction*/ 8) {
				set_custom_element_data(se_radio_group, "direction", /*direction*/ ctx[3]);
			}

			if (!current || dirty & /*disabled*/ 16) {
				set_custom_element_data(se_radio_group, "disabled", /*disabled*/ ctx[4]);
			}

			if (!current || dirty & /*value*/ 1) {
				set_custom_element_data(se_radio_group, "value", /*value*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_radio_group);
			if (default_slot) default_slot.d(detaching);
			/*se_radio_group_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { color = undefined } = $$props;
	let { size = undefined } = $$props;
	let { direction = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { value = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);

		if (e.type === 'didChange') {
			$$invalidate(0, value = e.detail);
		}
	};

	function se_radio_group_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('color' in $$props) $$invalidate(1, color = $$props.color);
		if ('size' in $$props) $$invalidate(2, size = $$props.size);
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		value,
		color,
		size,
		direction,
		disabled,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_radio_group_binding
	];
}

class SeRadioGroup extends SvelteComponent {
  $$prop_def: SeRadioGroupProps;
  $$events_def: SeRadioGroupEvents;
  $$slot_def: SeRadioGroupSlots;

  $on<K extends keyof SeRadioGroupEvents>(type: K, callback: (e: SeRadioGroupEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeRadioGroupProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			color: 1,
			size: 2,
			direction: 3,
			disabled: 4,
			value: 0,
			getWebComponent: 7
		});
	}

	get color() {
		return this.$$.ctx[1];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get size() {
		return this.$$.ctx[2];
	}

	set size(size) {
		this.$$set({ size });
		flush();
	}

	get direction() {
		return this.$$.ctx[3];
	}

	set direction(direction) {
		this.$$set({ direction });
		flush();
	}

	get disabled() {
		return this.$$.ctx[4];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get getWebComponent(): HTMLSeRadioGroupElement | undefined {
		return this.$$.ctx[7];
	}
}

export default SeRadioGroup;