/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartGroupProps {
  
  /** Id of the section that will be used to find the data in the Root Filter store. */
  sectionId?: Components.SeFiltrationSmartGroup["sectionId"]
  
  /** Nesting level of the group. Used to determine if the section should be wrapped in another section. */
  level?: Components.SeFiltrationSmartGroup["level"]
  
  /** Set mobile view or not */
  isMobile?: Components.SeFiltrationSmartGroup["isMobile"]
}

interface SeFiltrationSmartGroupEvents {
  
  /** Event that has info about the section whose collapsed/expanded state should be changed.
 Root Filter component listens to it. */
  toggleIsSectionExpanded: Parameters<JSX.SeFiltrationSmartGroup["onToggleIsSectionExpanded"]>[0]
}

interface SeFiltrationSmartGroupSlots {
  default: any
}
  
/* generated by Svelte v3.44.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_filtration_smart_group;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			se_filtration_smart_group = element("se-filtration-smart-group");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_group, "section-id", /*sectionId*/ ctx[0]);
			set_custom_element_data(se_filtration_smart_group, "level", /*level*/ ctx[1]);
			set_custom_element_data(se_filtration_smart_group, "is-mobile", /*isMobile*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_group, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_group, null);
			}

			/*se_filtration_smart_group_binding*/ ctx[8](se_filtration_smart_group);
			current = true;

			if (!mounted) {
				dispose = listen(se_filtration_smart_group, "toggleIsSectionExpanded", /*onEvent*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*sectionId*/ 1) {
				set_custom_element_data(se_filtration_smart_group, "section-id", /*sectionId*/ ctx[0]);
			}

			if (!current || dirty & /*level*/ 2) {
				set_custom_element_data(se_filtration_smart_group, "level", /*level*/ ctx[1]);
			}

			if (!current || dirty & /*isMobile*/ 4) {
				set_custom_element_data(se_filtration_smart_group, "is-mobile", /*isMobile*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_group);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_group_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { sectionId } = $$props;
	let { level = undefined } = $$props;
	let { isMobile = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_group_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('sectionId' in $$props) $$invalidate(0, sectionId = $$props.sectionId);
		if ('level' in $$props) $$invalidate(1, level = $$props.level);
		if ('isMobile' in $$props) $$invalidate(2, isMobile = $$props.isMobile);
		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		sectionId,
		level,
		isMobile,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_group_binding
	];
}

class SeFiltrationSmartGroup extends SvelteComponent {
  $$prop_def: SeFiltrationSmartGroupProps;
  $$events_def: SeFiltrationSmartGroupEvents;
  $$slot_def: SeFiltrationSmartGroupSlots;

  $on<K extends keyof SeFiltrationSmartGroupEvents>(type: K, callback: (e: SeFiltrationSmartGroupEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartGroupProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			sectionId: 0,
			level: 1,
			isMobile: 2,
			getWebComponent: 5
		});
	}

	get sectionId() {
		return this.$$.ctx[0];
	}

	set sectionId(sectionId) {
		this.$$set({ sectionId });
		flush();
	}

	get level() {
		return this.$$.ctx[1];
	}

	set level(level) {
		this.$$set({ level });
		flush();
	}

	get isMobile() {
		return this.$$.ctx[2];
	}

	set isMobile(isMobile) {
		this.$$set({ isMobile });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartGroupElement | undefined {
		return this.$$.ctx[5];
	}
}

export default SeFiltrationSmartGroup;