/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeCarouselPaginationProps {
  
  /** Number of pagination bullets */
  size?: Components.SeCarouselPagination["size"]
  
  /** Index of active/selected pagination bullet */
  activeIndex?: Components.SeCarouselPagination["activeIndex"]
}

interface SeCarouselPaginationEvents {
  
}

interface SeCarouselPaginationSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_carousel_pagination;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			se_carousel_pagination = element("se-carousel-pagination");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_carousel_pagination, "size", /*size*/ ctx[0]);
			set_custom_element_data(se_carousel_pagination, "active-index", /*activeIndex*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, se_carousel_pagination, anchor);

			if (default_slot) {
				default_slot.m(se_carousel_pagination, null);
			}

			/*se_carousel_pagination_binding*/ ctx[6](se_carousel_pagination);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*size*/ 1) {
				set_custom_element_data(se_carousel_pagination, "size", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*activeIndex*/ 2) {
				set_custom_element_data(se_carousel_pagination, "active-index", /*activeIndex*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_carousel_pagination);
			if (default_slot) default_slot.d(detaching);
			/*se_carousel_pagination_binding*/ ctx[6](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { size = undefined } = $$props;
	let { activeIndex = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_carousel_pagination_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("activeIndex" in $$props) $$invalidate(1, activeIndex = $$props.activeIndex);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [
		size,
		activeIndex,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_carousel_pagination_binding
	];
}

class SeCarouselPagination extends SvelteComponent {
  $$prop_def: SeCarouselPaginationProps;
  $$events_def: SeCarouselPaginationEvents;
  $$slot_def: SeCarouselPaginationSlots;

  $on<K extends keyof SeCarouselPaginationEvents>(type: K, callback: (e: SeCarouselPaginationEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeCarouselPaginationProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 0,
			activeIndex: 1,
			getWebComponent: 3
		});
	}

	get size() {
		return this.$$.ctx[0];
	}

	set size(size) {
		this.$set({ size });
		flush();
	}

	get activeIndex() {
		return this.$$.ctx[1];
	}

	set activeIndex(activeIndex) {
		this.$set({ activeIndex });
		flush();
	}

	get getWebComponent(): HTMLSeCarouselPaginationElement | undefined {
		return this.$$.ctx[3];
	}
}

export default SeCarouselPagination;