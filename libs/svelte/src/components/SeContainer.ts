/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeContainerProps {
  
  /** Defines the inner appearance of a container.
`fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set.
`widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set.
`centered` centers the container so the content does not exceed a maximum width.
`card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set.
Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
`inherited` will insure that no specific style is applied to the container. */
  option?: Components.SeContainer["option"]
  
  /** In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box.
`relative` is the default position. This is perfect to use with flex content.
`absolute` is useful in specific cases. Make sure you know what you are doing. */
  position?: Components.SeContainer["position"]
  
  /** Defines the direction of the flex element.
`row` is the default direction. This is perfect to use with flex content.
`column` is useful in specific cases. Make sure you know what you are doing. */
  direction?: Components.SeContainer["direction"]
  
  /** Defines how to display the element.
`flex` is the default display.
`block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block". */
  display?: Components.SeContainer["display"]
  
  /** Defines the spacing around the inside edge of a container.
`none` is 0px.
`small` is 4px.
`medium` is 8px.
`large` is 16px.
`xlarge` is 32px. */
  padding?: Components.SeContainer["padding"]
  
  /** Defines the gap between items.
`none` is 0px.
`small` is 4px.
`medium` is 8px.
`large` is 16px.
`xlarge` is 32px. */
  gap?: Components.SeContainer["gap"]
  
  /** When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there.
Default is `350px`. */
  columnSize?: Components.SeContainer["columnSize"]
  
  /** When in `display="grid"`, defines the height of each container.  Default is `300px`. */
  rowSize?: Components.SeContainer["rowSize"]
  
  /** Defines the background color of the container.
`none` has no background.
`standard` is `se-background`, light gray.
`alternative` is a white background. */
  color?: Components.SeContainer["color"]
}

interface SeContainerEvents {
  
}

interface SeContainerSlots {
  default: any
}
  
/* generated by Svelte v3.44.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_container;
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			se_container = element("se-container");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_container, "option", /*option*/ ctx[0]);
			set_custom_element_data(se_container, "position", /*position*/ ctx[1]);
			set_custom_element_data(se_container, "direction", /*direction*/ ctx[2]);
			set_custom_element_data(se_container, "display", /*display*/ ctx[3]);
			set_custom_element_data(se_container, "padding", /*padding*/ ctx[4]);
			set_custom_element_data(se_container, "gap", /*gap*/ ctx[5]);
			set_custom_element_data(se_container, "column-size", /*columnSize*/ ctx[6]);
			set_custom_element_data(se_container, "row-size", /*rowSize*/ ctx[7]);
			set_custom_element_data(se_container, "color", /*color*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, se_container, anchor);

			if (default_slot) {
				default_slot.m(se_container, null);
			}

			/*se_container_binding*/ ctx[13](se_container);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*option*/ 1) {
				set_custom_element_data(se_container, "option", /*option*/ ctx[0]);
			}

			if (!current || dirty & /*position*/ 2) {
				set_custom_element_data(se_container, "position", /*position*/ ctx[1]);
			}

			if (!current || dirty & /*direction*/ 4) {
				set_custom_element_data(se_container, "direction", /*direction*/ ctx[2]);
			}

			if (!current || dirty & /*display*/ 8) {
				set_custom_element_data(se_container, "display", /*display*/ ctx[3]);
			}

			if (!current || dirty & /*padding*/ 16) {
				set_custom_element_data(se_container, "padding", /*padding*/ ctx[4]);
			}

			if (!current || dirty & /*gap*/ 32) {
				set_custom_element_data(se_container, "gap", /*gap*/ ctx[5]);
			}

			if (!current || dirty & /*columnSize*/ 64) {
				set_custom_element_data(se_container, "column-size", /*columnSize*/ ctx[6]);
			}

			if (!current || dirty & /*rowSize*/ 128) {
				set_custom_element_data(se_container, "row-size", /*rowSize*/ ctx[7]);
			}

			if (!current || dirty & /*color*/ 256) {
				set_custom_element_data(se_container, "color", /*color*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_container);
			if (default_slot) default_slot.d(detaching);
			/*se_container_binding*/ ctx[13](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { option = undefined } = $$props;
	let { position = undefined } = $$props;
	let { direction = undefined } = $$props;
	let { display = undefined } = $$props;
	let { padding = undefined } = $$props;
	let { gap = undefined } = $$props;
	let { columnSize = undefined } = $$props;
	let { rowSize = undefined } = $$props;
	let { color = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_container_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('option' in $$props) $$invalidate(0, option = $$props.option);
		if ('position' in $$props) $$invalidate(1, position = $$props.position);
		if ('direction' in $$props) $$invalidate(2, direction = $$props.direction);
		if ('display' in $$props) $$invalidate(3, display = $$props.display);
		if ('padding' in $$props) $$invalidate(4, padding = $$props.padding);
		if ('gap' in $$props) $$invalidate(5, gap = $$props.gap);
		if ('columnSize' in $$props) $$invalidate(6, columnSize = $$props.columnSize);
		if ('rowSize' in $$props) $$invalidate(7, rowSize = $$props.rowSize);
		if ('color' in $$props) $$invalidate(8, color = $$props.color);
		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	return [
		option,
		position,
		direction,
		display,
		padding,
		gap,
		columnSize,
		rowSize,
		color,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_container_binding
	];
}

class SeContainer extends SvelteComponent {
  $$prop_def: SeContainerProps;
  $$events_def: SeContainerEvents;
  $$slot_def: SeContainerSlots;

  $on<K extends keyof SeContainerEvents>(type: K, callback: (e: SeContainerEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeContainerProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			option: 0,
			position: 1,
			direction: 2,
			display: 3,
			padding: 4,
			gap: 5,
			columnSize: 6,
			rowSize: 7,
			color: 8,
			getWebComponent: 10
		});
	}

	get option() {
		return this.$$.ctx[0];
	}

	set option(option) {
		this.$$set({ option });
		flush();
	}

	get position() {
		return this.$$.ctx[1];
	}

	set position(position) {
		this.$$set({ position });
		flush();
	}

	get direction() {
		return this.$$.ctx[2];
	}

	set direction(direction) {
		this.$$set({ direction });
		flush();
	}

	get display() {
		return this.$$.ctx[3];
	}

	set display(display) {
		this.$$set({ display });
		flush();
	}

	get padding() {
		return this.$$.ctx[4];
	}

	set padding(padding) {
		this.$$set({ padding });
		flush();
	}

	get gap() {
		return this.$$.ctx[5];
	}

	set gap(gap) {
		this.$$set({ gap });
		flush();
	}

	get columnSize() {
		return this.$$.ctx[6];
	}

	set columnSize(columnSize) {
		this.$$set({ columnSize });
		flush();
	}

	get rowSize() {
		return this.$$.ctx[7];
	}

	set rowSize(rowSize) {
		this.$$set({ rowSize });
		flush();
	}

	get color() {
		return this.$$.ctx[8];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get getWebComponent(): HTMLSeContainerElement | undefined {
		return this.$$.ctx[10];
	}
}

export default SeContainer;