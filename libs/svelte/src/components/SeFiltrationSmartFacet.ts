/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartFacetProps {
  
  /** Facet ID that will be used to retrieve data from store. */
  facetId?: Components.SeFiltrationSmartFacet["facetId"]
  
  /** Defines if the facet is used in mobile view. */
  isMobile?: Components.SeFiltrationSmartFacet["isMobile"]
  
  /** Defines maximum height of the content. */
  maxContentHeight?: Components.SeFiltrationSmartFacet["maxContentHeight"]
  
  /** Defines text of the "View more refinements" button. */
  viewMoreLabel?: Components.SeFiltrationSmartFacet["viewMoreLabel"]
  
  /** Defines text of the "View less refinements" button. */
  viewLessLabel?: Components.SeFiltrationSmartFacet["viewLessLabel"]
}

interface SeFiltrationSmartFacetEvents {
  
  /** Event that has info about facet whose collapsed/expanded state should be changed.
 Root Filter component listens to it. */
  toggleIsSectionExpanded: Parameters<JSX.SeFiltrationSmartFacet["onToggleIsSectionExpanded"]>[0]
}

interface SeFiltrationSmartFacetSlots {
  default: any
}
  
/* generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_filtration_smart_facet;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			se_filtration_smart_facet = element("se-filtration-smart-facet");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_facet, "facet-id", /*facetId*/ ctx[0]);
			set_custom_element_data(se_filtration_smart_facet, "is-mobile", /*isMobile*/ ctx[1]);
			set_custom_element_data(se_filtration_smart_facet, "max-content-height", /*maxContentHeight*/ ctx[2]);
			set_custom_element_data(se_filtration_smart_facet, "view-more-label", /*viewMoreLabel*/ ctx[3]);
			set_custom_element_data(se_filtration_smart_facet, "view-less-label", /*viewLessLabel*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_facet, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_facet, null);
			}

			/*se_filtration_smart_facet_binding*/ ctx[10](se_filtration_smart_facet);
			current = true;

			if (!mounted) {
				dispose = listen(se_filtration_smart_facet, "toggleIsSectionExpanded", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			if (!current || dirty & /*facetId*/ 1) {
				set_custom_element_data(se_filtration_smart_facet, "facet-id", /*facetId*/ ctx[0]);
			}

			if (!current || dirty & /*isMobile*/ 2) {
				set_custom_element_data(se_filtration_smart_facet, "is-mobile", /*isMobile*/ ctx[1]);
			}

			if (!current || dirty & /*maxContentHeight*/ 4) {
				set_custom_element_data(se_filtration_smart_facet, "max-content-height", /*maxContentHeight*/ ctx[2]);
			}

			if (!current || dirty & /*viewMoreLabel*/ 8) {
				set_custom_element_data(se_filtration_smart_facet, "view-more-label", /*viewMoreLabel*/ ctx[3]);
			}

			if (!current || dirty & /*viewLessLabel*/ 16) {
				set_custom_element_data(se_filtration_smart_facet, "view-less-label", /*viewLessLabel*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_facet);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_facet_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { facetId } = $$props;
	let { isMobile = undefined } = $$props;
	let { maxContentHeight = undefined } = $$props;
	let { viewMoreLabel = undefined } = $$props;
	let { viewLessLabel = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_facet_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("facetId" in $$props) $$invalidate(0, facetId = $$props.facetId);
		if ("isMobile" in $$props) $$invalidate(1, isMobile = $$props.isMobile);
		if ("maxContentHeight" in $$props) $$invalidate(2, maxContentHeight = $$props.maxContentHeight);
		if ("viewMoreLabel" in $$props) $$invalidate(3, viewMoreLabel = $$props.viewMoreLabel);
		if ("viewLessLabel" in $$props) $$invalidate(4, viewLessLabel = $$props.viewLessLabel);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		facetId,
		isMobile,
		maxContentHeight,
		viewMoreLabel,
		viewLessLabel,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_facet_binding
	];
}

class SeFiltrationSmartFacet extends SvelteComponent {
  $$prop_def: SeFiltrationSmartFacetProps;
  $$events_def: SeFiltrationSmartFacetEvents;
  $$slot_def: SeFiltrationSmartFacetSlots;

  $on<K extends keyof SeFiltrationSmartFacetEvents>(type: K, callback: (e: SeFiltrationSmartFacetEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartFacetProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			facetId: 0,
			isMobile: 1,
			maxContentHeight: 2,
			viewMoreLabel: 3,
			viewLessLabel: 4,
			getWebComponent: 7
		});
	}

	get facetId() {
		return this.$$.ctx[0];
	}

	set facetId(facetId) {
		this.$set({ facetId });
		flush();
	}

	get isMobile() {
		return this.$$.ctx[1];
	}

	set isMobile(isMobile) {
		this.$set({ isMobile });
		flush();
	}

	get maxContentHeight() {
		return this.$$.ctx[2];
	}

	set maxContentHeight(maxContentHeight) {
		this.$set({ maxContentHeight });
		flush();
	}

	get viewMoreLabel() {
		return this.$$.ctx[3];
	}

	set viewMoreLabel(viewMoreLabel) {
		this.$set({ viewMoreLabel });
		flush();
	}

	get viewLessLabel() {
		return this.$$.ctx[4];
	}

	set viewLessLabel(viewLessLabel) {
		this.$set({ viewLessLabel });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartFacetElement | undefined {
		return this.$$.ctx[7];
	}
}

export default SeFiltrationSmartFacet;