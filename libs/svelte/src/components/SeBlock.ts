/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeBlockProps {
  
  /** Defines whether or not a divider will be applied to the se-block header and footer.
`true` will add a divider to the se-block-header and se-block-footer, if they are present.
`false` will remove dividers on the se-block header and se-block-footer, if they are present. */
  divider?: Components.SeBlock["divider"]
  
  /** Defines the se-block outline.
Default setting is `false`.
Setting this property to `true` will add a 1px border. */
  outline?: Components.SeBlock["outline"]
  
  /** Defines the se-block outline color.
Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color.
`primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected.
`secondary` defines the outline color as `$se-sky-blue`. */
  outlineColor?: Components.SeBlock["outlineColor"]
  
  /** Defines the se-block corner radius.
Default setting is `small`, rendering a rounded, 4px rounded corner.
`none` is for a sharp, 90 degree corner.
`nano` is for a slightly rounded, 2px rounded corner. */
  corner?: Components.SeBlock["corner"]
  
  /** Defines the se-block item's ability to appear clickable / selectable.
Default setting is `false`, resulting in no hover effects on the block level.
`true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block. */
  clickable?: Components.SeBlock["clickable"]
  
  /** Defines clickable se-block item's bar on hover.
Default setting is `false`.
`true` renders a `$se-life-green` colored bar on a hover. */
  clickableBar?: Components.SeBlock["clickableBar"]
  
  /** Defines the spacing around the outside edge of a block.
Default `none` is 0px.
`small` is 4px.
`medium` is 8px.
`large` is 16px.
`xlarge` is 32px. */
  margin?: Components.SeBlock["margin"]
  
  /** Defines how to display the element.
`flex` is the default display.
`block` helps in specific cases. Make sure you know what you are doing. */
  display?: Components.SeBlock["display"]
  
  /** Optional property that defines the background color of the block.
Default setting is `alternative`, rendering the "alternative" theme background.
`none` has no background.
`standard` renders the "standard" theme background. */
  color?: Components.SeBlock["color"]
  
  /** Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default. */
  width?: Components.SeBlock["width"]
  
  /** Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default. */
  height?: Components.SeBlock["height"]
  
  /** When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item.
Default setting is `false`, spanning 1 row and 1 column (1/1).
`true` spans 2 rows and 2 columns (2/2).
`vertical` spans 2 rows (2/1).
`horizontal` spans 2 columns (1/2). */
  enlarged?: Components.SeBlock["enlarged"]
  
  /** Displays the loading icon if set to `true`.  Default setting is `false`. */
  loading?: Components.SeBlock["loading"]
  
  /** Defines the visual appearance of a block.
Default setting is `basic`, which will remove any spacing.
`widget` will create a flat widget look and feel with a `medium` margin around it.
`card` will create a card look and feel with rounded corners, and with a `large` margin around it.
Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated. */
  option?: Components.SeBlock["option"]
}

interface SeBlockEvents {
  
}

interface SeBlockSlots {
  default: any
}
  
/* generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_block;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	return {
		c() {
			se_block = element("se-block");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_block, "divider", /*divider*/ ctx[0]);
			set_custom_element_data(se_block, "outline", /*outline*/ ctx[1]);
			set_custom_element_data(se_block, "outline-color", /*outlineColor*/ ctx[2]);
			set_custom_element_data(se_block, "corner", /*corner*/ ctx[3]);
			set_custom_element_data(se_block, "clickable", /*clickable*/ ctx[4]);
			set_custom_element_data(se_block, "clickable-bar", /*clickableBar*/ ctx[5]);
			set_custom_element_data(se_block, "margin", /*margin*/ ctx[6]);
			set_custom_element_data(se_block, "display", /*display*/ ctx[7]);
			set_custom_element_data(se_block, "color", /*color*/ ctx[8]);
			set_custom_element_data(se_block, "width", /*width*/ ctx[9]);
			set_custom_element_data(se_block, "height", /*height*/ ctx[10]);
			set_custom_element_data(se_block, "enlarged", /*enlarged*/ ctx[11]);
			set_custom_element_data(se_block, "loading", /*loading*/ ctx[12]);
			set_custom_element_data(se_block, "option", /*option*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, se_block, anchor);

			if (default_slot) {
				default_slot.m(se_block, null);
			}

			/*se_block_binding*/ ctx[18](se_block);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*divider*/ 1) {
				set_custom_element_data(se_block, "divider", /*divider*/ ctx[0]);
			}

			if (!current || dirty & /*outline*/ 2) {
				set_custom_element_data(se_block, "outline", /*outline*/ ctx[1]);
			}

			if (!current || dirty & /*outlineColor*/ 4) {
				set_custom_element_data(se_block, "outline-color", /*outlineColor*/ ctx[2]);
			}

			if (!current || dirty & /*corner*/ 8) {
				set_custom_element_data(se_block, "corner", /*corner*/ ctx[3]);
			}

			if (!current || dirty & /*clickable*/ 16) {
				set_custom_element_data(se_block, "clickable", /*clickable*/ ctx[4]);
			}

			if (!current || dirty & /*clickableBar*/ 32) {
				set_custom_element_data(se_block, "clickable-bar", /*clickableBar*/ ctx[5]);
			}

			if (!current || dirty & /*margin*/ 64) {
				set_custom_element_data(se_block, "margin", /*margin*/ ctx[6]);
			}

			if (!current || dirty & /*display*/ 128) {
				set_custom_element_data(se_block, "display", /*display*/ ctx[7]);
			}

			if (!current || dirty & /*color*/ 256) {
				set_custom_element_data(se_block, "color", /*color*/ ctx[8]);
			}

			if (!current || dirty & /*width*/ 512) {
				set_custom_element_data(se_block, "width", /*width*/ ctx[9]);
			}

			if (!current || dirty & /*height*/ 1024) {
				set_custom_element_data(se_block, "height", /*height*/ ctx[10]);
			}

			if (!current || dirty & /*enlarged*/ 2048) {
				set_custom_element_data(se_block, "enlarged", /*enlarged*/ ctx[11]);
			}

			if (!current || dirty & /*loading*/ 4096) {
				set_custom_element_data(se_block, "loading", /*loading*/ ctx[12]);
			}

			if (!current || dirty & /*option*/ 8192) {
				set_custom_element_data(se_block, "option", /*option*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_block);
			if (default_slot) default_slot.d(detaching);
			/*se_block_binding*/ ctx[18](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { divider = undefined } = $$props;
	let { outline = undefined } = $$props;
	let { outlineColor = undefined } = $$props;
	let { corner = undefined } = $$props;
	let { clickable = undefined } = $$props;
	let { clickableBar = undefined } = $$props;
	let { margin = undefined } = $$props;
	let { display = undefined } = $$props;
	let { color = undefined } = $$props;
	let { width = undefined } = $$props;
	let { height = undefined } = $$props;
	let { enlarged = undefined } = $$props;
	let { loading = undefined } = $$props;
	let { option = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(14, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_block_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(14, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('divider' in $$props) $$invalidate(0, divider = $$props.divider);
		if ('outline' in $$props) $$invalidate(1, outline = $$props.outline);
		if ('outlineColor' in $$props) $$invalidate(2, outlineColor = $$props.outlineColor);
		if ('corner' in $$props) $$invalidate(3, corner = $$props.corner);
		if ('clickable' in $$props) $$invalidate(4, clickable = $$props.clickable);
		if ('clickableBar' in $$props) $$invalidate(5, clickableBar = $$props.clickableBar);
		if ('margin' in $$props) $$invalidate(6, margin = $$props.margin);
		if ('display' in $$props) $$invalidate(7, display = $$props.display);
		if ('color' in $$props) $$invalidate(8, color = $$props.color);
		if ('width' in $$props) $$invalidate(9, width = $$props.width);
		if ('height' in $$props) $$invalidate(10, height = $$props.height);
		if ('enlarged' in $$props) $$invalidate(11, enlarged = $$props.enlarged);
		if ('loading' in $$props) $$invalidate(12, loading = $$props.loading);
		if ('option' in $$props) $$invalidate(13, option = $$props.option);
		if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
	};

	return [
		divider,
		outline,
		outlineColor,
		corner,
		clickable,
		clickableBar,
		margin,
		display,
		color,
		width,
		height,
		enlarged,
		loading,
		option,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_block_binding
	];
}

class SeBlock extends SvelteComponent {
  $$prop_def: SeBlockProps;
  $$events_def: SeBlockEvents;
  $$slot_def: SeBlockSlots;

  $on<K extends keyof SeBlockEvents>(type: K, callback: (e: SeBlockEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeBlockProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			divider: 0,
			outline: 1,
			outlineColor: 2,
			corner: 3,
			clickable: 4,
			clickableBar: 5,
			margin: 6,
			display: 7,
			color: 8,
			width: 9,
			height: 10,
			enlarged: 11,
			loading: 12,
			option: 13,
			getWebComponent: 15
		});
	}

	get divider() {
		return this.$$.ctx[0];
	}

	set divider(divider) {
		this.$$set({ divider });
		flush();
	}

	get outline() {
		return this.$$.ctx[1];
	}

	set outline(outline) {
		this.$$set({ outline });
		flush();
	}

	get outlineColor() {
		return this.$$.ctx[2];
	}

	set outlineColor(outlineColor) {
		this.$$set({ outlineColor });
		flush();
	}

	get corner() {
		return this.$$.ctx[3];
	}

	set corner(corner) {
		this.$$set({ corner });
		flush();
	}

	get clickable() {
		return this.$$.ctx[4];
	}

	set clickable(clickable) {
		this.$$set({ clickable });
		flush();
	}

	get clickableBar() {
		return this.$$.ctx[5];
	}

	set clickableBar(clickableBar) {
		this.$$set({ clickableBar });
		flush();
	}

	get margin() {
		return this.$$.ctx[6];
	}

	set margin(margin) {
		this.$$set({ margin });
		flush();
	}

	get display() {
		return this.$$.ctx[7];
	}

	set display(display) {
		this.$$set({ display });
		flush();
	}

	get color() {
		return this.$$.ctx[8];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get width() {
		return this.$$.ctx[9];
	}

	set width(width) {
		this.$$set({ width });
		flush();
	}

	get height() {
		return this.$$.ctx[10];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get enlarged() {
		return this.$$.ctx[11];
	}

	set enlarged(enlarged) {
		this.$$set({ enlarged });
		flush();
	}

	get loading() {
		return this.$$.ctx[12];
	}

	set loading(loading) {
		this.$$set({ loading });
		flush();
	}

	get option() {
		return this.$$.ctx[13];
	}

	set option(option) {
		this.$$set({ option });
		flush();
	}

	get getWebComponent(): HTMLSeBlockElement | undefined {
		return this.$$.ctx[15];
	}
}

export default SeBlock;