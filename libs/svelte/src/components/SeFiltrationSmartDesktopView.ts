/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartDesktopViewProps {
  
  /** Defines text that will be used in the "Reset" button. */
  resetButtonLabel?: Components.SeFiltrationSmartDesktopView["resetButtonLabel"]
  
  /** Defines text of the "View more refinements" button in a facet. */
  viewMoreRefinementsLabel?: Components.SeFiltrationSmartDesktopView["viewMoreRefinementsLabel"]
  
  /** Defines text of the "View less refinements" button in a facet. */
  viewLessRefinementsLabel?: Components.SeFiltrationSmartDesktopView["viewLessRefinementsLabel"]
  
  /** Defines text of the "View more facets" button at the bottom of the filter. */
  viewMoreFacetsLabel?: Components.SeFiltrationSmartDesktopView["viewMoreFacetsLabel"]
  
  /** Defines text of the "View less facets" button at the bottom of the filter. */
  viewLessFacetsLabel?: Components.SeFiltrationSmartDesktopView["viewLessFacetsLabel"]
  
  /** Defines text that will be used as the header of the Filter. */
  headerLabel?: Components.SeFiltrationSmartDesktopView["headerLabel"]
  
  /** Defines maximum height of a section content. */
  maxFacetContentHeight?: Components.SeFiltrationSmartDesktopView["maxFacetContentHeight"]
}

interface SeFiltrationSmartDesktopViewEvents {
  
}

interface SeFiltrationSmartDesktopViewSlots {
  default: any
}
  
/* generated by Svelte v3.42.6 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_filtration_smart_desktop_view;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			se_filtration_smart_desktop_view = element("se-filtration-smart-desktop-view");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_desktop_view, "reset-button-label", /*resetButtonLabel*/ ctx[0]);
			set_custom_element_data(se_filtration_smart_desktop_view, "view-more-refinements-label", /*viewMoreRefinementsLabel*/ ctx[1]);
			set_custom_element_data(se_filtration_smart_desktop_view, "view-less-refinements-label", /*viewLessRefinementsLabel*/ ctx[2]);
			set_custom_element_data(se_filtration_smart_desktop_view, "view-more-facets-label", /*viewMoreFacetsLabel*/ ctx[3]);
			set_custom_element_data(se_filtration_smart_desktop_view, "view-less-facets-label", /*viewLessFacetsLabel*/ ctx[4]);
			set_custom_element_data(se_filtration_smart_desktop_view, "header-label", /*headerLabel*/ ctx[5]);
			set_custom_element_data(se_filtration_smart_desktop_view, "max-facet-content-height", /*maxFacetContentHeight*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_desktop_view, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_desktop_view, null);
			}

			/*se_filtration_smart_desktop_view_binding*/ ctx[11](se_filtration_smart_desktop_view);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*resetButtonLabel*/ 1) {
				set_custom_element_data(se_filtration_smart_desktop_view, "reset-button-label", /*resetButtonLabel*/ ctx[0]);
			}

			if (!current || dirty & /*viewMoreRefinementsLabel*/ 2) {
				set_custom_element_data(se_filtration_smart_desktop_view, "view-more-refinements-label", /*viewMoreRefinementsLabel*/ ctx[1]);
			}

			if (!current || dirty & /*viewLessRefinementsLabel*/ 4) {
				set_custom_element_data(se_filtration_smart_desktop_view, "view-less-refinements-label", /*viewLessRefinementsLabel*/ ctx[2]);
			}

			if (!current || dirty & /*viewMoreFacetsLabel*/ 8) {
				set_custom_element_data(se_filtration_smart_desktop_view, "view-more-facets-label", /*viewMoreFacetsLabel*/ ctx[3]);
			}

			if (!current || dirty & /*viewLessFacetsLabel*/ 16) {
				set_custom_element_data(se_filtration_smart_desktop_view, "view-less-facets-label", /*viewLessFacetsLabel*/ ctx[4]);
			}

			if (!current || dirty & /*headerLabel*/ 32) {
				set_custom_element_data(se_filtration_smart_desktop_view, "header-label", /*headerLabel*/ ctx[5]);
			}

			if (!current || dirty & /*maxFacetContentHeight*/ 64) {
				set_custom_element_data(se_filtration_smart_desktop_view, "max-facet-content-height", /*maxFacetContentHeight*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_desktop_view);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_desktop_view_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { resetButtonLabel } = $$props;
	let { viewMoreRefinementsLabel } = $$props;
	let { viewLessRefinementsLabel } = $$props;
	let { viewMoreFacetsLabel } = $$props;
	let { viewLessFacetsLabel } = $$props;
	let { headerLabel = undefined } = $$props;
	let { maxFacetContentHeight = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_desktop_view_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('resetButtonLabel' in $$props) $$invalidate(0, resetButtonLabel = $$props.resetButtonLabel);
		if ('viewMoreRefinementsLabel' in $$props) $$invalidate(1, viewMoreRefinementsLabel = $$props.viewMoreRefinementsLabel);
		if ('viewLessRefinementsLabel' in $$props) $$invalidate(2, viewLessRefinementsLabel = $$props.viewLessRefinementsLabel);
		if ('viewMoreFacetsLabel' in $$props) $$invalidate(3, viewMoreFacetsLabel = $$props.viewMoreFacetsLabel);
		if ('viewLessFacetsLabel' in $$props) $$invalidate(4, viewLessFacetsLabel = $$props.viewLessFacetsLabel);
		if ('headerLabel' in $$props) $$invalidate(5, headerLabel = $$props.headerLabel);
		if ('maxFacetContentHeight' in $$props) $$invalidate(6, maxFacetContentHeight = $$props.maxFacetContentHeight);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		resetButtonLabel,
		viewMoreRefinementsLabel,
		viewLessRefinementsLabel,
		viewMoreFacetsLabel,
		viewLessFacetsLabel,
		headerLabel,
		maxFacetContentHeight,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_desktop_view_binding
	];
}

class SeFiltrationSmartDesktopView extends SvelteComponent {
  $$prop_def: SeFiltrationSmartDesktopViewProps;
  $$events_def: SeFiltrationSmartDesktopViewEvents;
  $$slot_def: SeFiltrationSmartDesktopViewSlots;

  $on<K extends keyof SeFiltrationSmartDesktopViewEvents>(type: K, callback: (e: SeFiltrationSmartDesktopViewEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartDesktopViewProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			resetButtonLabel: 0,
			viewMoreRefinementsLabel: 1,
			viewLessRefinementsLabel: 2,
			viewMoreFacetsLabel: 3,
			viewLessFacetsLabel: 4,
			headerLabel: 5,
			maxFacetContentHeight: 6,
			getWebComponent: 8
		});
	}

	get resetButtonLabel() {
		return this.$$.ctx[0];
	}

	set resetButtonLabel(resetButtonLabel) {
		this.$$set({ resetButtonLabel });
		flush();
	}

	get viewMoreRefinementsLabel() {
		return this.$$.ctx[1];
	}

	set viewMoreRefinementsLabel(viewMoreRefinementsLabel) {
		this.$$set({ viewMoreRefinementsLabel });
		flush();
	}

	get viewLessRefinementsLabel() {
		return this.$$.ctx[2];
	}

	set viewLessRefinementsLabel(viewLessRefinementsLabel) {
		this.$$set({ viewLessRefinementsLabel });
		flush();
	}

	get viewMoreFacetsLabel() {
		return this.$$.ctx[3];
	}

	set viewMoreFacetsLabel(viewMoreFacetsLabel) {
		this.$$set({ viewMoreFacetsLabel });
		flush();
	}

	get viewLessFacetsLabel() {
		return this.$$.ctx[4];
	}

	set viewLessFacetsLabel(viewLessFacetsLabel) {
		this.$$set({ viewLessFacetsLabel });
		flush();
	}

	get headerLabel() {
		return this.$$.ctx[5];
	}

	set headerLabel(headerLabel) {
		this.$$set({ headerLabel });
		flush();
	}

	get maxFacetContentHeight() {
		return this.$$.ctx[6];
	}

	set maxFacetContentHeight(maxFacetContentHeight) {
		this.$$set({ maxFacetContentHeight });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartDesktopViewElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SeFiltrationSmartDesktopView;