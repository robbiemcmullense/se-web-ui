/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFabProps {
  
  /** Property that determines if an icon is included in the main action button. */
  icon?: Components.SeFab["icon"]
  
  /** Property that determines the functionality of the FAB.
The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB.
The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB. */
  option?: Components.SeFab["option"]
  
  /** Property that determines the position of the component.
The default setting is `bottom`, rendering a FAB at the bottom right corner.
The `top` setting renders the FAB at the top right corner. */
  position?: Components.SeFab["position"]
  
  /** Indicates the color of your main action button .
The Default setting is `primary` color.
The `alternative` button can also be used. */
  color?: Components.SeFab["color"]
  
  /** Indicates if there is an overlay behind the FAB. Used only if in dial mode. */
  overlay?: Components.SeFab["overlay"]
}

interface SeFabEvents {
  
  /** Event emitted to close the tooltip (if there is one) when interacting with the fab button. */
  closeTooltips: Parameters<JSX.SeFab["onCloseTooltips"]>[0]
}

interface SeFabSlots {
  default: any
}
  
/* generated by Svelte v3.44.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_fab;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			se_fab = element("se-fab");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_fab, "icon", /*icon*/ ctx[0]);
			set_custom_element_data(se_fab, "option", /*option*/ ctx[1]);
			set_custom_element_data(se_fab, "position", /*position*/ ctx[2]);
			set_custom_element_data(se_fab, "color", /*color*/ ctx[3]);
			set_custom_element_data(se_fab, "overlay", /*overlay*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_fab, anchor);

			if (default_slot) {
				default_slot.m(se_fab, null);
			}

			/*se_fab_binding*/ ctx[11](se_fab);
			current = true;

			if (!mounted) {
				dispose = listen(se_fab, "closeTooltips", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*icon*/ 1) {
				set_custom_element_data(se_fab, "icon", /*icon*/ ctx[0]);
			}

			if (!current || dirty & /*option*/ 2) {
				set_custom_element_data(se_fab, "option", /*option*/ ctx[1]);
			}

			if (!current || dirty & /*position*/ 4) {
				set_custom_element_data(se_fab, "position", /*position*/ ctx[2]);
			}

			if (!current || dirty & /*color*/ 8) {
				set_custom_element_data(se_fab, "color", /*color*/ ctx[3]);
			}

			if (!current || dirty & /*overlay*/ 16) {
				set_custom_element_data(se_fab, "overlay", /*overlay*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_fab);
			if (default_slot) default_slot.d(detaching);
			/*se_fab_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { icon = undefined } = $$props;
	let { option = undefined } = $$props;
	let { position = undefined } = $$props;
	let { color = undefined } = $$props;
	let { overlay = undefined } = $$props;
	const toggleAction = (...args) => __ref.toggleAction(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_fab_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
		if ('option' in $$props) $$invalidate(1, option = $$props.option);
		if ('position' in $$props) $$invalidate(2, position = $$props.position);
		if ('color' in $$props) $$invalidate(3, color = $$props.color);
		if ('overlay' in $$props) $$invalidate(4, overlay = $$props.overlay);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		icon,
		option,
		position,
		color,
		overlay,
		__ref,
		onEvent,
		toggleAction,
		getWebComponent,
		$$scope,
		slots,
		se_fab_binding
	];
}

class SeFab extends SvelteComponent {
  $$prop_def: SeFabProps;
  $$events_def: SeFabEvents;
  $$slot_def: SeFabSlots;

  $on<K extends keyof SeFabEvents>(type: K, callback: (e: SeFabEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFabProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			icon: 0,
			option: 1,
			position: 2,
			color: 3,
			overlay: 4,
			toggleAction: 7,
			getWebComponent: 8
		});
	}

	get icon() {
		return this.$$.ctx[0];
	}

	set icon(icon) {
		this.$$set({ icon });
		flush();
	}

	get option() {
		return this.$$.ctx[1];
	}

	set option(option) {
		this.$$set({ option });
		flush();
	}

	get position() {
		return this.$$.ctx[2];
	}

	set position(position) {
		this.$$set({ position });
		flush();
	}

	get color() {
		return this.$$.ctx[3];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get overlay() {
		return this.$$.ctx[4];
	}

	set overlay(overlay) {
		this.$$set({ overlay });
		flush();
	}

	
  /** Use this method to toggle (show/hide) the mini action buttons. */
 get toggleAction(): Components.SeFab["toggleAction"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSeFabElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SeFab;