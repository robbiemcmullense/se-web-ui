/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeFiltrationSmartTabProps {
  
  /** Id of the filter that will be used to find the data in the Root Filter store. */
  refinementId?: Components.SeFiltrationSmartTab["refinementId"]
}

interface SeFiltrationSmartTabEvents {
  
  /** Event that has info about tab whose state should be changed. Root Filter component listens to it. */
  refinementStateChanged: Parameters<JSX.SeFiltrationSmartTab["onRefinementStateChanged"]>[0]
}

interface SeFiltrationSmartTabSlots {
  default: any
}
  
/* generated by Svelte v3.42.6 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_filtration_smart_tab;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			se_filtration_smart_tab = element("se-filtration-smart-tab");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_filtration_smart_tab, "refinement-id", /*refinementId*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, se_filtration_smart_tab, anchor);

			if (default_slot) {
				default_slot.m(se_filtration_smart_tab, null);
			}

			/*se_filtration_smart_tab_binding*/ ctx[6](se_filtration_smart_tab);
			current = true;

			if (!mounted) {
				dispose = listen(se_filtration_smart_tab, "refinementStateChanged", /*onEvent*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*refinementId*/ 1) {
				set_custom_element_data(se_filtration_smart_tab, "refinement-id", /*refinementId*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_filtration_smart_tab);
			if (default_slot) default_slot.d(detaching);
			/*se_filtration_smart_tab_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { refinementId } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_filtration_smart_tab_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('refinementId' in $$props) $$invalidate(0, refinementId = $$props.refinementId);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [
		refinementId,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_filtration_smart_tab_binding
	];
}

class SeFiltrationSmartTab extends SvelteComponent {
  $$prop_def: SeFiltrationSmartTabProps;
  $$events_def: SeFiltrationSmartTabEvents;
  $$slot_def: SeFiltrationSmartTabSlots;

  $on<K extends keyof SeFiltrationSmartTabEvents>(type: K, callback: (e: SeFiltrationSmartTabEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeFiltrationSmartTabProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { refinementId: 0, getWebComponent: 3 });
	}

	get refinementId() {
		return this.$$.ctx[0];
	}

	set refinementId(refinementId) {
		this.$$set({ refinementId });
		flush();
	}

	get getWebComponent(): HTMLSeFiltrationSmartTabElement | undefined {
		return this.$$.ctx[3];
	}
}

export default SeFiltrationSmartTab;