/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeDialogProps {
  
  /** Defines the size of the modal.
`small`: used in alerts and messages
`medium`: default setting, used by other apps
`fill`: takes the full space of the screen */
  size?: Components.SeDialog["size"]
  
  /** Defines the color of the dialog header.
`alternative`: Alternative background with primary color for the text
`primary`: Primary color schema and default setting. */
  color?: Components.SeDialog["color"]
  
  /** Indicates whether or not the dialog is open or closed.  Default setting is `false`. */
  open?: Components.SeDialog["open"]
  
  /** Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`. */
  canBackdrop?: Components.SeDialog["canBackdrop"]
  
  /** Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `false`. */
  noBackdrop?: Components.SeDialog["noBackdrop"]
  
  /** Option to scroll page in browser window if set to `true`. */
  pageScroll?: Components.SeDialog["pageScroll"]
}

interface SeDialogEvents {
  
  /** Send data to the parent component when the backdrop is clicked. */
  backdrop: Parameters<JSX.SeDialog["onBackdrop"]>[0]
  
  /** Send data to the parent component when clicking an element within the dialog to close it.
The modal can then be safely removed from the DOM. */
  didClose: Parameters<JSX.SeDialog["onDidClose"]>[0]
}

interface SeDialogSlots {
  default: any
}
  
/* generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_dialog;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			se_dialog = element("se-dialog");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_dialog, "size", /*size*/ ctx[0]);
			set_custom_element_data(se_dialog, "color", /*color*/ ctx[1]);
			set_custom_element_data(se_dialog, "open", /*open*/ ctx[2]);
			set_custom_element_data(se_dialog, "can-backdrop", /*canBackdrop*/ ctx[3]);
			set_custom_element_data(se_dialog, "no-backdrop", /*noBackdrop*/ ctx[4]);
			set_custom_element_data(se_dialog, "page-scroll", /*pageScroll*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, se_dialog, anchor);

			if (default_slot) {
				default_slot.m(se_dialog, null);
			}

			/*se_dialog_binding*/ ctx[11](se_dialog);
			current = true;

			if (!mounted) {
				dispose = [
					listen(se_dialog, "backdrop", /*onEvent*/ ctx[7]),
					listen(se_dialog, "didClose", /*onEvent*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*size*/ 1) {
				set_custom_element_data(se_dialog, "size", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*color*/ 2) {
				set_custom_element_data(se_dialog, "color", /*color*/ ctx[1]);
			}

			if (!current || dirty & /*open*/ 4) {
				set_custom_element_data(se_dialog, "open", /*open*/ ctx[2]);
			}

			if (!current || dirty & /*canBackdrop*/ 8) {
				set_custom_element_data(se_dialog, "can-backdrop", /*canBackdrop*/ ctx[3]);
			}

			if (!current || dirty & /*noBackdrop*/ 16) {
				set_custom_element_data(se_dialog, "no-backdrop", /*noBackdrop*/ ctx[4]);
			}

			if (!current || dirty & /*pageScroll*/ 32) {
				set_custom_element_data(se_dialog, "page-scroll", /*pageScroll*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_dialog);
			if (default_slot) default_slot.d(detaching);
			/*se_dialog_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { size = undefined } = $$props;
	let { color = undefined } = $$props;
	let { open = undefined } = $$props;
	let { canBackdrop = undefined } = $$props;
	let { noBackdrop = undefined } = $$props;
	let { pageScroll = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(6, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_dialog_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(6, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("open" in $$props) $$invalidate(2, open = $$props.open);
		if ("canBackdrop" in $$props) $$invalidate(3, canBackdrop = $$props.canBackdrop);
		if ("noBackdrop" in $$props) $$invalidate(4, noBackdrop = $$props.noBackdrop);
		if ("pageScroll" in $$props) $$invalidate(5, pageScroll = $$props.pageScroll);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		size,
		color,
		open,
		canBackdrop,
		noBackdrop,
		pageScroll,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_dialog_binding
	];
}

class SeDialog extends SvelteComponent {
  $$prop_def: SeDialogProps;
  $$events_def: SeDialogEvents;
  $$slot_def: SeDialogSlots;

  $on<K extends keyof SeDialogEvents>(type: K, callback: (e: SeDialogEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeDialogProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 0,
			color: 1,
			open: 2,
			canBackdrop: 3,
			noBackdrop: 4,
			pageScroll: 5,
			getWebComponent: 8
		});
	}

	get size() {
		return this.$$.ctx[0];
	}

	set size(size) {
		this.$set({ size });
		flush();
	}

	get color() {
		return this.$$.ctx[1];
	}

	set color(color) {
		this.$set({ color });
		flush();
	}

	get open() {
		return this.$$.ctx[2];
	}

	set open(open) {
		this.$set({ open });
		flush();
	}

	get canBackdrop() {
		return this.$$.ctx[3];
	}

	set canBackdrop(canBackdrop) {
		this.$set({ canBackdrop });
		flush();
	}

	get noBackdrop() {
		return this.$$.ctx[4];
	}

	set noBackdrop(noBackdrop) {
		this.$set({ noBackdrop });
		flush();
	}

	get pageScroll() {
		return this.$$.ctx[5];
	}

	set pageScroll(pageScroll) {
		this.$set({ pageScroll });
		flush();
	}

	get getWebComponent(): HTMLSeDialogElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SeDialog;