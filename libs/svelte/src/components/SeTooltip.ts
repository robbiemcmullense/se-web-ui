/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeTooltipProps {
  
  /** Indicates the position of your tooltip.
The default setting is `bottom`, rendering the tooltip below its parent. */
  position?: Components.SeTooltip["position"]
  
  /**  */
  action?: Components.SeTooltip["action"]
  
  /** Indicates the color of the tooltip */
  color?: Components.SeTooltip["color"]
  
  /** Add a delay to display the tooltip in millisecond. */
  showDelay?: Components.SeTooltip["showDelay"]
}

interface SeTooltipEvents {
  
  /** Event emitted when the tooltip has been opened. */
  didOpen: Parameters<JSX.SeTooltip["onDidOpen"]>[0]
  
  /** Event emitted when the tooltip has been closed. */
  didClose: Parameters<JSX.SeTooltip["onDidClose"]>[0]
}

interface SeTooltipSlots {
  default: any
}
  
/* generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_tooltip;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			se_tooltip = element("se-tooltip");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_tooltip, "position", /*position*/ ctx[0]);
			set_custom_element_data(se_tooltip, "action", /*action*/ ctx[1]);
			set_custom_element_data(se_tooltip, "color", /*color*/ ctx[2]);
			set_custom_element_data(se_tooltip, "show-delay", /*showDelay*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, se_tooltip, anchor);

			if (default_slot) {
				default_slot.m(se_tooltip, null);
			}

			/*se_tooltip_binding*/ ctx[11](se_tooltip);
			current = true;

			if (!mounted) {
				dispose = [
					listen(se_tooltip, "didOpen", /*onEvent*/ ctx[5]),
					listen(se_tooltip, "didClose", /*onEvent*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*position*/ 1) {
				set_custom_element_data(se_tooltip, "position", /*position*/ ctx[0]);
			}

			if (!current || dirty & /*action*/ 2) {
				set_custom_element_data(se_tooltip, "action", /*action*/ ctx[1]);
			}

			if (!current || dirty & /*color*/ 4) {
				set_custom_element_data(se_tooltip, "color", /*color*/ ctx[2]);
			}

			if (!current || dirty & /*showDelay*/ 8) {
				set_custom_element_data(se_tooltip, "show-delay", /*showDelay*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_tooltip);
			if (default_slot) default_slot.d(detaching);
			/*se_tooltip_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { position = undefined } = $$props;
	let { action = undefined } = $$props;
	let { color = undefined } = $$props;
	let { showDelay = undefined } = $$props;
	const open = (...args) => __ref.open(...args);
	const close = (...args) => __ref.close(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_tooltip_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('position' in $$props) $$invalidate(0, position = $$props.position);
		if ('action' in $$props) $$invalidate(1, action = $$props.action);
		if ('color' in $$props) $$invalidate(2, color = $$props.color);
		if ('showDelay' in $$props) $$invalidate(3, showDelay = $$props.showDelay);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		position,
		action,
		color,
		showDelay,
		__ref,
		onEvent,
		open,
		close,
		getWebComponent,
		$$scope,
		slots,
		se_tooltip_binding
	];
}

class SeTooltip extends SvelteComponent {
  $$prop_def: SeTooltipProps;
  $$events_def: SeTooltipEvents;
  $$slot_def: SeTooltipSlots;

  $on<K extends keyof SeTooltipEvents>(type: K, callback: (e: SeTooltipEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeTooltipProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			position: 0,
			action: 1,
			color: 2,
			showDelay: 3,
			open: 6,
			close: 7,
			getWebComponent: 8
		});
	}

	get position() {
		return this.$$.ctx[0];
	}

	set position(position) {
		this.$$set({ position });
		flush();
	}

	get action() {
		return this.$$.ctx[1];
	}

	set action(action) {
		this.$$set({ action });
		flush();
	}

	get color() {
		return this.$$.ctx[2];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get showDelay() {
		return this.$$.ctx[3];
	}

	set showDelay(showDelay) {
		this.$$set({ showDelay });
		flush();
	}

	
  /** Method to open the tooltip separate from hovering or clicking the parent element. */
 get open(): Components.SeTooltip["open"] {
		return this.$$.ctx[6];
	}

	
  /** Method to close the tooltip separate from hovering or clicking the parent element. */
 get close(): Components.SeTooltip["close"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSeTooltipElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SeTooltip;