/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeAccessibilityToggleProps {
  
  /** Defines the state of the toggle.
`false` by default. */
  selected?: Components.SeAccessibilityToggle["selected"]
  
  /** Defines the text when the Accessibility mode is ON */
  labelModeOn?: Components.SeAccessibilityToggle["labelModeOn"]
  
  /** Defines the text when the Accessibility mode is OFF */
  labelModeOff?: Components.SeAccessibilityToggle["labelModeOff"]
}

interface SeAccessibilityToggleEvents {
  
  /** Passes accessibility toggle state to the parent component on a change of the toggle state */
  didChange: Parameters<JSX.SeAccessibilityToggle["onDidChange"]>[0]
}

interface SeAccessibilityToggleSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_accessibility_toggle;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			se_accessibility_toggle = element("se-accessibility-toggle");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_accessibility_toggle, "selected", /*selected*/ ctx[0]);
			set_custom_element_data(se_accessibility_toggle, "label-mode-on", /*labelModeOn*/ ctx[1]);
			set_custom_element_data(se_accessibility_toggle, "label-mode-off", /*labelModeOff*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, se_accessibility_toggle, anchor);

			if (default_slot) {
				default_slot.m(se_accessibility_toggle, null);
			}

			/*se_accessibility_toggle_binding*/ ctx[8](se_accessibility_toggle);
			current = true;

			if (!mounted) {
				dispose = listen(se_accessibility_toggle, "didChange", /*onEvent*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*selected*/ 1) {
				set_custom_element_data(se_accessibility_toggle, "selected", /*selected*/ ctx[0]);
			}

			if (!current || dirty & /*labelModeOn*/ 2) {
				set_custom_element_data(se_accessibility_toggle, "label-mode-on", /*labelModeOn*/ ctx[1]);
			}

			if (!current || dirty & /*labelModeOff*/ 4) {
				set_custom_element_data(se_accessibility_toggle, "label-mode-off", /*labelModeOff*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_accessibility_toggle);
			if (default_slot) default_slot.d(detaching);
			/*se_accessibility_toggle_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { selected = undefined } = $$props;
	let { labelModeOn = undefined } = $$props;
	let { labelModeOff = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_accessibility_toggle_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
		if ("labelModeOn" in $$props) $$invalidate(1, labelModeOn = $$props.labelModeOn);
		if ("labelModeOff" in $$props) $$invalidate(2, labelModeOff = $$props.labelModeOff);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		selected,
		labelModeOn,
		labelModeOff,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_accessibility_toggle_binding
	];
}

class SeAccessibilityToggle extends SvelteComponent {
  $$prop_def: SeAccessibilityToggleProps;
  $$events_def: SeAccessibilityToggleEvents;
  $$slot_def: SeAccessibilityToggleSlots;

  $on<K extends keyof SeAccessibilityToggleEvents>(type: K, callback: (e: SeAccessibilityToggleEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeAccessibilityToggleProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			selected: 0,
			labelModeOn: 1,
			labelModeOff: 2,
			getWebComponent: 5
		});
	}

	get selected() {
		return this.$$.ctx[0];
	}

	set selected(selected) {
		this.$set({ selected });
		flush();
	}

	get labelModeOn() {
		return this.$$.ctx[1];
	}

	set labelModeOn(labelModeOn) {
		this.$set({ labelModeOn });
		flush();
	}

	get labelModeOff() {
		return this.$$.ctx[2];
	}

	set labelModeOff(labelModeOff) {
		this.$set({ labelModeOff });
		flush();
	}

	get getWebComponent(): HTMLSeAccessibilityToggleElement | undefined {
		return this.$$.ctx[5];
	}
}

export default SeAccessibilityToggle;