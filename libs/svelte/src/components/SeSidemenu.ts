/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeSidemenuProps {
  
  /**  */
  disabled?: Components.SeSidemenu["disabled"]
  
  /** Defines the text displayed in the header of the Sidemenu.
The default value is `Menu`. */
  label?: Components.SeSidemenu["label"]
  
  /**  */
  link?: Components.SeSidemenu["link"]
}

interface SeSidemenuEvents {
  
  /** When the menu is opened, it will trigger a `toggled` event with `event.detail.state` set to `open`.
When the menu is closed, it will trigger a `toggled` event with `event.detail.state` set to `closed`. */
  toggled: Parameters<JSX.SeSidemenu["onToggled"]>[0]
  
  /**  */
  didNavigationClick: Parameters<JSX.SeSidemenu["onDidNavigationClick"]>[0]
}

interface SeSidemenuSlots {
  default: any
}
  
/* generated by Svelte v3.42.6 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_sidemenu;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			se_sidemenu = element("se-sidemenu");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_sidemenu, "disabled", /*disabled*/ ctx[0]);
			set_custom_element_data(se_sidemenu, "label", /*label*/ ctx[1]);
			set_custom_element_data(se_sidemenu, "link", /*link*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, se_sidemenu, anchor);

			if (default_slot) {
				default_slot.m(se_sidemenu, null);
			}

			/*se_sidemenu_binding*/ ctx[9](se_sidemenu);
			current = true;

			if (!mounted) {
				dispose = [
					listen(se_sidemenu, "toggled", /*onEvent*/ ctx[4]),
					listen(se_sidemenu, "didNavigationClick", /*onEvent*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*disabled*/ 1) {
				set_custom_element_data(se_sidemenu, "disabled", /*disabled*/ ctx[0]);
			}

			if (!current || dirty & /*label*/ 2) {
				set_custom_element_data(se_sidemenu, "label", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*link*/ 4) {
				set_custom_element_data(se_sidemenu, "link", /*link*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_sidemenu);
			if (default_slot) default_slot.d(detaching);
			/*se_sidemenu_binding*/ ctx[9](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { disabled = undefined } = $$props;
	let { label = undefined } = $$props;
	let { link = undefined } = $$props;
	const toggle = (...args) => __ref.toggle(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_sidemenu_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('link' in $$props) $$invalidate(2, link = $$props.link);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		disabled,
		label,
		link,
		__ref,
		onEvent,
		toggle,
		getWebComponent,
		$$scope,
		slots,
		se_sidemenu_binding
	];
}

class SeSidemenu extends SvelteComponent {
  $$prop_def: SeSidemenuProps;
  $$events_def: SeSidemenuEvents;
  $$slot_def: SeSidemenuSlots;

  $on<K extends keyof SeSidemenuEvents>(type: K, callback: (e: SeSidemenuEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeSidemenuProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			disabled: 0,
			label: 1,
			link: 2,
			toggle: 5,
			getWebComponent: 6
		});
	}

	get disabled() {
		return this.$$.ctx[0];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get label() {
		return this.$$.ctx[1];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get link() {
		return this.$$.ctx[2];
	}

	set link(link) {
		this.$$set({ link });
		flush();
	}

	
  /** Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.

ex: `document.getElementById("main-sidemenu").toggle("side-about");` */
 get toggle(): Components.SeSidemenu["toggle"] {
		return this.$$.ctx[5];
	}

	get getWebComponent(): HTMLSeSidemenuElement | undefined {
		return this.$$.ctx[6];
	}
}

export default SeSidemenu;