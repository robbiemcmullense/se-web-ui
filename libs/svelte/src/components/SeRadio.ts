/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeRadioProps {
  
  /** Defines the name of the form field to attach the . */
  name?: Components.SeRadio["name"]
  
  /** Defines the value you want to pass to the parent component when the radio button is checked. */
  value?: Components.SeRadio["value"]
  
  /** Defines the label that will display next to the radio button. */
  label?: Components.SeRadio["label"]
  
  /** Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`. */
  required?: Components.SeRadio["required"]
  
  /** Defines the color of the checkbox.
The default setting is `primary`, rendering a green color.
The `secondary` setting renders a blue color. */
  color?: Components.SeRadio["color"]
  
  /** optional property. define the padding around the button
`none` no padding.
`small` 4px padding: default
`medium` 8px padding.
`large` 16px padding. */
  padding?: Components.SeRadio["padding"]
  
  /** Optional property that defines if the checkbox is disabled.  Set to `false` by default. */
  disabled?: Components.SeRadio["disabled"]
  
  /** Determines whether or not the checkbox is checked when you initialize it.
The default setting is `false`.
Checked if set to `true`. */
  selected?: Components.SeRadio["selected"]
  
  /** Sets the position of the label for your checkbox component.
The default setting is `right`. */
  labelPos?: Components.SeRadio["labelPos"]
}

interface SeRadioEvents {
  
  /** Send the checkbox value to the parent component when clicking on the checkbox. */
  didCheck: Parameters<JSX.SeRadio["onDidCheck"]>[0]
}

interface SeRadioSlots {
  default: any
}
  
/* generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_radio;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			se_radio = element("se-radio");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_radio, "name", /*name*/ ctx[1]);
			set_custom_element_data(se_radio, "value", /*value*/ ctx[2]);
			set_custom_element_data(se_radio, "label", /*label*/ ctx[3]);
			set_custom_element_data(se_radio, "required", /*required*/ ctx[4]);
			set_custom_element_data(se_radio, "color", /*color*/ ctx[5]);
			set_custom_element_data(se_radio, "padding", /*padding*/ ctx[6]);
			set_custom_element_data(se_radio, "disabled", /*disabled*/ ctx[7]);
			set_custom_element_data(se_radio, "selected", /*selected*/ ctx[0]);
			set_custom_element_data(se_radio, "label-pos", /*labelPos*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, se_radio, anchor);

			if (default_slot) {
				default_slot.m(se_radio, null);
			}

			/*se_radio_binding*/ ctx[15](se_radio);
			current = true;

			if (!mounted) {
				dispose = listen(se_radio, "didCheck", /*onEvent*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*name*/ 2) {
				set_custom_element_data(se_radio, "name", /*name*/ ctx[1]);
			}

			if (!current || dirty & /*value*/ 4) {
				set_custom_element_data(se_radio, "value", /*value*/ ctx[2]);
			}

			if (!current || dirty & /*label*/ 8) {
				set_custom_element_data(se_radio, "label", /*label*/ ctx[3]);
			}

			if (!current || dirty & /*required*/ 16) {
				set_custom_element_data(se_radio, "required", /*required*/ ctx[4]);
			}

			if (!current || dirty & /*color*/ 32) {
				set_custom_element_data(se_radio, "color", /*color*/ ctx[5]);
			}

			if (!current || dirty & /*padding*/ 64) {
				set_custom_element_data(se_radio, "padding", /*padding*/ ctx[6]);
			}

			if (!current || dirty & /*disabled*/ 128) {
				set_custom_element_data(se_radio, "disabled", /*disabled*/ ctx[7]);
			}

			if (!current || dirty & /*selected*/ 1) {
				set_custom_element_data(se_radio, "selected", /*selected*/ ctx[0]);
			}

			if (!current || dirty & /*labelPos*/ 256) {
				set_custom_element_data(se_radio, "label-pos", /*labelPos*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_radio);
			if (default_slot) default_slot.d(detaching);
			/*se_radio_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	let { label = undefined } = $$props;
	let { required = undefined } = $$props;
	let { color = undefined } = $$props;
	let { padding = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { selected = undefined } = $$props;
	let { labelPos = undefined } = $$props;
	const setRequired = (...args) => __ref.setRequired(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);

		if (e.type === 'didChange') {
			$$invalidate(0, selected = e.detail);
		}
	};

	function se_radio_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('required' in $$props) $$invalidate(4, required = $$props.required);
		if ('color' in $$props) $$invalidate(5, color = $$props.color);
		if ('padding' in $$props) $$invalidate(6, padding = $$props.padding);
		if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
		if ('labelPos' in $$props) $$invalidate(8, labelPos = $$props.labelPos);
		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	return [
		selected,
		name,
		value,
		label,
		required,
		color,
		padding,
		disabled,
		labelPos,
		__ref,
		onEvent,
		setRequired,
		getWebComponent,
		$$scope,
		slots,
		se_radio_binding
	];
}

class SeRadio extends SvelteComponent {
  $$prop_def: SeRadioProps;
  $$events_def: SeRadioEvents;
  $$slot_def: SeRadioSlots;

  $on<K extends keyof SeRadioEvents>(type: K, callback: (e: SeRadioEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeRadioProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			name: 1,
			value: 2,
			label: 3,
			required: 4,
			color: 5,
			padding: 6,
			disabled: 7,
			selected: 0,
			labelPos: 8,
			setRequired: 11,
			getWebComponent: 12
		});
	}

	get name() {
		return this.$$.ctx[1];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}

	get value() {
		return this.$$.ctx[2];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[3];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get required() {
		return this.$$.ctx[4];
	}

	set required(required) {
		this.$$set({ required });
		flush();
	}

	get color() {
		return this.$$.ctx[5];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get padding() {
		return this.$$.ctx[6];
	}

	set padding(padding) {
		this.$$set({ padding });
		flush();
	}

	get disabled() {
		return this.$$.ctx[7];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get selected() {
		return this.$$.ctx[0];
	}

	set selected(selected) {
		this.$$set({ selected });
		flush();
	}

	get labelPos() {
		return this.$$.ctx[8];
	}

	set labelPos(labelPos) {
		this.$$set({ labelPos });
		flush();
	}

	
  /** Sets the required property on the radio button element. */
 get setRequired(): Components.SeRadio["setRequired"] {
		return this.$$.ctx[11];
	}

	get getWebComponent(): HTMLSeRadioElement | undefined {
		return this.$$.ctx[12];
	}
}

export default SeRadio;