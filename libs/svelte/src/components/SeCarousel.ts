/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeCarouselProps {
  
  /** minimum width of the carousel item. The number of item displayed will be based on it. */
  itemMinWidth?: Components.SeCarousel["itemMinWidth"]
  
  /** configures position of arrows. When `arrowsOverlay` is `false` arrows are positioned outside of component bounds */
  arrowsOverlay?: Components.SeCarousel["arrowsOverlay"]
  
  /** Show a hint of the next item if more item to be seen. if 0, then no hint will be displayed. */
  hintWidth?: Components.SeCarousel["hintWidth"]
  
  /** Configures if pagination dots are shown (https://zeroheight.com/6dbc9efe1/p/045938-pagination/b/934eef) */
  pagination?: Components.SeCarousel["pagination"]
}

interface SeCarouselEvents {
  
}

interface SeCarouselSlots {
  default: any
}
  
/* generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_carousel;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			se_carousel = element("se-carousel");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_carousel, "item-min-width", /*itemMinWidth*/ ctx[0]);
			set_custom_element_data(se_carousel, "arrows-overlay", /*arrowsOverlay*/ ctx[1]);
			set_custom_element_data(se_carousel, "hint-width", /*hintWidth*/ ctx[2]);
			set_custom_element_data(se_carousel, "pagination", /*pagination*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, se_carousel, anchor);

			if (default_slot) {
				default_slot.m(se_carousel, null);
			}

			/*se_carousel_binding*/ ctx[8](se_carousel);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*itemMinWidth*/ 1) {
				set_custom_element_data(se_carousel, "item-min-width", /*itemMinWidth*/ ctx[0]);
			}

			if (!current || dirty & /*arrowsOverlay*/ 2) {
				set_custom_element_data(se_carousel, "arrows-overlay", /*arrowsOverlay*/ ctx[1]);
			}

			if (!current || dirty & /*hintWidth*/ 4) {
				set_custom_element_data(se_carousel, "hint-width", /*hintWidth*/ ctx[2]);
			}

			if (!current || dirty & /*pagination*/ 8) {
				set_custom_element_data(se_carousel, "pagination", /*pagination*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_carousel);
			if (default_slot) default_slot.d(detaching);
			/*se_carousel_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { itemMinWidth = undefined } = $$props;
	let { arrowsOverlay = undefined } = $$props;
	let { hintWidth = undefined } = $$props;
	let { pagination = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_carousel_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('itemMinWidth' in $$props) $$invalidate(0, itemMinWidth = $$props.itemMinWidth);
		if ('arrowsOverlay' in $$props) $$invalidate(1, arrowsOverlay = $$props.arrowsOverlay);
		if ('hintWidth' in $$props) $$invalidate(2, hintWidth = $$props.hintWidth);
		if ('pagination' in $$props) $$invalidate(3, pagination = $$props.pagination);
		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		itemMinWidth,
		arrowsOverlay,
		hintWidth,
		pagination,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_carousel_binding
	];
}

class SeCarousel extends SvelteComponent {
  $$prop_def: SeCarouselProps;
  $$events_def: SeCarouselEvents;
  $$slot_def: SeCarouselSlots;

  $on<K extends keyof SeCarouselEvents>(type: K, callback: (e: SeCarouselEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeCarouselProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			itemMinWidth: 0,
			arrowsOverlay: 1,
			hintWidth: 2,
			pagination: 3,
			getWebComponent: 5
		});
	}

	get itemMinWidth() {
		return this.$$.ctx[0];
	}

	set itemMinWidth(itemMinWidth) {
		this.$$set({ itemMinWidth });
		flush();
	}

	get arrowsOverlay() {
		return this.$$.ctx[1];
	}

	set arrowsOverlay(arrowsOverlay) {
		this.$$set({ arrowsOverlay });
		flush();
	}

	get hintWidth() {
		return this.$$.ctx[2];
	}

	set hintWidth(hintWidth) {
		this.$$set({ hintWidth });
		flush();
	}

	get pagination() {
		return this.$$.ctx[3];
	}

	set pagination(pagination) {
		this.$$set({ pagination });
		flush();
	}

	get getWebComponent(): HTMLSeCarouselElement | undefined {
		return this.$$.ctx[5];
	}
}

export default SeCarousel;