/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeBreadcrumbItemProps {
  
  /** Indicates whether or not the breadcrumb item should be show a arrow at the end.  The default setting is `false`. */
  isLast?: Components.SeBreadcrumbItem["isLast"]
  
  /** Indicates the URL you wish to navigate to when clicking on your breadcrumb item. */
  href?: Components.SeBreadcrumbItem["href"]
  
  /** Indicates whether or not the breadcrumb item should be selected.  The default setting is `true`. */
  canSelect?: Components.SeBreadcrumbItem["canSelect"]
  
  /** Indicates the position of an item in a series or sequence of items. */
  position?: Components.SeBreadcrumbItem["position"]
}

interface SeBreadcrumbItemEvents {
  
  /** Event firing when breadcrumbs link is clicked. */
  didNavigate: Parameters<JSX.SeBreadcrumbItem["onDidNavigate"]>[0]
}

interface SeBreadcrumbItemSlots {
  default: any
}
  
/* generated by Svelte v3.44.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_breadcrumb_item;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			se_breadcrumb_item = element("se-breadcrumb-item");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_breadcrumb_item, "is-last", /*isLast*/ ctx[0]);
			set_custom_element_data(se_breadcrumb_item, "href", /*href*/ ctx[1]);
			set_custom_element_data(se_breadcrumb_item, "can-select", /*canSelect*/ ctx[2]);
			set_custom_element_data(se_breadcrumb_item, "position", /*position*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, se_breadcrumb_item, anchor);

			if (default_slot) {
				default_slot.m(se_breadcrumb_item, null);
			}

			/*se_breadcrumb_item_binding*/ ctx[9](se_breadcrumb_item);
			current = true;

			if (!mounted) {
				dispose = listen(se_breadcrumb_item, "didNavigate", /*onEvent*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*isLast*/ 1) {
				set_custom_element_data(se_breadcrumb_item, "is-last", /*isLast*/ ctx[0]);
			}

			if (!current || dirty & /*href*/ 2) {
				set_custom_element_data(se_breadcrumb_item, "href", /*href*/ ctx[1]);
			}

			if (!current || dirty & /*canSelect*/ 4) {
				set_custom_element_data(se_breadcrumb_item, "can-select", /*canSelect*/ ctx[2]);
			}

			if (!current || dirty & /*position*/ 8) {
				set_custom_element_data(se_breadcrumb_item, "position", /*position*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_breadcrumb_item);
			if (default_slot) default_slot.d(detaching);
			/*se_breadcrumb_item_binding*/ ctx[9](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { isLast = undefined } = $$props;
	let { href = undefined } = $$props;
	let { canSelect = undefined } = $$props;
	let { position = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_breadcrumb_item_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('isLast' in $$props) $$invalidate(0, isLast = $$props.isLast);
		if ('href' in $$props) $$invalidate(1, href = $$props.href);
		if ('canSelect' in $$props) $$invalidate(2, canSelect = $$props.canSelect);
		if ('position' in $$props) $$invalidate(3, position = $$props.position);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		isLast,
		href,
		canSelect,
		position,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		se_breadcrumb_item_binding
	];
}

class SeBreadcrumbItem extends SvelteComponent {
  $$prop_def: SeBreadcrumbItemProps;
  $$events_def: SeBreadcrumbItemEvents;
  $$slot_def: SeBreadcrumbItemSlots;

  $on<K extends keyof SeBreadcrumbItemEvents>(type: K, callback: (e: SeBreadcrumbItemEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeBreadcrumbItemProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			isLast: 0,
			href: 1,
			canSelect: 2,
			position: 3,
			getWebComponent: 6
		});
	}

	get isLast() {
		return this.$$.ctx[0];
	}

	set isLast(isLast) {
		this.$$set({ isLast });
		flush();
	}

	get href() {
		return this.$$.ctx[1];
	}

	set href(href) {
		this.$$set({ href });
		flush();
	}

	get canSelect() {
		return this.$$.ctx[2];
	}

	set canSelect(canSelect) {
		this.$$set({ canSelect });
		flush();
	}

	get position() {
		return this.$$.ctx[3];
	}

	set position(position) {
		this.$$set({ position });
		flush();
	}

	get getWebComponent(): HTMLSeBreadcrumbItemElement | undefined {
		return this.$$.ctx[6];
	}
}

export default SeBreadcrumbItem;