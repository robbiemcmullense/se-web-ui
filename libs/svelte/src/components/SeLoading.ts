/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeLoadingProps {
  
  /** Displays the loading icon on screen when set to `true`. */
  loading?: Components.SeLoading["loading"]
  
  /** Defines the visual display of the loader.
`standard` is the default option, and displays a spinning green circle.
`dialog` gives the loading icon a look-and-feel that it is within a popup dialog box. */
  option?: Components.SeLoading["option"]
  
  /** Defines the color of the loading spinner. */
  color?: Components.SeLoading["color"]
  
  /** Defines ig there is a dimming overlay effect on behind the loading spinner. */
  overlay?: Components.SeLoading["overlay"]
  
  /** Defines if we want the loading to take the full page of the browser. default the browser will stay in the container. */
  fullPage?: Components.SeLoading["fullPage"]
}

interface SeLoadingEvents {
  
}

interface SeLoadingSlots {
  default: any
}
  
/* generated by Svelte v3.44.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let se_loading;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			se_loading = element("se-loading");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_loading, "loading", /*loading*/ ctx[0]);
			set_custom_element_data(se_loading, "option", /*option*/ ctx[1]);
			set_custom_element_data(se_loading, "color", /*color*/ ctx[2]);
			set_custom_element_data(se_loading, "overlay", /*overlay*/ ctx[3]);
			set_custom_element_data(se_loading, "full-page", /*fullPage*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_loading, anchor);

			if (default_slot) {
				default_slot.m(se_loading, null);
			}

			/*se_loading_binding*/ ctx[9](se_loading);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*loading*/ 1) {
				set_custom_element_data(se_loading, "loading", /*loading*/ ctx[0]);
			}

			if (!current || dirty & /*option*/ 2) {
				set_custom_element_data(se_loading, "option", /*option*/ ctx[1]);
			}

			if (!current || dirty & /*color*/ 4) {
				set_custom_element_data(se_loading, "color", /*color*/ ctx[2]);
			}

			if (!current || dirty & /*overlay*/ 8) {
				set_custom_element_data(se_loading, "overlay", /*overlay*/ ctx[3]);
			}

			if (!current || dirty & /*fullPage*/ 16) {
				set_custom_element_data(se_loading, "full-page", /*fullPage*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_loading);
			if (default_slot) default_slot.d(detaching);
			/*se_loading_binding*/ ctx[9](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { loading = undefined } = $$props;
	let { option = undefined } = $$props;
	let { color = undefined } = $$props;
	let { overlay = undefined } = $$props;
	let { fullPage = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_loading_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
		if ('option' in $$props) $$invalidate(1, option = $$props.option);
		if ('color' in $$props) $$invalidate(2, color = $$props.color);
		if ('overlay' in $$props) $$invalidate(3, overlay = $$props.overlay);
		if ('fullPage' in $$props) $$invalidate(4, fullPage = $$props.fullPage);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		loading,
		option,
		color,
		overlay,
		fullPage,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_loading_binding
	];
}

class SeLoading extends SvelteComponent {
  $$prop_def: SeLoadingProps;
  $$events_def: SeLoadingEvents;
  $$slot_def: SeLoadingSlots;

  $on<K extends keyof SeLoadingEvents>(type: K, callback: (e: SeLoadingEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeLoadingProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			loading: 0,
			option: 1,
			color: 2,
			overlay: 3,
			fullPage: 4,
			getWebComponent: 6
		});
	}

	get loading() {
		return this.$$.ctx[0];
	}

	set loading(loading) {
		this.$$set({ loading });
		flush();
	}

	get option() {
		return this.$$.ctx[1];
	}

	set option(option) {
		this.$$set({ option });
		flush();
	}

	get color() {
		return this.$$.ctx[2];
	}

	set color(color) {
		this.$$set({ color });
		flush();
	}

	get overlay() {
		return this.$$.ctx[3];
	}

	set overlay(overlay) {
		this.$$set({ overlay });
		flush();
	}

	get fullPage() {
		return this.$$.ctx[4];
	}

	set fullPage(fullPage) {
		this.$$set({ fullPage });
		flush();
	}

	get getWebComponent(): HTMLSeLoadingElement | undefined {
		return this.$$.ctx[6];
	}
}

export default SeLoading;