/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeLinkProps {
  
  /** Defines the url the user should get redirected to when clicking on the link. */
  url?: Components.SeLink["url"]
  
  /** Determines whether or not the link is disabled. */
  disabled?: Components.SeLink["disabled"]
  
  /** Determines whether it's a download link or a url. */
  download?: Components.SeLink["download"]
  
  /** Adds visual and function properties to your link component.
The default setting is `internal`, which redirects you to the specified URL in the same page.
The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab. */
  option?: Components.SeLink["option"]
  
  /** Sets :hover and :visited states the same color as main */
  unicolor?: Components.SeLink["unicolor"]
}

interface SeLinkEvents {
  
}

interface SeLinkSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_link;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			se_link = element("se-link");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_link, "url", /*url*/ ctx[0]);
			set_custom_element_data(se_link, "disabled", /*disabled*/ ctx[1]);
			set_custom_element_data(se_link, "download", /*download*/ ctx[2]);
			set_custom_element_data(se_link, "option", /*option*/ ctx[3]);
			set_custom_element_data(se_link, "unicolor", /*unicolor*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_link, anchor);

			if (default_slot) {
				default_slot.m(se_link, null);
			}

			/*se_link_binding*/ ctx[9](se_link);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*url*/ 1) {
				set_custom_element_data(se_link, "url", /*url*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 2) {
				set_custom_element_data(se_link, "disabled", /*disabled*/ ctx[1]);
			}

			if (!current || dirty & /*download*/ 4) {
				set_custom_element_data(se_link, "download", /*download*/ ctx[2]);
			}

			if (!current || dirty & /*option*/ 8) {
				set_custom_element_data(se_link, "option", /*option*/ ctx[3]);
			}

			if (!current || dirty & /*unicolor*/ 16) {
				set_custom_element_data(se_link, "unicolor", /*unicolor*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_link);
			if (default_slot) default_slot.d(detaching);
			/*se_link_binding*/ ctx[9](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { url = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { download = undefined } = $$props;
	let { option = undefined } = $$props;
	let { unicolor = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_link_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ("download" in $$props) $$invalidate(2, download = $$props.download);
		if ("option" in $$props) $$invalidate(3, option = $$props.option);
		if ("unicolor" in $$props) $$invalidate(4, unicolor = $$props.unicolor);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		url,
		disabled,
		download,
		option,
		unicolor,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_link_binding
	];
}

class SeLink extends SvelteComponent {
  $$prop_def: SeLinkProps;
  $$events_def: SeLinkEvents;
  $$slot_def: SeLinkSlots;

  $on<K extends keyof SeLinkEvents>(type: K, callback: (e: SeLinkEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeLinkProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			url: 0,
			disabled: 1,
			download: 2,
			option: 3,
			unicolor: 4,
			getWebComponent: 6
		});
	}

	get url() {
		return this.$$.ctx[0];
	}

	set url(url) {
		this.$set({ url });
		flush();
	}

	get disabled() {
		return this.$$.ctx[1];
	}

	set disabled(disabled) {
		this.$set({ disabled });
		flush();
	}

	get download() {
		return this.$$.ctx[2];
	}

	set download(download) {
		this.$set({ download });
		flush();
	}

	get option() {
		return this.$$.ctx[3];
	}

	set option(option) {
		this.$set({ option });
		flush();
	}

	get unicolor() {
		return this.$$.ctx[4];
	}

	set unicolor(unicolor) {
		this.$set({ unicolor });
		flush();
	}

	get getWebComponent(): HTMLSeLinkElement | undefined {
		return this.$$.ctx[6];
	}
}

export default SeLink;