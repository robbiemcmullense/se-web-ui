/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeSliderProps {
  
  /** Indicates the initial value of your slider component when it loads.
The default value is `0`. */
  value?: Components.SeSlider["value"]
  
  /** Indicates the minimum value of your slider.
The default value is `0`. */
  min?: Components.SeSlider["min"]
  
  /** Indicates the maximum value of your slider.
The default value is `100`. */
  max?: Components.SeSlider["max"]
  
  /** The label of the slider that will be attached to the input. */
  label?: Components.SeSlider["label"]
  
  /** Indicates if your slider is disabled.
The default setting is `false`. */
  disabled?: Components.SeSlider["disabled"]
}

interface SeSliderEvents {
  
  /** Event emitted when the slider has been changed. */
  didChange: Parameters<JSX.SeSlider["onDidChange"]>[0]
}

interface SeSliderSlots {
  default: any
}
  
/* generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_slider;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			se_slider = element("se-slider");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_slider, "value", /*value*/ ctx[0]);
			set_custom_element_data(se_slider, "min", /*min*/ ctx[1]);
			set_custom_element_data(se_slider, "max", /*max*/ ctx[2]);
			set_custom_element_data(se_slider, "label", /*label*/ ctx[3]);
			set_custom_element_data(se_slider, "disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, se_slider, anchor);

			if (default_slot) {
				default_slot.m(se_slider, null);
			}

			/*se_slider_binding*/ ctx[11](se_slider);
			current = true;

			if (!mounted) {
				dispose = listen(se_slider, "didChange", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*value*/ 1) {
				set_custom_element_data(se_slider, "value", /*value*/ ctx[0]);
			}

			if (!current || dirty & /*min*/ 2) {
				set_custom_element_data(se_slider, "min", /*min*/ ctx[1]);
			}

			if (!current || dirty & /*max*/ 4) {
				set_custom_element_data(se_slider, "max", /*max*/ ctx[2]);
			}

			if (!current || dirty & /*label*/ 8) {
				set_custom_element_data(se_slider, "label", /*label*/ ctx[3]);
			}

			if (!current || dirty & /*disabled*/ 16) {
				set_custom_element_data(se_slider, "disabled", /*disabled*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_slider);
			if (default_slot) default_slot.d(detaching);
			/*se_slider_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { value = undefined } = $$props;
	let { min = undefined } = $$props;
	let { max = undefined } = $$props;
	let { label = undefined } = $$props;
	let { disabled = undefined } = $$props;
	const setDisabled = (...args) => __ref.setDisabled(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);

		if (e.type === "didChange") {
			$$invalidate(0, value = e.detail);
		}
	};

	function se_slider_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("min" in $$props) $$invalidate(1, min = $$props.min);
		if ("max" in $$props) $$invalidate(2, max = $$props.max);
		if ("label" in $$props) $$invalidate(3, label = $$props.label);
		if ("disabled" in $$props) $$invalidate(4, disabled = $$props.disabled);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		value,
		min,
		max,
		label,
		disabled,
		__ref,
		onEvent,
		setDisabled,
		getWebComponent,
		$$scope,
		slots,
		se_slider_binding
	];
}

class SeSlider extends SvelteComponent {
  $$prop_def: SeSliderProps;
  $$events_def: SeSliderEvents;
  $$slot_def: SeSliderSlots;

  $on<K extends keyof SeSliderEvents>(type: K, callback: (e: SeSliderEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeSliderProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			value: 0,
			min: 1,
			max: 2,
			label: 3,
			disabled: 4,
			setDisabled: 7,
			getWebComponent: 8
		});
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$set({ value });
		flush();
	}

	get min() {
		return this.$$.ctx[1];
	}

	set min(min) {
		this.$set({ min });
		flush();
	}

	get max() {
		return this.$$.ctx[2];
	}

	set max(max) {
		this.$set({ max });
		flush();
	}

	get label() {
		return this.$$.ctx[3];
	}

	set label(label) {
		this.$set({ label });
		flush();
	}

	get disabled() {
		return this.$$.ctx[4];
	}

	set disabled(disabled) {
		this.$set({ disabled });
		flush();
	}

	
  /** Sets the disabled property for slider component. */
 get setDisabled(): Components.SeSlider["setDisabled"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSeSliderElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SeSlider;