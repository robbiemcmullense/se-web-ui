/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@se/web-ui';


interface SeBlockFooterProps {
  
  /** Defines whether or not a divider will be applied to the se-block-footer.
The se-block component's divider property will be applied to the se-block-footer component. */
  divider?: Components.SeBlockFooter["divider"]
  
  /** Defines the visual appearance of a footer.
Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the footer with respect to the card design. */
  option?: Components.SeBlockFooter["option"]
  
  /** Defines the direction of the flex element.
Default setting is `row`. This is perfect to use with flex content.
`column` is useful in specific cases. Make sure you know what you are doing. */
  direction?: Components.SeBlockFooter["direction"]
}

interface SeBlockFooterEvents {
  
}

interface SeBlockFooterSlots {
  default: any
}
  
/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let se_block_footer;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			se_block_footer = element("se-block-footer");
			if (default_slot) default_slot.c();
			set_custom_element_data(se_block_footer, "divider", /*divider*/ ctx[0]);
			set_custom_element_data(se_block_footer, "option", /*option*/ ctx[1]);
			set_custom_element_data(se_block_footer, "direction", /*direction*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, se_block_footer, anchor);

			if (default_slot) {
				default_slot.m(se_block_footer, null);
			}

			/*se_block_footer_binding*/ ctx[7](se_block_footer);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], !current ? -1 : dirty, null, null);
				}
			}

			if (!current || dirty & /*divider*/ 1) {
				set_custom_element_data(se_block_footer, "divider", /*divider*/ ctx[0]);
			}

			if (!current || dirty & /*option*/ 2) {
				set_custom_element_data(se_block_footer, "option", /*option*/ ctx[1]);
			}

			if (!current || dirty & /*direction*/ 4) {
				set_custom_element_data(se_block_footer, "direction", /*direction*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(se_block_footer);
			if (default_slot) default_slot.d(detaching);
			/*se_block_footer_binding*/ ctx[7](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { divider = undefined } = $$props;
	let { option = undefined } = $$props;
	let { direction = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function se_block_footer_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("divider" in $$props) $$invalidate(0, divider = $$props.divider);
		if ("option" in $$props) $$invalidate(1, option = $$props.option);
		if ("direction" in $$props) $$invalidate(2, direction = $$props.direction);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		divider,
		option,
		direction,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		se_block_footer_binding
	];
}

class SeBlockFooter extends SvelteComponent {
  $$prop_def: SeBlockFooterProps;
  $$events_def: SeBlockFooterEvents;
  $$slot_def: SeBlockFooterSlots;

  $on<K extends keyof SeBlockFooterEvents>(type: K, callback: (e: SeBlockFooterEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SeBlockFooterProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			divider: 0,
			option: 1,
			direction: 2,
			getWebComponent: 4
		});
	}

	get divider() {
		return this.$$.ctx[0];
	}

	set divider(divider) {
		this.$set({ divider });
		flush();
	}

	get option() {
		return this.$$.ctx[1];
	}

	set option(option) {
		this.$set({ option });
		flush();
	}

	get direction() {
		return this.$$.ctx[2];
	}

	set direction(direction) {
		this.$set({ direction });
		flush();
	}

	get getWebComponent(): HTMLSeBlockFooterElement | undefined {
		return this.$$.ctx[4];
	}
}

export default SeBlockFooter;