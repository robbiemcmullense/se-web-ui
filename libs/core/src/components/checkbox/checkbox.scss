@import "../../theme/se-variable";
@import "../../theme/mixin";
@import "../../theme/theme";

$root-paddings: (
  small: $spacing-small,
  medium: $spacing,
  large: $spacing-large,
);

$checkbox-sizes: (
  small: 16px,
  medium: 16px,
  large: 20px,
);

$checkbox-font-sizes: (
  small: 14px,
  medium: 16px,
  large: 16px,
);

$checkbox-colors: "primary", "secondary", "success";

:host {
  display: inline-flex;
  align-items: center;
}

input {
  @include visually-hidden();
}

@each $p-name, $p-value in $root-paddings {
  .p-#{$p-name} {
    padding: $p-value;
  }
}

.required {
  @include color("error");
  padding-left: 3px;
}

.label-wrap {
  // font-weight: 400;

  .label-left & {
    margin-right: $spacing + $spacing-small;
  }

  .label-right & {
    margin-left: $spacing + $spacing-small;
  }

  @each $size-name, $size in $checkbox-font-sizes {
    .size-#{$size-name} & {
      font-size: $size;
      line-height: map-get($checkbox-sizes, $size-name);
    }
  }

  .size-small & {
    padding-top: 1px;
    margin-bottom: -1px;
  }
}

.label-suffix {
  opacity: 0.6;
}

.label-right {
  flex-flow: row-reverse;
}

.wrapper {
  display: flex;
  align-items: center;
  cursor: pointer;
  &.disabled {
    cursor: default;
  }

  &:not(.opt-checkbox),
  &:not(.opt-checkbox-fake) {
    .button.disabled {
      opacity: 0.5;
    }
  }
}

.button {
  cursor: pointer;
  &:focus {
    @include interactive-element-outline(2px, 1px);
  }
  &.disabled {
    cursor: default;
  }
}

.opt-checkbox,
.opt-checkbox-fake {
  @include align-items(flex-start);
  position: relative;

  .container {
    line-height: 0;
  }

  .checkmark {
    position: relative;
    @include background-color("background-alternative");
    border: 1px solid;
    @include border-color("border");
    border-radius: 2px;
    transition: 0.2s;
    box-sizing: border-box;
    flex: 0 0 auto;

    &.checked,
    &.indeterminate {
      border: 0;

      @each $color in $checkbox-colors {
        &.color-#{$color} {
          @include background-color($color);
        }
      }
    }

    &::after {
      content: "";
      @include absolute(50%, auto, auto, 50%);
      transform: translate(-50%, -50%);
    }

    &.checked::after {
      width: 16px;
      height: 12px;
      background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 12'%3E%3Cpath fill='%23FFF' d='M14 0l-1 1-8 7-2-2H0v2l4 4h2l1-1 8-8 1-1-1-2h-1z'/%3E%3C/svg%3E");
    }

    &.indeterminate::after {
      width: 12px;
      height: 4px;
      background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 4'%3E%3Crect width='12' height='4' x='0' y='0' fill='%23FFF' rx='2'/%3E%3C/svg%3E");
    }
  }

  &.size-small .checkmark,
  &.size-medium .checkmark {
    &.checked,
    &.indeterminate {
      &::after {
        transform: translate(-50%, -50%) scale(0.8);
      }
    }
  }

  &.disabled {
    .checkmark {
      @include border-color("disabled");

      &.checked,
      &.indeterminate {
        border: 0;
        background-color: $se-ultra-light-grey-1;
      }

      &.checked::after {
        background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 12'%3E%3Cpath fill='%239FA0A4' d='M14 0l-1 1-8 7-2-2H0v2l4 4h2l1-1 8-8 1-1-1-2h-1z'/%3E%3C/svg%3E");
      }

      &.indeterminate::after {
        background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 4'%3E%3Crect width='12' height='4' x='0' y='0' fill='%239FA0A4' rx='2'/%3E%3C/svg%3E");
      }
    }

    .label-wrap {
      @include color("disabled");
    }
  }

  @each $size-name, $size in $checkbox-sizes {
    &.size-#{$size-name} .checkmark {
      width: $size;
      height: $size;
    }
  }
}

.opt-checkbox {
  @each $size-name, $size in $checkbox-sizes {
    &.size-#{$size-name}:hover .checkmark:not(.checked):not(.indeterminate),
    &.size-#{$size-name} .checkmark:not(.checked):not(.indeterminate):focus {
      &::after {
        width: ($size / 2) - 2;
        height: ($size / 2) - 2;
      }
    }

    &.size-#{$size-name}:active .checkmark:not(.checked):not(.indeterminate) {
      &::after {
        width: ($size / 2) - 3;
        height: ($size / 2) - 3;
      }
    }
  }

  @each $color in $checkbox-colors {
    &:not(.disabled):hover .checkmark.color-#{$color},
    &:not(.disabled) .checkmark.color-#{$color}:focus {
      &.checked,
      &.indeterminate {
        background-image: linear-gradient(
          lighten(map-get($seTheme, $color), 5%),
          map-get($seTheme, $color)
        );
      }
    }

    &:not(.disabled):hover:active .checkmark.color-#{$color} {
      &.checked,
      &.indeterminate {
        background-color: darken(map-get($seTheme, $color), 23);
      }
    }

    &:hover .checkmark.color-#{$color}:not(.checked):not(.indeterminate)::after,
    &:active
      .checkmark.color-#{$color}:not(.checked):not(.indeterminate)::after,
    &
      .checkmark.color-#{$color}:not(.checked):not(.indeterminate):focus::after {
      background-color: rgba(map-get($seTheme, $color), 0.5);
    }
  }

  &:not(.disabled):hover:active .checkmark {
    &.checked,
    &.indeterminate {
      background-image: none;
    }
  }
}

.opt-switch {
  .container {
    width: 44px;
    height: 26px;
    display: inline-block;
    position: relative;
  }

  .checkmark {
    display: block;
    padding: 0;
    // outline: none;
    width: 100%;
    height: 100%;
    border-radius: 100%;
    &:before,
    &:after {
      top: 0;
      left: 0;
      content: "";
      position: absolute;
    }
    &:before {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      border: 1px solid;
      @include border-color("border");
      @include background-color("background-alternative");
      border-radius: 13px;
      transition: all 0.2s ease-out 0.1s;
      transform: scale(1);
    }
    &:after {
      top: 50%;
      left: 1px;
      z-index: 3;
      transition: transform 0.1s linear;
      width: 24px;
      height: 24px;
      transform: translate3d(0, -50%, 0);
      background-color: #fff;
      border-radius: 100%;
      box-shadow: 1px 1px 4px 0 rgba(0, 0, 0, 0.3);
    }
    &.checked {
      &:before {
        @include background-color("success");
        @include border-color("success");
      }
      &:after {
        transform: translate3d(75%, -50%, 0);
      }
    }
    &.disabled {
      &:before {
        opacity: 0.5;
      }
    }
    &:focus {
      outline-offset: -1px;
    }
  }
}

.opt-onoff {
  .on-off-wrapper {
    display: inline-flex;
    border: 1px solid;
    @include border-color("border");
    border-radius: 3px;
  }
  .button {
    @include color("background-alternative-contrast");
    @include background-color("background-alternative");
    padding: 6px 8px;
    border: none;
    height: 32px;
    font-size: 14px;
    font-family: inherit;
    line-height: 13px;
    font-weight: 300;
    transition: 0.2s;

    &.active {
      border-top-left-radius: 2px;
      border-bottom-left-radius: 2px;
      &.selected {
        @include color("success-contrast");
        @include background-color("success");
      }
    }

    &.inactive {
      border-top-right-radius: 2px;
      border-bottom-right-radius: 2px;
      &.selected {
        @include color("error-contrast");
        @include background-color("error");
      }
    }
    &:focus {
      outline-offset: -1px;
    }
  }

  &.header {
    .button {
      height: 24px;
      font-size: 12px;
    }
  }
}
