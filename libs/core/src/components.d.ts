/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Option, Size } from "./components/checkbox/types";
import { FilterEmittedState, FiltrationSmartData, FiltrationSmartDataAttrsData, ToggleMobileViewVisibility } from "./components/filtration-smart/types";
import { ListOption } from "./components/list/types";
import { GroupCollapseEvent } from "./components/list-group/list-group";
import { PageEvent } from "./components/pagination/pagination";
import { TColor } from "./components/tabbar/tabbar";
export namespace Components {
    interface SeAbout {
        /**
          * The title of your about screen.
         */
        "appTitle": string;
        /**
          * The copyright you would like to display.
         */
        "copyright": string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain": string;
        /**
          * Sets the background image for your about page.
         */
        "imageUrl": string;
        /**
          * The version number you want to display.
         */
        "version": string;
    }
    interface SeAccessibilityToggle {
        /**
          * Defines the text when the Accessibility mode is OFF
         */
        "labelModeOff": string;
        /**
          * Defines the text when the Accessibility mode is ON
         */
        "labelModeOn": string;
        /**
          * Defines the state of the toggle. `false` by default.
         */
        "selected": boolean;
    }
    interface SeApp {
        /**
          * Define the type of application. updating the option will impact the font used. - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`. - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        "option": 'technical' | 'website' | 'dcx';
        /**
          * Define if the content of the page should scroll with the header (useful on website context). The header can then have the style sticky to stay in the top of the page if needed.
         */
        "pageScroll": boolean;
        /**
          * Define the them of application. Update the `--se-` css variables of the application. - `light`: light mode of the design. - `dark`: dark mode of the application. - `auto`: Will match the OS configuration
         */
        "theme": 'light' | 'dark' | 'auto';
    }
    interface SeAuthentication {
        /**
          * The title of your authentication screen.
         */
        "appTitle": string;
        /**
          * The copyright you would like to display.
         */
        "copyright": string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain": string;
        /**
          * If set to `true`, this will hide the authentication screen.
         */
        "hide": boolean;
        /**
          * Sets the background image for your authentication screen.
         */
        "imageUrl": string;
        /**
          * The version number you want to display.
         */
        "version": string;
    }
    interface SeBanner {
        /**
          * Set the duration (in ms) that the banner will automatically switch slides. Default is `6000`.
         */
        "duration": number;
    }
    interface SeBannerItem {
        /**
          * Indicates the active banner item in your banner component.
         */
        "active": boolean;
        /**
          * Sets the background image for your banner item.
         */
        "imageUrl": string;
    }
    interface SeBlock {
        /**
          * Defines the se-block item's ability to appear clickable / selectable. Default setting is `false`, resulting in no hover effects on the block level. `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        "clickable": boolean;
        /**
          * Defines clickable se-block item's bar on hover. Default setting is `false`. `true` renders a `$se-life-green` colored bar on a hover.
         */
        "clickableBar": boolean;
        /**
          * Optional property that defines the background color of the block. Default setting is `alternative`, rendering the "alternative" theme background. `none` has no background. `standard` renders the "standard" theme background.
         */
        "color": 'none' | 'standard' | 'alternative';
        /**
          * Defines the se-block corner radius. Default setting is `small`, rendering a rounded, 4px rounded corner. `none` is for a sharp, 90 degree corner. `nano` is for a slightly rounded, 2px rounded corner.
         */
        "corner": 'none' | 'nano' | 'small';
        /**
          * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
         */
        "display": 'flex' | 'block' | 'grid';
        /**
          * Defines whether or not a divider will be applied to the se-block header and footer. `true` will add a divider to the se-block-header and se-block-footer, if they are present. `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        "divider": boolean;
        /**
          * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item. Default setting is `false`, spanning 1 row and 1 column (1/1). `true` spans 2 rows and 2 columns (2/2). `vertical` spans 2 rows (2/1). `horizontal` spans 2 columns (1/2).
         */
        "enlarged": 'vertical' | 'horizontal' | boolean;
        /**
          * Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "height": string;
        /**
          * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        "loading": boolean;
        /**
          * Defines the spacing around the outside edge of a block. Default `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "margin": 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Defines the visual appearance of a block. Default setting is `basic`, which will remove any spacing. `widget` will create a flat widget look and feel with a `medium` margin around it. `card` will create a card look and feel with rounded corners, and with a `large` margin around it. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        "option": 'basic' | 'card' | 'card-old' | 'widget' | 'fill';
        /**
          * Defines the se-block outline. Default setting is `false`. Setting this property to `true` will add a 1px border.
         */
        "outline": boolean;
        /**
          * Defines the se-block outline color. Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color. `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected. `secondary` defines the outline color as `$se-sky-blue`.
         */
        "outlineColor": 'standard' | 'secondary' | 'primary';
        /**
          * Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "width": string;
    }
    interface SeBlockContent {
        /**
          * Defines maximum height of the component. If set, scroll will be applied to the block if its height exceeds `maxHeight`. Also, its top and bottom parts will be covered by semi-transparent overlays.
         */
        "maxHeight": number | string;
        /**
          * The block-content component will add 8px padding on the top and bottom, and 16px padding on the left and right by default. When the option is set to `fill`, the content will fill the whole space of the block-content with no padding.
         */
        "option": 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBlockFooter {
        /**
          * Defines the direction of the flex element. Default setting is `row`. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction": 'row' | 'column';
        /**
          * Defines whether or not a divider will be applied to the se-block-footer. The se-block component's divider property will be applied to the se-block-footer component.
         */
        "divider": boolean;
        /**
          * Defines the visual appearance of a footer. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the footer with respect to the card design.
         */
        "option": 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBlockHeader {
        /**
          * Defines whether or not a divider will be applied to the se-block-header. The se-block component's divider property will be applied to the se-block-header component.
         */
        "divider": boolean;
        /**
          * Defines the visual appearance of a header. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the header with respect to the card design. `fill` removes all spacing, for example with use of the `se-tabbar` option `content`.
         */
        "option": 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBreadcrumb {
        /**
          * Provides a label that describes the type of navigation for assistive technologies. The default value is `breadcrumb`.
         */
        "ariaLabel": string;
        /**
          * Setting allowing to transform breadcrumb into a backlink on screen sizes smaller than specified.
         */
        "breakpoint": 'tablet' | 'desktop' | 'wide-desktop';
        /**
          * Indicates whether or not the last breadcrumb item should be selectable. The default setting is `false`.
         */
        "canSelectLast": boolean;
    }
    interface SeBreadcrumbItem {
        /**
          * Indicates whether or not the breadcrumb item should be selected.  The default setting is `true`.
         */
        "canSelect": boolean;
        /**
          * Indicates the URL you wish to navigate to when clicking on your breadcrumb item.
         */
        "href": string;
        /**
          * Indicates whether or not the breadcrumb item should be show a arrow at the end.  The default setting is `false`.
         */
        "isLast": boolean;
        /**
          * Indicates the position of an item in a series or sequence of items.
         */
        "position": string;
    }
    interface SeButton {
        /**
          * Optional property that defines if the button displays as a block in it's container. When set to true, the button will be as wide as its container.
         */
        "block": boolean;
        /**
          * Optional property that defines if the button has a caption or tooltip text.
         */
        "caption": string;
        /**
          * Defines the background color of the button. The default setting is `standard`.
         */
        "color": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Optional property that determines if your button includes an icon.
         */
        "icon": string;
        /**
          * Optional property to change the color of the icon when needed. For example, the user dropdown in the header component.
         */
        "iconColor": 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Property to specify if the button should only display an icon (no extra spacing).
         */
        "iconOnly": boolean;
        /**
          * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. **deprecated** `raised` adds a box shadow to the button. `outline` adds a border to the button. **deprecated** `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application. `text` removes background in default state
         */
        "option": 'flat'
    | 'raised'
    | 'outline'
    | 'text'
    | string;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding": 'none' | 'small' | 'medium' | 'large';
        /**
          * Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component.
         */
        "selected": boolean;
        /**
          * Sets the disabled property for your button from the parent component.
          * @param val set to `true` or `false`.
         */
        "setDisabled": (val: boolean) => Promise<void>;
        /**
          * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
         */
        "setGrouped": () => Promise<void>;
        /**
          * Defines the size of the button. `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component. `small` is the default option, with a 14px font and a 32px height. `medium` sets the font to 16px and the height to 40px. `large` sets the font to 18px and the height to 48px.
         */
        "size": 'nano' | 'small' | 'medium' | 'large';
        /**
          * Optional property. `button`	is the default setting, creating a clickable button. `submit`	creates a "submit" button (useful to submit form-data). `reset`	creates a reset button (useful to reset form-data to its initial values).
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
         */
        "value": string;
    }
    interface SeCarousel {
        /**
          * configures position of arrows. When `arrowsOverlay` is `false` arrows are positioned outside of component bounds
         */
        "arrowsOverlay": boolean;
        /**
          * Show a hint of the next item if more item to be seen. if 0, then no hint will be displayed.
         */
        "hintWidth": number;
        /**
          * minimum width of the carousel item. The number of item displayed will be based on it.
         */
        "itemMinWidth": number;
        /**
          * Configures if pagination dots are shown (https://zeroheight.com/6dbc9efe1/p/045938-pagination/b/934eef)
         */
        "pagination": boolean;
    }
    interface SeCarouselItem {
    }
    interface SeCarouselPagination {
        /**
          * Index of active/selected pagination bullet
         */
        "activeIndex": number;
        /**
          * Number of pagination bullets
         */
        "size": number;
    }
    interface SeCheckbox {
        /**
          * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`. The default value is `success`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color": 'primary' | 'secondary' | 'success';
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Reduces the visual height of the checkbox when the option is set to `onoff`. Useful if the on/off checkbox is within a header element.
         */
        "header": boolean;
        /**
          * Optional property that defines if the checkbox is in indeterminate state (only work with option="checkbox").  Set to `false` by default.
         */
        "indeterminate": boolean;
        /**
          * The label of the checkbox that will be attached to the box.
         */
        "label": string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right` when the option is set to `checkbox`. The default setting is `left` when the option is set to `switch`.
         */
        "labelPos": 'left' | 'right';
        /**
          * Sets suffix of the label shown with semi-transparent text just after the label.
         */
        "labelSuffix": string;
        /**
          * Defines the name of the checkbox.
         */
        "name": string;
        /**
          * Defines whether the toggle/switch is interactive or not. Set to `false` by default.
         */
        "noInteractive": boolean;
        /**
          * Determines the visual appearance of the component. `checkbox` is the default option, which will render the component like a standard HTML checkbox. `checkbox-fake` **deprecated (use noInteractive property)** will render the component exactly like `checkbox` but it will not have any interactive elements.    It means it will not be accessible with keyboard, it will not trigger any unwanted events -- totally "dumb" component. `switch` renders the component like a toggle switch. `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        "option": Option;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding": 'none' | 'small' | 'medium' | 'large';
        /**
          * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        "required": boolean;
        /**
          * The "checked" state of the checkbox, `false` by default.
         */
        "selected": boolean;
        /**
          * Sets the required property on the checkbox element.  Used when the checkbox is within a form field.
         */
        "setRequired": () => Promise<void>;
        /**
          * Defines the size of the control. So far it's only supported by checkbox.  There are two options: `s`: 16px `m`: 20px (default)  Also affects the font size of the checkbox text label: `s`: 14px `m`: 16px (default)
         */
        "size": Size;
        /**
          * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        "textOff": string;
        /**
          * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        "textOn": string;
        /**
          * The value you want to pass to the parent component when the checkbox is checked.
         */
        "value": string;
    }
    interface SeChip {
        /**
          * Optional property that defines if the chip displays as a block in it's container. When set to true, the chip will be as wide as its container.
         */
        "block": boolean;
        /**
          * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        "canClose": boolean;
        /**
          * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
         */
        "color": 'standard' | 'alternative';
        /**
          * Indicates whether or not the chip has dashed border. Set to `false` by default.
         */
        "dashed": boolean;
        /**
          * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Indicates whether or not the chip can changed state when hover or clicked on.  Set to `false` by default.
         */
        "readonly": boolean;
        /**
          * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        "selected": boolean;
        /**
          * Defines the size of the chip. `nano` sets the font to 14px and the height to 20px. `small` is the default option, with a 16px font and a 24px height. `medium` is the default option, with a 16px font and a 32px height. `large` is the default option, with a 16px font and a 40px height.
         */
        "size": 'nano' | 'small' | 'medium' | 'large';
        /**
          * The text you want to display in your chip.
         */
        "value": string;
    }
    interface SeContainer {
        /**
          * Defines the background color of the container. `none` has no background. `standard` is `se-background`, light gray. `alternative` is a white background.
         */
        "color": 'none' | 'standard' | 'alternative';
        /**
          * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`.
         */
        "columnSize": string;
        /**
          * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction": 'column' | 'row';
        /**
          * Defines how to display the element. `flex` is the default display. `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        "display": 'flex' | 'block' | 'grid';
        /**
          * Defines the gap between items. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "gap": 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set. `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set. `centered` centers the container so the content does not exceed a maximum width. `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated. `inherited` will insure that no specific style is applied to the container.
         */
        "option": | 'fill'
    | 'widget'
    | 'card'
    | 'card-old'
    | 'centered'
    | 'inherited';
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "padding": 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        "position": 'relative' | 'absolute';
        /**
          * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        "rowSize": string;
    }
    interface SeDialog {
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
          * @deprecated use noBackdrop='true' instead
         */
        "canBackdrop": boolean;
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
          * @deprecated use the configuration directly on se-dialog-header
         */
        "color": 'alternative' | 'primary';
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `false`.
         */
        "noBackdrop": boolean;
        /**
          * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        "open": boolean;
        /**
          * Option to scroll page in browser window if set to `true`.
         */
        "pageScroll": boolean;
        /**
          * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
         */
        "size": 'small' | 'medium' | 'large' | 'xlarge' | 'fill';
    }
    interface SeDialogContent {
        /**
          * Indicates an icon you want to display in your dialog.
         */
        "icon": string;
        /**
          * Indicates what icon color schema you want to render in your dialog.
         */
        "iconColor": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'information';
        /**
          * Indicates if se-dialog-content is the last child of the dialog component.
         */
        "isLastChild": boolean;
        /**
          * Defaulted to a small padding. When set to `fill`, the content will fill the whole space of the dialog. When set to `indent`, the content will alternative margins and paddings.
          * @deprecated use padding instead
         */
        "option": 'fill' | 'indent';
        /**
          * optional property. define the padding around the button `none` no padding. `small` small padding: default `large` large padding.
         */
        "padding": 'none' | 'small' | 'large';
    }
    interface SeDialogFooter {
    }
    interface SeDialogHeader {
        /**
          * Display the close icon to close the dialog. Default setting is `false`.
         */
        "closeIcon": boolean;
        /**
          * Defines the color of the dialog header. `standard`: Standard color schema. `alternative`: Alternative background with standard color for the text. `primary`: Primary color schema. `secondary`: Secondary color schema. `information`: Information color schema. By default, the primary color will be used.
         */
        "color": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'information';
        /**
          * Defaulted to a small padding. When set to `indent`, the header will have an alternative margins and paddings.
          * @deprecated use padding instead
         */
        "option": 'indent';
        /**
          * optional property. define the padding around the button `small` small padding: default `large` large padding.
         */
        "padding": 'small' | 'large';
    }
    interface SeDivider {
        /**
          * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
         */
        "color": 'standard' | 'alternative';
        /**
          * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        "option": 'horizontal' | 'vertical' | 'inset';
    }
    interface SeDropdown {
        /**
          * Define the type of even needed to open the modal. By default it's on click. If `hover` is selected, then the dropdown will close when the mouse goes away as well.
         */
        "action": 'click' | 'hover';
        "alignment": 'end' | 'start' | 'right' | 'left';
        /**
          * By default, when opened, the dropdown will visible to the user even if inside an se-block that scrolls. Use `auto-hide` to automatically hide the dropdown if not visible by the user. For conveniences, this option is automatically set to `true` if the dropdown is inside an `se-table`.
         */
        "autoHide": boolean;
        /**
          * Method to close the dropdown from outside its parent element.
         */
        "close": () => Promise<void>;
        /**
          * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        "maxHeight": string;
        /**
          * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        "maxWidth": string;
        /**
          * Method to open the dropdown from outside its parent element.
         */
        "open": () => Promise<void>;
        /**
          * Defines the preferred vertically align of the dropdown. It will automatically re-position if the there is not enough space. `top`: Position the container with respect to the top side of the trigger element. `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        "verticalAlignment": 'top' | 'bottom';
    }
    interface SeFab {
        /**
          * Indicates the color of your main action button . The Default setting is `primary` color. The `alternative` button can also be used.
         */
        "color": 'primary' | 'alternative';
        /**
          * Property that determines if an icon is included in the main action button.
         */
        "icon": string;
        /**
          * Property that determines the functionality of the FAB. The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB. The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        "option": 'speeddial' | 'backtotop';
        /**
          * Indicates if there is an overlay behind the FAB. Used only if in dial mode.
         */
        "overlay": boolean;
        /**
          * Property that determines the position of the component. The default setting is `bottom`, rendering a FAB at the bottom right corner. The `top` setting renders the FAB at the top right corner.
         */
        "position": 'bottom' | 'top';
        /**
          * Use this method to toggle (show/hide) the mini action buttons.
         */
        "toggleAction": () => Promise<void>;
    }
    interface SeFabItem {
        /**
          * Property that determines if an icon is included in the floating action button.
         */
        "icon": string;
    }
    interface SeFiltration {
        /**
          * Boolean property to indicate if the content will be visible or hidden collapsed = `true` => content is shown collapsed = `false` => content is hidden
         */
        "collapsed": boolean;
        /**
          * text to display in the header
         */
        "item": any;
        /**
          * Text for the placeholder. the default is `enter text`
         */
        "labelHint": string;
        /**
          * Variable to show 'Select all'
         */
        "labelSelectAll": string;
        /**
          * Default text to display for viewing less content
         */
        "labelViewLess": string;
        /**
          * Default value to display for viewing more content
         */
        "labelViewMore": string;
        /**
          * Maximum number of items to be displayed when expanded. Default is `10`
         */
        "maxItems": number;
        /**
          * Minimum number of items to be displayed when collapsed. Default is `5`
         */
        "minItems": number;
        /**
          * The search value in the search field. Mostly used to clear the search box when needed.
         */
        "search": string;
        /**
          * Optional property to show a search box inside the form
         */
        "searchable": boolean;
        /**
          * Boolean property to indicate if there should be a shadow around the box valid values are `true` or `false`
         */
        "shadow": boolean;
        /**
          * Optional property to indicate if multiple selections will be made `true` = multiple selection | `false` = single selection
         */
        "showSelectAll": boolean;
    }
    interface SeFiltrationSmart {
        /**
          * Object that describes set of data attributes of sections and filters.
         */
        "dataAttrsData"?: FiltrationSmartDataAttrsData;
        /**
          * Normalized data for the filter.
         */
        "filters": FiltrationSmartData;
        /**
          * The header label of filters used in desktop version.
         */
        "headerLabelDesktop": string;
        /**
          * The header label of filters used in mobile version.
         */
        "headerLabelMobile": string;
        /**
          * Defines if the mobile view is visible.
         */
        "isMobileViewVisible": boolean;
        /**
          * Defines maximum height of a facet content in desktop view.
         */
        "maxFacetContentHeight": number;
        /**
          * Use it if you want to reset the filter to its initial state. All controls (single- and multi-selects) will be set to its initial states (if on an initial render a checkbox was checked but later was unchecked by a user, it will be returned to checked state). All sections (root and nested) will retain their states (expanded/collapsed).
         */
        "reset": () => Promise<void>;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * Use it if you want to set the state (checked/unchecked) of a particular filter.
         */
        "setIsFilterChecked": (filterId: string, isChecked: boolean) => Promise<void>;
        /**
          * Defines text of the show products button (in mobile view).
         */
        "showProductsLabel": string;
        /**
          * Defines text of the "View less facets" button at the bottom of the filter.
         */
        "viewLessFacetsLabel": string;
        /**
          * Defines text of the "View less refinements" button in a facet.
         */
        "viewLessRefinementsLabel": string;
        /**
          * Defines text of the "View more facets" button at the bottom of the filter.
         */
        "viewMoreFacetsLabel": string;
        /**
          * Defines text of the "View more refinements" button in a facet.
         */
        "viewMoreRefinementsLabel": string;
        /**
          * Number of facets to show on initial render.
         */
        "visibleFacetsCount": number;
        /**
          * Number of refinements per facet to show on initial render.
         */
        "visibleRefinementsPerFacetCount": number;
    }
    interface SeFiltrationSmartCheckbox {
        /**
          * Defines if the checkbox is used in mobile view.
         */
        "isMobile": boolean;
        /**
          * Id of the refinement that will be used to find the data in the Root Filter store.
         */
        "refinementId": string;
    }
    interface SeFiltrationSmartDesktopView {
        /**
          * Defines text that will be used as the header of the Filter.
         */
        "headerLabel": string;
        /**
          * Defines maximum height of a section content.
         */
        "maxFacetContentHeight": number;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * Defines text of the "View less facets" button at the bottom of the filter.
         */
        "viewLessFacetsLabel": string;
        /**
          * Defines text of the "View less refinements" button in a facet.
         */
        "viewLessRefinementsLabel": string;
        /**
          * Defines text of the "View more facets" button at the bottom of the filter.
         */
        "viewMoreFacetsLabel": string;
        /**
          * Defines text of the "View more refinements" button in a facet.
         */
        "viewMoreRefinementsLabel": string;
    }
    interface SeFiltrationSmartFacet {
        /**
          * Facet ID that will be used to retrieve data from store.
         */
        "facetId": string;
        /**
          * Defines if the facet is used in mobile view.
         */
        "isMobile": boolean;
        /**
          * Defines maximum height of the content.
         */
        "maxContentHeight"?: number;
        /**
          * Defines text of the "View less refinements" button.
         */
        "viewLessLabel"?: string;
        /**
          * Defines text of the "View more refinements" button.
         */
        "viewMoreLabel"?: string;
    }
    interface SeFiltrationSmartGroup {
        /**
          * Set mobile view or not
         */
        "isMobile": boolean;
        /**
          * Nesting level of the group. Used to determine if the section should be wrapped in another section.
         */
        "level": number;
        /**
          * Id of the section that will be used to find the data in the Root Filter store.
         */
        "sectionId": string;
    }
    interface SeFiltrationSmartMobileView {
        /**
          * The header label of filters.
         */
        "headerLabel": string;
        /**
          * Defines if the mobile view is visible.
         */
        "isVisible": boolean;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * The text label of the show products button.
         */
        "showProductsLabel": string;
    }
    interface SeFiltrationSmartMobileViewTrigger {
        /**
          * The number of facets in which there are selected refinements.
         */
        "count"?: number;
        /**
          * The text label of the "Show filter" button.
         */
        "label": string;
    }
    interface SeFiltrationSmartResetButton {
        /**
          * Defines if the button should be disabled.
         */
        "disabled": boolean;
        /**
          * Text label of the button.
         */
        "label": string;
    }
    interface SeFiltrationSmartTab {
        /**
          * Id of the filter that will be used to find the data in the Root Filter store.
         */
        "refinementId": string;
    }
    interface SeFiltrationSmartViewMoreFacetsButton {
        /**
          * Defines what number should be rendered in the circle inside the button.
         */
        "count": number;
        /**
          * Defines what label should be used inside the button:  true => "show less"  false => "show more"
         */
        "isAllFacetsVisible": boolean;
        /**
          * Defines text of the "View less" button.
         */
        "viewLessLabel": string;
        /**
          * Defines text of the "View more" button.
         */
        "viewMoreLabel": string;
    }
    interface SeFiltrationSmartViewMoreRefinementsButton {
        /**
          * Defines what number should be rendered in the circle inside the button.
         */
        "count": number;
        "facetId": string;
        /**
          * Defines what label should be used inside the button:  true => "show less"  false => "show more"
         */
        "isAllRefinementsVisible": boolean;
        /**
          * Defines text of the "View less" button.
         */
        "viewLessLabel": string;
        /**
          * Defines text of the "View more" button.
         */
        "viewMoreLabel": string;
    }
    interface SeFormField {
        /**
          * Optional property that defines if the field displays as a block in it's container. When set to true, the field will be as wide as its container. both field label auto adjust when it set to inline
         */
        "block": boolean;
        /**
          * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the text value of the label in your form field.
         */
        "label": string;
        /**
          * Optional property to define how to align the label
         */
        "labelAlign": 'left' | 'right';
        /**
          * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        "labelWidth": string;
        /**
          * Optional property that defines the minumum width after witch the form field will move to stacked mode.
         */
        "minWidth": number;
        /**
          * Optional property that defines if the form-filed should not stack even if the container is small (it won't be responsive).
         */
        "noStacking": boolean;
        /**
          * Defines the layout of your form field. `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
          * @deprecated use `stacked` property instead
         */
        "option": 'inline' | 'stacked';
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px.
         */
        "padding": 'none' | 'small' | 'medium';
        /**
          * Determines if the input is required by the application. Set to `false` by default. Setting this value to `true` will render a red asterisk next to your label.
         */
        "required": boolean;
        /**
          * Defines the layout of your form field. If `true`, the input field will render bellow the label.
         */
        "stacked": boolean;
        /**
          * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
         */
        "status": 'error' | 'warning' | 'success';
        /**
          * Defines if the field is a text, to add a padding and better align with other fields.
         */
        "textOnly": boolean;
        /**
          * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`). `input` is the default type.
         */
        "type": 'input' | 'checkbox' | 'radio' | 'select';
        /**
          * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
         */
        "value": string;
    }
    interface SeHeader {
        /**
          * Sets the title of your application.
         */
        "appTitle": string;
        "disabled": boolean;
        /**
          * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        "domain": string;
        /**
          * to remove the "Schneider electric" logo at the end of the header.
         */
        "hideSeLogo": boolean;
        /**
          * Defines the project name (useful for small projects) that can be used for versioning as well. It will be placed at the right side of the title.
         */
        "project": string;
    }
    interface SeIcon {
        /**
          * Optional property that defines if the icon should animate when changing states (rotation for example).
         */
        "animation": boolean;
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error'
    | 'information';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Optional property that defines the hover background color of the button. This property is ignored if noHover is set, or if the icon option is not set to "button".
         */
        "hoverColor": 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Optional property that defines if the icon should be mirrored.
         */
        "mirror": 'horizontal' | 'vertical' | 'both';
        /**
          * Optional property that disables the hover background (only if option property is set to button). If set, this will override the hoverColor property and ignore it.
         */
        "noHover": boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option": 'button';
        /**
          * Optional property that defines the icon should be rotated.
         */
        "rotate": number | string;
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `micro` sets the size to 18px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size": 'nano' | 'micro' | 'small' | 'medium' | 'large' | 'xlarge';
    }
    interface SeIconEcostruxure {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color": 'standard' | 'inherited';
        /**
          * Sets the size of the EcoStruxure icon.  The default setting is `small`.
         */
        "size": 'small' | 'medium';
    }
    interface SeIconFile {
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error'
    | 'information';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option": 'button';
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size": 'nano' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Text displayed inside the SVG icon. The text cannot be longer than 4 character.
         */
        "value": string;
    }
    interface SeIconLifeison {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color": 'standard' | 'inherited';
    }
    interface SeIconSchneider {
    }
    interface SeLink {
        /**
          * Determines whether or not the link is disabled.
         */
        "disabled": boolean;
        /**
          * Determines whether it's a download link or a url.
         */
        "download": boolean;
        /**
          * Adds visual and function properties to your link component. The default setting is `internal`, which redirects you to the specified URL in the same page. The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab.
         */
        "option": 'internal' | 'external';
        /**
          * Defines the spacing around the link. `none` is 0px `small` is 4px
         */
        "spacing": 'none' | 'small';
        /**
          * Sets :hover and :visited states the same color as main
         */
        "unicolor": boolean;
        /**
          * Defines the url the user should get redirected to when clicking on the link.
         */
        "url": string;
    }
    interface SeList {
        /**
          * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        "canCollapse": boolean;
        /**
          * Defines the style of the list.  The default setting is `classic`.
         */
        "option": ListOption;
        /**
          * Defines if the list element should be selected or not.
         */
        "selectedColor": 'primary' | 'standard';
    }
    interface SeListGroup {
        /**
          * Defines if list groups can be collapsed, true by default.
         */
        "canCollapse": boolean;
        /**
          * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        "collapsed": boolean;
        /**
          * Defines the description of the item, placed under its title.
         */
        "description": string;
        /**
          * Disable the item for any interaction.
         */
        "disabled": boolean;
        /**
          * define the flex behavior of the group
         */
        "flex": number;
        "focusElement": () => Promise<void>;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon": string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor": 'primary' | 'secondary';
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation": number;
        /**
          * Defines the title of the item.
         */
        "item": string;
        /**
          * Defines if the list group should be displayed as selected (if one of its child elements is selected when collapsed).
         */
        "selected": boolean;
        "setOption": (option: ListOption) => Promise<void>;
        "toggleCollapseTreeview": () => Promise<void>;
    }
    interface SeListItem {
        "blurElement": () => Promise<void>;
        /**
          * Defines the description of the item, placed under its title.
         */
        "description": string;
        /**
          * Disable the item for any interaction.
         */
        "disabled": boolean;
        "focusElement": () => Promise<void>;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href": string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon": string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor": | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error';
        /**
          * Defines the title of the item.
         */
        "item": string;
        /**
          * Defines if the list element should be selected or not.
         */
        "selected": boolean;
        "setOption": (option: any) => Promise<void>;
    }
    interface SeLoading {
        /**
          * Defines the color of the loading spinner.
         */
        "color": 'primary' | 'secondary';
        /**
          * Defines if we want the loading to take the full page of the browser. default the browser will stay in the container.
         */
        "fullPage": boolean;
        /**
          * Displays the loading icon on screen when set to `true`.
         */
        "loading": boolean;
        /**
          * Defines the visual display of the loader. `standard` is the default option, and displays a spinning green circle. `dialog` gives the loading icon a look-and-feel that it is within a popup dialog box.
         */
        "option": 'standard' | 'dialog';
        /**
          * Defines ig there is a dimming overlay effect on behind the loading spinner.
         */
        "overlay": boolean;
    }
    interface SePagination {
        /**
          * Hide the "go to first page" and "go to last page" icons.
         */
        "hideEdge": boolean;
        /**
          * Label used when hover the "Go to first page" icon.
         */
        "labelFirst": string;
        /**
          * Label used when hover the "Go to last page" icon.
         */
        "labelLast": string;
        /**
          * Label used when hover the "Go to next page" icon.
         */
        "labelNext": string;
        /**
          * Text before the number of item per page selection dropdown.
         */
        "labelPerPage": string;
        /**
          * Label used when hover the "Go to previous page" icon.
         */
        "labelPrev": string;
        /**
          * Text before the page selection dropdown.
         */
        "labelValue": string;
        /**
          * Number of item per page
         */
        "perPage": number;
        /**
          * List of per page options to select from as a string separated by `;`. Default is `"15"` but does not affect the component if not used. ex: `"15;20;25;30"`.
         */
        "perPageList": string;
        /**
          * Total number of pages. Used to go to the last page and in the page selection dropdown.
         */
        "total": number;
        /**
          * Selected page
         */
        "value": number;
    }
    interface SeRadio {
        /**
          * Defines the color of the checkbox. The default setting is `primary`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color": 'primary' | 'secondary';
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the label that will display next to the radio button.
         */
        "label": string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right`.
         */
        "labelPos": 'left' | 'right';
        /**
          * Defines the name of the form field to attach the .
         */
        "name": string;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding": 'none' | 'small' | 'medium' | 'large';
        /**
          * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        "required": boolean;
        /**
          * Determines whether or not the checkbox is checked when you initialize it. The default setting is `false`. Checked if set to `true`.
         */
        "selected": boolean;
        /**
          * Sets the required property on the radio button element.
         */
        "setRequired": () => Promise<void>;
        /**
          * Defines the value you want to pass to the parent component when the radio button is checked.
         */
        "value": string;
    }
    interface SeRadioGroup {
        /**
          * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        "color": 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Defines the direction of the flex element. `row` is the default if used with `se-button`. `column` is the default if used with `se-radio`.
         */
        "direction": 'column' | 'row';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the height of each button in the group. `small` is the default setting, rendering a 32px height and a 14px font size. `nano` sets the height to 24px and the font size to 12px.
         */
        "size": 'small' | 'nano';
        /**
          * Specify the currently selected child Radio value..
         */
        "value": string;
    }
    interface SeSidemenu {
        "disabled": boolean;
        /**
          * Defines the text displayed in the header of the Sidemenu. The default value is `Menu`.
         */
        "label": string;
        "link": string;
        /**
          * Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.  ex: `document.getElementById("main-sidemenu").toggle("side-about");`
         */
        "toggle": (itemName?: string) => Promise<void>;
    }
    interface SeSidemenuItem {
        /**
          * Defines if the menu item is active or not. The default setting is `false`.
         */
        "active": boolean;
        /**
          * Defines the title of the menu item.
         */
        "item": string;
    }
    interface SeSkeleton {
        "circle": boolean;
        "count": number;
        "height": any;
        "width": any;
    }
    interface SeSlider {
        /**
          * Indicates if your slider is disabled. The default setting is `false`.
         */
        "disabled": boolean;
        /**
          * The label of the slider that will be attached to the input.
         */
        "label": string;
        /**
          * Indicates the maximum value of your slider. The default value is `100`.
         */
        "max": number;
        /**
          * Indicates the minimum value of your slider. The default value is `0`.
         */
        "min": number;
        /**
          * Sets the disabled property for slider component.
          * @param val : boolean, `true` or `false`.
         */
        "setDisabled": (disabled: boolean) => Promise<void>;
        /**
          * Indicates the initial value of your slider component when it loads. The default value is `0`.
         */
        "value": number;
    }
    interface SeSnackbar {
        /**
          * Defines the text you want your custom action button to read.
         */
        "actionText": string;
        /**
          * Displays a "button" to close the snackbar. The default setting is `false`. This will be visible if set to `true`.
         */
        "canClose": boolean;
        /**
          * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false. The default setting is 5000.
         */
        "duration": number;
        /**
          * The name of the icon you wish to display.  The default icon is an information circle.
         */
        "icon": string | 'none';
        /**
          * The content of the message you want the snackbar to display.
         */
        "message": string;
        "open": boolean;
        /**
          * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
         */
        "type": 'success' | 'error' | 'warning' | 'information';
    }
    interface SeStepper {
        /**
          * Defines if the stepper takes the whole space.
         */
        "block": boolean;
        /**
          * Sets the background color of your stepper. The default setting is `primary`, implementing a green background for the stepper visual items. The `alternative` setting implements a white background for the stepper visual items. This setting is best used against a gray background.
         */
        "color": 'primary' | 'alternative';
        /**
          * Defines if the stepper items is interactive or not. The default setting is `true`, each stepper item can be interacted with. `linear` keeps its same interaction limitation. `false` disabled the interactivness. It overrides the individual stepper item `interactive` property.
         */
        "interactive": boolean;
        /**
          * Sets the max width for each stepper label The default setting is `none`.
         */
        "labelMaxWidth": string;
        /**
          * Defines if the stepper items must be completed sequentially. The default setting is `true`, each stepper item must be validated before advancing to the next step. `false` allows each step to be selected in any order.
         */
        "linear": boolean;
        /**
          * Call the `next` method to navigate to the next step from the step that is currently selected. This will not work in linear mode if the next step is not validated.
         */
        "next": (validate: boolean) => Promise<void>;
        /**
          * Call the `previous` method to navigate to the previous step from the step that is currently selected.
         */
        "previous": () => Promise<void>;
        /**
          * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps. It no step parameter is provided, it will reset to the first stepper item.
         */
        "reset": (step?: number) => Promise<void>;
        /**
          * Defines the spacing/margin around the stepper. `none` is 0px `small` is 4px `medium` is 8px `large` is 16px
         */
        "spacing": 'none' | 'small' | 'medium' | 'large';
        /**
          * Sets the labels of the stepper items to be stacked below the steps The default setting is `false`.
         */
        "stacked": boolean;
    }
    interface SeStepperItem {
        /**
          * Indicates the content for the currently selected step in the stepper.
         */
        "active": boolean;
        /**
          * Indicates if the stepper item is interactive or not. The default setting is `true`, the stepper item can be interacted with. `false` disabled the interactivness.
         */
        "interactive": boolean;
        /**
          * Indicates the label for your stepper item.
         */
        "label": string;
        /**
          * Indicates whether a required item's data has been validated.  Useful if using a form field. When the stepper component is set to linear mode, all stepper items will need to be validated before advancing the stpper.
         */
        "validated": boolean;
    }
    interface SeTab {
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option": 'anchor' | 'content' | 'navigation';
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow": 'compact' | 'stack' | 'scroll';
    }
    interface SeTabItem {
        /**
          * Disable the item for any interaction.
         */
        "disabled": boolean;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href": string;
        /**
          * Defines if the list element should be selected or not.
         */
        "selected": boolean;
    }
    interface SeTabbar {
        /**
          * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background for nav-bars and ultra-light-grey-1 for content. The `alternative` setting renders a white background.
         */
        "color": TColor;
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option": 'nav' | 'content';
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow": 'compact' | 'stack' | 'scroll';
    }
    interface SeTable {
        /**
          * Defines the vertical alignment of table items.
         */
        "alignItems": string;
        /**
          * Define if we should show a compact view of the table, vs a version with larger spacing and font
         */
        "compact": boolean;
    }
    interface SeTableGroup {
        /**
          * Indicates whether or not the `se-table-group` is selectable.  Set to `false` by default.
         */
        "selectable": boolean;
        /**
          * Indicates whether or not the `se-table-group` is selected.  Set to `false` by default.
         */
        "selected": boolean;
    }
    interface SeTableGroupHeader {
    }
    interface SeTableItem {
        /**
          * Defines the vertical alignment of a table item.
         */
        "alignItems": string;
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable": boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex": string;
        /**
          * Defines the max-width of a column.
         */
        "maxWidth": string;
        /**
          * Defines the min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth": string;
        "option": 'dropdown' | 'text' | 'custom';
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width": string;
    }
    interface SeTableItemHeader {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable": boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex": string;
        /**
          * Defines the  max-width of a column.
         */
        "maxWidth": string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth": string;
        /**
          * Optional property defines whether the column is resizable or not. Default value `false` defines column as not resizable `true` defines column is resizable
         */
        "resizable": boolean;
        /**
          * Optional property that provides the arrow icon based on which string is provided, and also causes the `clickable` property to `true`. `asc` defines the icon as an upwards arrow in black. `desc` defines the icon as a downwards arrow in black. `none` defines the icon as an upwards arrow in grey.
         */
        "sort": 'asc' | 'desc' | 'none';
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width": string;
    }
    interface SeTooltip {
        /**
          * @deprecated only `hover` action should be used for tooltips
         */
        "action": 'click' | 'hover';
        /**
          * Method to close the tooltip separate from hovering or clicking the parent element.
         */
        "close": () => Promise<void>;
        /**
          * Indicates the color of the tooltip
         */
        "color": 'alternative' | 'information' | 'success' | 'warning' | 'error';
        /**
          * Method to open the tooltip separate from hovering or clicking the parent element.
         */
        "open": () => Promise<void>;
        /**
          * Indicates the position of your tooltip. The default setting is `bottom`, rendering the tooltip below its parent.
         */
        "position": 'top' | 'bottom' | 'left' | 'right';
        /**
          * Add a delay to display the tooltip in millisecond.
         */
        "showDelay": number;
    }
    interface SeTooltipContent {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon": string;
    }
    interface SeTooltipFooter {
    }
    interface SeTooltipHeader {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon": string;
    }
    interface SeVisualLinear {
        /**
          * Defines the text value of the label in your component.
         */
        "label": string;
        /**
          * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
         */
        "option": 'inline' | 'stacked';
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage": number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor": string;
        /**
          * Defines the value of your component.
         */
        "value": string;
    }
    interface SeVisualRadial {
        /**
          * Defines the text value of the label in your component.
         */
        "label": string;
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage": number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor": string;
        /**
          * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        "size": 'small' | 'large';
        /**
          * Defines the value of your component.
         */
        "value": string;
    }
}
export interface SeAccessibilityToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeAccessibilityToggleElement;
}
export interface SeAppCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeAppElement;
}
export interface SeBannerItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeBannerItemElement;
}
export interface SeBreadcrumbItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeBreadcrumbItemElement;
}
export interface SeButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeButtonElement;
}
export interface SeCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeCheckboxElement;
}
export interface SeChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeChipElement;
}
export interface SeDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeDialogElement;
}
export interface SeDialogHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeDialogHeaderElement;
}
export interface SeDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeDropdownElement;
}
export interface SeFabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFabElement;
}
export interface SeFabItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFabItemElement;
}
export interface SeFiltrationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationElement;
}
export interface SeFiltrationSmartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartElement;
}
export interface SeFiltrationSmartCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartCheckboxElement;
}
export interface SeFiltrationSmartFacetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartFacetElement;
}
export interface SeFiltrationSmartGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartGroupElement;
}
export interface SeFiltrationSmartMobileViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartMobileViewElement;
}
export interface SeFiltrationSmartMobileViewTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartMobileViewTriggerElement;
}
export interface SeFiltrationSmartResetButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartResetButtonElement;
}
export interface SeFiltrationSmartTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartTabElement;
}
export interface SeFiltrationSmartViewMoreFacetsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartViewMoreFacetsButtonElement;
}
export interface SeFiltrationSmartViewMoreRefinementsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFiltrationSmartViewMoreRefinementsButtonElement;
}
export interface SeFormFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeFormFieldElement;
}
export interface SeListGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeListGroupElement;
}
export interface SeListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeListItemElement;
}
export interface SePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSePaginationElement;
}
export interface SeRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeRadioElement;
}
export interface SeRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeRadioGroupElement;
}
export interface SeSidemenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeSidemenuElement;
}
export interface SeSidemenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeSidemenuItemElement;
}
export interface SeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeSliderElement;
}
export interface SeSnackbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeSnackbarElement;
}
export interface SeStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeStepperElement;
}
export interface SeStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeStepperItemElement;
}
export interface SeTableItemHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeTableItemHeaderElement;
}
export interface SeTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSeTooltipElement;
}
declare global {
    interface HTMLSeAboutElement extends Components.SeAbout, HTMLStencilElement {
    }
    var HTMLSeAboutElement: {
        prototype: HTMLSeAboutElement;
        new (): HTMLSeAboutElement;
    };
    interface HTMLSeAccessibilityToggleElement extends Components.SeAccessibilityToggle, HTMLStencilElement {
    }
    var HTMLSeAccessibilityToggleElement: {
        prototype: HTMLSeAccessibilityToggleElement;
        new (): HTMLSeAccessibilityToggleElement;
    };
    interface HTMLSeAppElement extends Components.SeApp, HTMLStencilElement {
    }
    var HTMLSeAppElement: {
        prototype: HTMLSeAppElement;
        new (): HTMLSeAppElement;
    };
    interface HTMLSeAuthenticationElement extends Components.SeAuthentication, HTMLStencilElement {
    }
    var HTMLSeAuthenticationElement: {
        prototype: HTMLSeAuthenticationElement;
        new (): HTMLSeAuthenticationElement;
    };
    interface HTMLSeBannerElement extends Components.SeBanner, HTMLStencilElement {
    }
    var HTMLSeBannerElement: {
        prototype: HTMLSeBannerElement;
        new (): HTMLSeBannerElement;
    };
    interface HTMLSeBannerItemElement extends Components.SeBannerItem, HTMLStencilElement {
    }
    var HTMLSeBannerItemElement: {
        prototype: HTMLSeBannerItemElement;
        new (): HTMLSeBannerItemElement;
    };
    interface HTMLSeBlockElement extends Components.SeBlock, HTMLStencilElement {
    }
    var HTMLSeBlockElement: {
        prototype: HTMLSeBlockElement;
        new (): HTMLSeBlockElement;
    };
    interface HTMLSeBlockContentElement extends Components.SeBlockContent, HTMLStencilElement {
    }
    var HTMLSeBlockContentElement: {
        prototype: HTMLSeBlockContentElement;
        new (): HTMLSeBlockContentElement;
    };
    interface HTMLSeBlockFooterElement extends Components.SeBlockFooter, HTMLStencilElement {
    }
    var HTMLSeBlockFooterElement: {
        prototype: HTMLSeBlockFooterElement;
        new (): HTMLSeBlockFooterElement;
    };
    interface HTMLSeBlockHeaderElement extends Components.SeBlockHeader, HTMLStencilElement {
    }
    var HTMLSeBlockHeaderElement: {
        prototype: HTMLSeBlockHeaderElement;
        new (): HTMLSeBlockHeaderElement;
    };
    interface HTMLSeBreadcrumbElement extends Components.SeBreadcrumb, HTMLStencilElement {
    }
    var HTMLSeBreadcrumbElement: {
        prototype: HTMLSeBreadcrumbElement;
        new (): HTMLSeBreadcrumbElement;
    };
    interface HTMLSeBreadcrumbItemElement extends Components.SeBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLSeBreadcrumbItemElement: {
        prototype: HTMLSeBreadcrumbItemElement;
        new (): HTMLSeBreadcrumbItemElement;
    };
    interface HTMLSeButtonElement extends Components.SeButton, HTMLStencilElement {
    }
    var HTMLSeButtonElement: {
        prototype: HTMLSeButtonElement;
        new (): HTMLSeButtonElement;
    };
    interface HTMLSeCarouselElement extends Components.SeCarousel, HTMLStencilElement {
    }
    var HTMLSeCarouselElement: {
        prototype: HTMLSeCarouselElement;
        new (): HTMLSeCarouselElement;
    };
    interface HTMLSeCarouselItemElement extends Components.SeCarouselItem, HTMLStencilElement {
    }
    var HTMLSeCarouselItemElement: {
        prototype: HTMLSeCarouselItemElement;
        new (): HTMLSeCarouselItemElement;
    };
    interface HTMLSeCarouselPaginationElement extends Components.SeCarouselPagination, HTMLStencilElement {
    }
    var HTMLSeCarouselPaginationElement: {
        prototype: HTMLSeCarouselPaginationElement;
        new (): HTMLSeCarouselPaginationElement;
    };
    interface HTMLSeCheckboxElement extends Components.SeCheckbox, HTMLStencilElement {
    }
    var HTMLSeCheckboxElement: {
        prototype: HTMLSeCheckboxElement;
        new (): HTMLSeCheckboxElement;
    };
    interface HTMLSeChipElement extends Components.SeChip, HTMLStencilElement {
    }
    var HTMLSeChipElement: {
        prototype: HTMLSeChipElement;
        new (): HTMLSeChipElement;
    };
    interface HTMLSeContainerElement extends Components.SeContainer, HTMLStencilElement {
    }
    var HTMLSeContainerElement: {
        prototype: HTMLSeContainerElement;
        new (): HTMLSeContainerElement;
    };
    interface HTMLSeDialogElement extends Components.SeDialog, HTMLStencilElement {
    }
    var HTMLSeDialogElement: {
        prototype: HTMLSeDialogElement;
        new (): HTMLSeDialogElement;
    };
    interface HTMLSeDialogContentElement extends Components.SeDialogContent, HTMLStencilElement {
    }
    var HTMLSeDialogContentElement: {
        prototype: HTMLSeDialogContentElement;
        new (): HTMLSeDialogContentElement;
    };
    interface HTMLSeDialogFooterElement extends Components.SeDialogFooter, HTMLStencilElement {
    }
    var HTMLSeDialogFooterElement: {
        prototype: HTMLSeDialogFooterElement;
        new (): HTMLSeDialogFooterElement;
    };
    interface HTMLSeDialogHeaderElement extends Components.SeDialogHeader, HTMLStencilElement {
    }
    var HTMLSeDialogHeaderElement: {
        prototype: HTMLSeDialogHeaderElement;
        new (): HTMLSeDialogHeaderElement;
    };
    interface HTMLSeDividerElement extends Components.SeDivider, HTMLStencilElement {
    }
    var HTMLSeDividerElement: {
        prototype: HTMLSeDividerElement;
        new (): HTMLSeDividerElement;
    };
    interface HTMLSeDropdownElement extends Components.SeDropdown, HTMLStencilElement {
    }
    var HTMLSeDropdownElement: {
        prototype: HTMLSeDropdownElement;
        new (): HTMLSeDropdownElement;
    };
    interface HTMLSeFabElement extends Components.SeFab, HTMLStencilElement {
    }
    var HTMLSeFabElement: {
        prototype: HTMLSeFabElement;
        new (): HTMLSeFabElement;
    };
    interface HTMLSeFabItemElement extends Components.SeFabItem, HTMLStencilElement {
    }
    var HTMLSeFabItemElement: {
        prototype: HTMLSeFabItemElement;
        new (): HTMLSeFabItemElement;
    };
    interface HTMLSeFiltrationElement extends Components.SeFiltration, HTMLStencilElement {
    }
    var HTMLSeFiltrationElement: {
        prototype: HTMLSeFiltrationElement;
        new (): HTMLSeFiltrationElement;
    };
    interface HTMLSeFiltrationSmartElement extends Components.SeFiltrationSmart, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartElement: {
        prototype: HTMLSeFiltrationSmartElement;
        new (): HTMLSeFiltrationSmartElement;
    };
    interface HTMLSeFiltrationSmartCheckboxElement extends Components.SeFiltrationSmartCheckbox, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartCheckboxElement: {
        prototype: HTMLSeFiltrationSmartCheckboxElement;
        new (): HTMLSeFiltrationSmartCheckboxElement;
    };
    interface HTMLSeFiltrationSmartDesktopViewElement extends Components.SeFiltrationSmartDesktopView, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartDesktopViewElement: {
        prototype: HTMLSeFiltrationSmartDesktopViewElement;
        new (): HTMLSeFiltrationSmartDesktopViewElement;
    };
    interface HTMLSeFiltrationSmartFacetElement extends Components.SeFiltrationSmartFacet, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartFacetElement: {
        prototype: HTMLSeFiltrationSmartFacetElement;
        new (): HTMLSeFiltrationSmartFacetElement;
    };
    interface HTMLSeFiltrationSmartGroupElement extends Components.SeFiltrationSmartGroup, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartGroupElement: {
        prototype: HTMLSeFiltrationSmartGroupElement;
        new (): HTMLSeFiltrationSmartGroupElement;
    };
    interface HTMLSeFiltrationSmartMobileViewElement extends Components.SeFiltrationSmartMobileView, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartMobileViewElement: {
        prototype: HTMLSeFiltrationSmartMobileViewElement;
        new (): HTMLSeFiltrationSmartMobileViewElement;
    };
    interface HTMLSeFiltrationSmartMobileViewTriggerElement extends Components.SeFiltrationSmartMobileViewTrigger, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartMobileViewTriggerElement: {
        prototype: HTMLSeFiltrationSmartMobileViewTriggerElement;
        new (): HTMLSeFiltrationSmartMobileViewTriggerElement;
    };
    interface HTMLSeFiltrationSmartResetButtonElement extends Components.SeFiltrationSmartResetButton, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartResetButtonElement: {
        prototype: HTMLSeFiltrationSmartResetButtonElement;
        new (): HTMLSeFiltrationSmartResetButtonElement;
    };
    interface HTMLSeFiltrationSmartTabElement extends Components.SeFiltrationSmartTab, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartTabElement: {
        prototype: HTMLSeFiltrationSmartTabElement;
        new (): HTMLSeFiltrationSmartTabElement;
    };
    interface HTMLSeFiltrationSmartViewMoreFacetsButtonElement extends Components.SeFiltrationSmartViewMoreFacetsButton, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartViewMoreFacetsButtonElement: {
        prototype: HTMLSeFiltrationSmartViewMoreFacetsButtonElement;
        new (): HTMLSeFiltrationSmartViewMoreFacetsButtonElement;
    };
    interface HTMLSeFiltrationSmartViewMoreRefinementsButtonElement extends Components.SeFiltrationSmartViewMoreRefinementsButton, HTMLStencilElement {
    }
    var HTMLSeFiltrationSmartViewMoreRefinementsButtonElement: {
        prototype: HTMLSeFiltrationSmartViewMoreRefinementsButtonElement;
        new (): HTMLSeFiltrationSmartViewMoreRefinementsButtonElement;
    };
    interface HTMLSeFormFieldElement extends Components.SeFormField, HTMLStencilElement {
    }
    var HTMLSeFormFieldElement: {
        prototype: HTMLSeFormFieldElement;
        new (): HTMLSeFormFieldElement;
    };
    interface HTMLSeHeaderElement extends Components.SeHeader, HTMLStencilElement {
    }
    var HTMLSeHeaderElement: {
        prototype: HTMLSeHeaderElement;
        new (): HTMLSeHeaderElement;
    };
    interface HTMLSeIconElement extends Components.SeIcon, HTMLStencilElement {
    }
    var HTMLSeIconElement: {
        prototype: HTMLSeIconElement;
        new (): HTMLSeIconElement;
    };
    interface HTMLSeIconEcostruxureElement extends Components.SeIconEcostruxure, HTMLStencilElement {
    }
    var HTMLSeIconEcostruxureElement: {
        prototype: HTMLSeIconEcostruxureElement;
        new (): HTMLSeIconEcostruxureElement;
    };
    interface HTMLSeIconFileElement extends Components.SeIconFile, HTMLStencilElement {
    }
    var HTMLSeIconFileElement: {
        prototype: HTMLSeIconFileElement;
        new (): HTMLSeIconFileElement;
    };
    interface HTMLSeIconLifeisonElement extends Components.SeIconLifeison, HTMLStencilElement {
    }
    var HTMLSeIconLifeisonElement: {
        prototype: HTMLSeIconLifeisonElement;
        new (): HTMLSeIconLifeisonElement;
    };
    interface HTMLSeIconSchneiderElement extends Components.SeIconSchneider, HTMLStencilElement {
    }
    var HTMLSeIconSchneiderElement: {
        prototype: HTMLSeIconSchneiderElement;
        new (): HTMLSeIconSchneiderElement;
    };
    interface HTMLSeLinkElement extends Components.SeLink, HTMLStencilElement {
    }
    var HTMLSeLinkElement: {
        prototype: HTMLSeLinkElement;
        new (): HTMLSeLinkElement;
    };
    interface HTMLSeListElement extends Components.SeList, HTMLStencilElement {
    }
    var HTMLSeListElement: {
        prototype: HTMLSeListElement;
        new (): HTMLSeListElement;
    };
    interface HTMLSeListGroupElement extends Components.SeListGroup, HTMLStencilElement {
    }
    var HTMLSeListGroupElement: {
        prototype: HTMLSeListGroupElement;
        new (): HTMLSeListGroupElement;
    };
    interface HTMLSeListItemElement extends Components.SeListItem, HTMLStencilElement {
    }
    var HTMLSeListItemElement: {
        prototype: HTMLSeListItemElement;
        new (): HTMLSeListItemElement;
    };
    interface HTMLSeLoadingElement extends Components.SeLoading, HTMLStencilElement {
    }
    var HTMLSeLoadingElement: {
        prototype: HTMLSeLoadingElement;
        new (): HTMLSeLoadingElement;
    };
    interface HTMLSePaginationElement extends Components.SePagination, HTMLStencilElement {
    }
    var HTMLSePaginationElement: {
        prototype: HTMLSePaginationElement;
        new (): HTMLSePaginationElement;
    };
    interface HTMLSeRadioElement extends Components.SeRadio, HTMLStencilElement {
    }
    var HTMLSeRadioElement: {
        prototype: HTMLSeRadioElement;
        new (): HTMLSeRadioElement;
    };
    interface HTMLSeRadioGroupElement extends Components.SeRadioGroup, HTMLStencilElement {
    }
    var HTMLSeRadioGroupElement: {
        prototype: HTMLSeRadioGroupElement;
        new (): HTMLSeRadioGroupElement;
    };
    interface HTMLSeSidemenuElement extends Components.SeSidemenu, HTMLStencilElement {
    }
    var HTMLSeSidemenuElement: {
        prototype: HTMLSeSidemenuElement;
        new (): HTMLSeSidemenuElement;
    };
    interface HTMLSeSidemenuItemElement extends Components.SeSidemenuItem, HTMLStencilElement {
    }
    var HTMLSeSidemenuItemElement: {
        prototype: HTMLSeSidemenuItemElement;
        new (): HTMLSeSidemenuItemElement;
    };
    interface HTMLSeSkeletonElement extends Components.SeSkeleton, HTMLStencilElement {
    }
    var HTMLSeSkeletonElement: {
        prototype: HTMLSeSkeletonElement;
        new (): HTMLSeSkeletonElement;
    };
    interface HTMLSeSliderElement extends Components.SeSlider, HTMLStencilElement {
    }
    var HTMLSeSliderElement: {
        prototype: HTMLSeSliderElement;
        new (): HTMLSeSliderElement;
    };
    interface HTMLSeSnackbarElement extends Components.SeSnackbar, HTMLStencilElement {
    }
    var HTMLSeSnackbarElement: {
        prototype: HTMLSeSnackbarElement;
        new (): HTMLSeSnackbarElement;
    };
    interface HTMLSeStepperElement extends Components.SeStepper, HTMLStencilElement {
    }
    var HTMLSeStepperElement: {
        prototype: HTMLSeStepperElement;
        new (): HTMLSeStepperElement;
    };
    interface HTMLSeStepperItemElement extends Components.SeStepperItem, HTMLStencilElement {
    }
    var HTMLSeStepperItemElement: {
        prototype: HTMLSeStepperItemElement;
        new (): HTMLSeStepperItemElement;
    };
    interface HTMLSeTabElement extends Components.SeTab, HTMLStencilElement {
    }
    var HTMLSeTabElement: {
        prototype: HTMLSeTabElement;
        new (): HTMLSeTabElement;
    };
    interface HTMLSeTabItemElement extends Components.SeTabItem, HTMLStencilElement {
    }
    var HTMLSeTabItemElement: {
        prototype: HTMLSeTabItemElement;
        new (): HTMLSeTabItemElement;
    };
    interface HTMLSeTabbarElement extends Components.SeTabbar, HTMLStencilElement {
    }
    var HTMLSeTabbarElement: {
        prototype: HTMLSeTabbarElement;
        new (): HTMLSeTabbarElement;
    };
    interface HTMLSeTableElement extends Components.SeTable, HTMLStencilElement {
    }
    var HTMLSeTableElement: {
        prototype: HTMLSeTableElement;
        new (): HTMLSeTableElement;
    };
    interface HTMLSeTableGroupElement extends Components.SeTableGroup, HTMLStencilElement {
    }
    var HTMLSeTableGroupElement: {
        prototype: HTMLSeTableGroupElement;
        new (): HTMLSeTableGroupElement;
    };
    interface HTMLSeTableGroupHeaderElement extends Components.SeTableGroupHeader, HTMLStencilElement {
    }
    var HTMLSeTableGroupHeaderElement: {
        prototype: HTMLSeTableGroupHeaderElement;
        new (): HTMLSeTableGroupHeaderElement;
    };
    interface HTMLSeTableItemElement extends Components.SeTableItem, HTMLStencilElement {
    }
    var HTMLSeTableItemElement: {
        prototype: HTMLSeTableItemElement;
        new (): HTMLSeTableItemElement;
    };
    interface HTMLSeTableItemHeaderElement extends Components.SeTableItemHeader, HTMLStencilElement {
    }
    var HTMLSeTableItemHeaderElement: {
        prototype: HTMLSeTableItemHeaderElement;
        new (): HTMLSeTableItemHeaderElement;
    };
    interface HTMLSeTooltipElement extends Components.SeTooltip, HTMLStencilElement {
    }
    var HTMLSeTooltipElement: {
        prototype: HTMLSeTooltipElement;
        new (): HTMLSeTooltipElement;
    };
    interface HTMLSeTooltipContentElement extends Components.SeTooltipContent, HTMLStencilElement {
    }
    var HTMLSeTooltipContentElement: {
        prototype: HTMLSeTooltipContentElement;
        new (): HTMLSeTooltipContentElement;
    };
    interface HTMLSeTooltipFooterElement extends Components.SeTooltipFooter, HTMLStencilElement {
    }
    var HTMLSeTooltipFooterElement: {
        prototype: HTMLSeTooltipFooterElement;
        new (): HTMLSeTooltipFooterElement;
    };
    interface HTMLSeTooltipHeaderElement extends Components.SeTooltipHeader, HTMLStencilElement {
    }
    var HTMLSeTooltipHeaderElement: {
        prototype: HTMLSeTooltipHeaderElement;
        new (): HTMLSeTooltipHeaderElement;
    };
    interface HTMLSeVisualLinearElement extends Components.SeVisualLinear, HTMLStencilElement {
    }
    var HTMLSeVisualLinearElement: {
        prototype: HTMLSeVisualLinearElement;
        new (): HTMLSeVisualLinearElement;
    };
    interface HTMLSeVisualRadialElement extends Components.SeVisualRadial, HTMLStencilElement {
    }
    var HTMLSeVisualRadialElement: {
        prototype: HTMLSeVisualRadialElement;
        new (): HTMLSeVisualRadialElement;
    };
    interface HTMLElementTagNameMap {
        "se-about": HTMLSeAboutElement;
        "se-accessibility-toggle": HTMLSeAccessibilityToggleElement;
        "se-app": HTMLSeAppElement;
        "se-authentication": HTMLSeAuthenticationElement;
        "se-banner": HTMLSeBannerElement;
        "se-banner-item": HTMLSeBannerItemElement;
        "se-block": HTMLSeBlockElement;
        "se-block-content": HTMLSeBlockContentElement;
        "se-block-footer": HTMLSeBlockFooterElement;
        "se-block-header": HTMLSeBlockHeaderElement;
        "se-breadcrumb": HTMLSeBreadcrumbElement;
        "se-breadcrumb-item": HTMLSeBreadcrumbItemElement;
        "se-button": HTMLSeButtonElement;
        "se-carousel": HTMLSeCarouselElement;
        "se-carousel-item": HTMLSeCarouselItemElement;
        "se-carousel-pagination": HTMLSeCarouselPaginationElement;
        "se-checkbox": HTMLSeCheckboxElement;
        "se-chip": HTMLSeChipElement;
        "se-container": HTMLSeContainerElement;
        "se-dialog": HTMLSeDialogElement;
        "se-dialog-content": HTMLSeDialogContentElement;
        "se-dialog-footer": HTMLSeDialogFooterElement;
        "se-dialog-header": HTMLSeDialogHeaderElement;
        "se-divider": HTMLSeDividerElement;
        "se-dropdown": HTMLSeDropdownElement;
        "se-fab": HTMLSeFabElement;
        "se-fab-item": HTMLSeFabItemElement;
        "se-filtration": HTMLSeFiltrationElement;
        "se-filtration-smart": HTMLSeFiltrationSmartElement;
        "se-filtration-smart-checkbox": HTMLSeFiltrationSmartCheckboxElement;
        "se-filtration-smart-desktop-view": HTMLSeFiltrationSmartDesktopViewElement;
        "se-filtration-smart-facet": HTMLSeFiltrationSmartFacetElement;
        "se-filtration-smart-group": HTMLSeFiltrationSmartGroupElement;
        "se-filtration-smart-mobile-view": HTMLSeFiltrationSmartMobileViewElement;
        "se-filtration-smart-mobile-view-trigger": HTMLSeFiltrationSmartMobileViewTriggerElement;
        "se-filtration-smart-reset-button": HTMLSeFiltrationSmartResetButtonElement;
        "se-filtration-smart-tab": HTMLSeFiltrationSmartTabElement;
        "se-filtration-smart-view-more-facets-button": HTMLSeFiltrationSmartViewMoreFacetsButtonElement;
        "se-filtration-smart-view-more-refinements-button": HTMLSeFiltrationSmartViewMoreRefinementsButtonElement;
        "se-form-field": HTMLSeFormFieldElement;
        "se-header": HTMLSeHeaderElement;
        "se-icon": HTMLSeIconElement;
        "se-icon-ecostruxure": HTMLSeIconEcostruxureElement;
        "se-icon-file": HTMLSeIconFileElement;
        "se-icon-lifeison": HTMLSeIconLifeisonElement;
        "se-icon-schneider": HTMLSeIconSchneiderElement;
        "se-link": HTMLSeLinkElement;
        "se-list": HTMLSeListElement;
        "se-list-group": HTMLSeListGroupElement;
        "se-list-item": HTMLSeListItemElement;
        "se-loading": HTMLSeLoadingElement;
        "se-pagination": HTMLSePaginationElement;
        "se-radio": HTMLSeRadioElement;
        "se-radio-group": HTMLSeRadioGroupElement;
        "se-sidemenu": HTMLSeSidemenuElement;
        "se-sidemenu-item": HTMLSeSidemenuItemElement;
        "se-skeleton": HTMLSeSkeletonElement;
        "se-slider": HTMLSeSliderElement;
        "se-snackbar": HTMLSeSnackbarElement;
        "se-stepper": HTMLSeStepperElement;
        "se-stepper-item": HTMLSeStepperItemElement;
        "se-tab": HTMLSeTabElement;
        "se-tab-item": HTMLSeTabItemElement;
        "se-tabbar": HTMLSeTabbarElement;
        "se-table": HTMLSeTableElement;
        "se-table-group": HTMLSeTableGroupElement;
        "se-table-group-header": HTMLSeTableGroupHeaderElement;
        "se-table-item": HTMLSeTableItemElement;
        "se-table-item-header": HTMLSeTableItemHeaderElement;
        "se-tooltip": HTMLSeTooltipElement;
        "se-tooltip-content": HTMLSeTooltipContentElement;
        "se-tooltip-footer": HTMLSeTooltipFooterElement;
        "se-tooltip-header": HTMLSeTooltipHeaderElement;
        "se-visual-linear": HTMLSeVisualLinearElement;
        "se-visual-radial": HTMLSeVisualRadialElement;
    }
}
declare namespace LocalJSX {
    interface SeAbout {
        /**
          * The title of your about screen.
         */
        "appTitle"?: string;
        /**
          * The copyright you would like to display.
         */
        "copyright"?: string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain"?: string;
        /**
          * Sets the background image for your about page.
         */
        "imageUrl"?: string;
        /**
          * The version number you want to display.
         */
        "version"?: string;
    }
    interface SeAccessibilityToggle {
        /**
          * Defines the text when the Accessibility mode is OFF
         */
        "labelModeOff"?: string;
        /**
          * Defines the text when the Accessibility mode is ON
         */
        "labelModeOn"?: string;
        /**
          * Passes accessibility toggle state to the parent component on a change of the toggle state
         */
        "onDidChange"?: (event: SeAccessibilityToggleCustomEvent<{ selected: boolean }>) => void;
        /**
          * Defines the state of the toggle. `false` by default.
         */
        "selected"?: boolean;
    }
    interface SeApp {
        "onThemeChanged"?: (event: SeAppCustomEvent<any>) => void;
        /**
          * Define the type of application. updating the option will impact the font used. - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`. - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        "option"?: 'technical' | 'website' | 'dcx';
        /**
          * Define if the content of the page should scroll with the header (useful on website context). The header can then have the style sticky to stay in the top of the page if needed.
         */
        "pageScroll"?: boolean;
        /**
          * Define the them of application. Update the `--se-` css variables of the application. - `light`: light mode of the design. - `dark`: dark mode of the application. - `auto`: Will match the OS configuration
         */
        "theme"?: 'light' | 'dark' | 'auto';
    }
    interface SeAuthentication {
        /**
          * The title of your authentication screen.
         */
        "appTitle"?: string;
        /**
          * The copyright you would like to display.
         */
        "copyright"?: string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain"?: string;
        /**
          * If set to `true`, this will hide the authentication screen.
         */
        "hide"?: boolean;
        /**
          * Sets the background image for your authentication screen.
         */
        "imageUrl"?: string;
        /**
          * The version number you want to display.
         */
        "version"?: string;
    }
    interface SeBanner {
        /**
          * Set the duration (in ms) that the banner will automatically switch slides. Default is `6000`.
         */
        "duration"?: number;
    }
    interface SeBannerItem {
        /**
          * Indicates the active banner item in your banner component.
         */
        "active"?: boolean;
        /**
          * Sets the background image for your banner item.
         */
        "imageUrl"?: string;
        /**
          * Send an event when the banner item changes
         */
        "onDidChange"?: (event: SeBannerItemCustomEvent<any>) => void;
    }
    interface SeBlock {
        /**
          * Defines the se-block item's ability to appear clickable / selectable. Default setting is `false`, resulting in no hover effects on the block level. `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        "clickable"?: boolean;
        /**
          * Defines clickable se-block item's bar on hover. Default setting is `false`. `true` renders a `$se-life-green` colored bar on a hover.
         */
        "clickableBar"?: boolean;
        /**
          * Optional property that defines the background color of the block. Default setting is `alternative`, rendering the "alternative" theme background. `none` has no background. `standard` renders the "standard" theme background.
         */
        "color"?: 'none' | 'standard' | 'alternative';
        /**
          * Defines the se-block corner radius. Default setting is `small`, rendering a rounded, 4px rounded corner. `none` is for a sharp, 90 degree corner. `nano` is for a slightly rounded, 2px rounded corner.
         */
        "corner"?: 'none' | 'nano' | 'small';
        /**
          * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
         */
        "display"?: 'flex' | 'block' | 'grid';
        /**
          * Defines whether or not a divider will be applied to the se-block header and footer. `true` will add a divider to the se-block-header and se-block-footer, if they are present. `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        "divider"?: boolean;
        /**
          * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item. Default setting is `false`, spanning 1 row and 1 column (1/1). `true` spans 2 rows and 2 columns (2/2). `vertical` spans 2 rows (2/1). `horizontal` spans 2 columns (1/2).
         */
        "enlarged"?: 'vertical' | 'horizontal' | boolean;
        /**
          * Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "height"?: string;
        /**
          * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        "loading"?: boolean;
        /**
          * Defines the spacing around the outside edge of a block. Default `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "margin"?: 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Defines the visual appearance of a block. Default setting is `basic`, which will remove any spacing. `widget` will create a flat widget look and feel with a `medium` margin around it. `card` will create a card look and feel with rounded corners, and with a `large` margin around it. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        "option"?: 'basic' | 'card' | 'card-old' | 'widget' | 'fill';
        /**
          * Defines the se-block outline. Default setting is `false`. Setting this property to `true` will add a 1px border.
         */
        "outline"?: boolean;
        /**
          * Defines the se-block outline color. Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color. `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected. `secondary` defines the outline color as `$se-sky-blue`.
         */
        "outlineColor"?: 'standard' | 'secondary' | 'primary';
        /**
          * Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "width"?: string;
    }
    interface SeBlockContent {
        /**
          * Defines maximum height of the component. If set, scroll will be applied to the block if its height exceeds `maxHeight`. Also, its top and bottom parts will be covered by semi-transparent overlays.
         */
        "maxHeight"?: number | string;
        /**
          * The block-content component will add 8px padding on the top and bottom, and 16px padding on the left and right by default. When the option is set to `fill`, the content will fill the whole space of the block-content with no padding.
         */
        "option"?: 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBlockFooter {
        /**
          * Defines the direction of the flex element. Default setting is `row`. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction"?: 'row' | 'column';
        /**
          * Defines whether or not a divider will be applied to the se-block-footer. The se-block component's divider property will be applied to the se-block-footer component.
         */
        "divider"?: boolean;
        /**
          * Defines the visual appearance of a footer. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the footer with respect to the card design.
         */
        "option"?: 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBlockHeader {
        /**
          * Defines whether or not a divider will be applied to the se-block-header. The se-block component's divider property will be applied to the se-block-header component.
         */
        "divider"?: boolean;
        /**
          * Defines the visual appearance of a header. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the header with respect to the card design. `fill` removes all spacing, for example with use of the `se-tabbar` option `content`.
         */
        "option"?: 'card' | 'widget' | 'basic' | 'fill';
    }
    interface SeBreadcrumb {
        /**
          * Provides a label that describes the type of navigation for assistive technologies. The default value is `breadcrumb`.
         */
        "ariaLabel"?: string;
        /**
          * Setting allowing to transform breadcrumb into a backlink on screen sizes smaller than specified.
         */
        "breakpoint"?: 'tablet' | 'desktop' | 'wide-desktop';
        /**
          * Indicates whether or not the last breadcrumb item should be selectable. The default setting is `false`.
         */
        "canSelectLast"?: boolean;
    }
    interface SeBreadcrumbItem {
        /**
          * Indicates whether or not the breadcrumb item should be selected.  The default setting is `true`.
         */
        "canSelect"?: boolean;
        /**
          * Indicates the URL you wish to navigate to when clicking on your breadcrumb item.
         */
        "href"?: string;
        /**
          * Indicates whether or not the breadcrumb item should be show a arrow at the end.  The default setting is `false`.
         */
        "isLast"?: boolean;
        /**
          * Event firing when breadcrumbs link is clicked.
         */
        "onDidNavigate"?: (event: SeBreadcrumbItemCustomEvent<HTMLAnchorElement>) => void;
        /**
          * Indicates the position of an item in a series or sequence of items.
         */
        "position"?: string;
    }
    interface SeButton {
        /**
          * Optional property that defines if the button displays as a block in it's container. When set to true, the button will be as wide as its container.
         */
        "block"?: boolean;
        /**
          * Optional property that defines if the button has a caption or tooltip text.
         */
        "caption"?: string;
        /**
          * Defines the background color of the button. The default setting is `standard`.
         */
        "color"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Optional property that determines if your button includes an icon.
         */
        "icon"?: string;
        /**
          * Optional property to change the color of the icon when needed. For example, the user dropdown in the header component.
         */
        "iconColor"?: 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Property to specify if the button should only display an icon (no extra spacing).
         */
        "iconOnly"?: boolean;
        /**
          * Passes button data to the parent component on a click.
         */
        "onDidClick"?: (event: SeButtonCustomEvent<any>) => void;
        /**
          * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. **deprecated** `raised` adds a box shadow to the button. `outline` adds a border to the button. **deprecated** `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application. `text` removes background in default state
         */
        "option"?: 'flat'
    | 'raised'
    | 'outline'
    | 'text'
    | string;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding"?: 'none' | 'small' | 'medium' | 'large';
        /**
          * Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component.
         */
        "selected"?: boolean;
        /**
          * Defines the size of the button. `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component. `small` is the default option, with a 14px font and a 32px height. `medium` sets the font to 16px and the height to 40px. `large` sets the font to 18px and the height to 48px.
         */
        "size"?: 'nano' | 'small' | 'medium' | 'large';
        /**
          * Optional property. `button`	is the default setting, creating a clickable button. `submit`	creates a "submit" button (useful to submit form-data). `reset`	creates a reset button (useful to reset form-data to its initial values).
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
         */
        "value"?: string;
    }
    interface SeCarousel {
        /**
          * configures position of arrows. When `arrowsOverlay` is `false` arrows are positioned outside of component bounds
         */
        "arrowsOverlay"?: boolean;
        /**
          * Show a hint of the next item if more item to be seen. if 0, then no hint will be displayed.
         */
        "hintWidth"?: number;
        /**
          * minimum width of the carousel item. The number of item displayed will be based on it.
         */
        "itemMinWidth"?: number;
        /**
          * Configures if pagination dots are shown (https://zeroheight.com/6dbc9efe1/p/045938-pagination/b/934eef)
         */
        "pagination"?: boolean;
    }
    interface SeCarouselItem {
    }
    interface SeCarouselPagination {
        /**
          * Index of active/selected pagination bullet
         */
        "activeIndex"?: number;
        /**
          * Number of pagination bullets
         */
        "size"?: number;
    }
    interface SeCheckbox {
        /**
          * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`. The default value is `success`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color"?: 'primary' | 'secondary' | 'success';
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Reduces the visual height of the checkbox when the option is set to `onoff`. Useful if the on/off checkbox is within a header element.
         */
        "header"?: boolean;
        /**
          * Optional property that defines if the checkbox is in indeterminate state (only work with option="checkbox").  Set to `false` by default.
         */
        "indeterminate"?: boolean;
        /**
          * The label of the checkbox that will be attached to the box.
         */
        "label"?: string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right` when the option is set to `checkbox`. The default setting is `left` when the option is set to `switch`.
         */
        "labelPos"?: 'left' | 'right';
        /**
          * Sets suffix of the label shown with semi-transparent text just after the label.
         */
        "labelSuffix"?: string;
        /**
          * Defines the name of the checkbox.
         */
        "name"?: string;
        /**
          * Defines whether the toggle/switch is interactive or not. Set to `false` by default.
         */
        "noInteractive"?: boolean;
        /**
          * Send the checkbox value to the parent component when clicking on the checkbox.
         */
        "onDidChange"?: (event: SeCheckboxCustomEvent<{ value: string; selected: boolean }>) => void;
        /**
          * Determines the visual appearance of the component. `checkbox` is the default option, which will render the component like a standard HTML checkbox. `checkbox-fake` **deprecated (use noInteractive property)** will render the component exactly like `checkbox` but it will not have any interactive elements.    It means it will not be accessible with keyboard, it will not trigger any unwanted events -- totally "dumb" component. `switch` renders the component like a toggle switch. `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        "option"?: Option;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding"?: 'none' | 'small' | 'medium' | 'large';
        /**
          * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        "required"?: boolean;
        /**
          * The "checked" state of the checkbox, `false` by default.
         */
        "selected"?: boolean;
        /**
          * Defines the size of the control. So far it's only supported by checkbox.  There are two options: `s`: 16px `m`: 20px (default)  Also affects the font size of the checkbox text label: `s`: 14px `m`: 16px (default)
         */
        "size"?: Size;
        /**
          * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        "textOff"?: string;
        /**
          * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        "textOn"?: string;
        /**
          * The value you want to pass to the parent component when the checkbox is checked.
         */
        "value"?: string;
    }
    interface SeChip {
        /**
          * Optional property that defines if the chip displays as a block in it's container. When set to true, the chip will be as wide as its container.
         */
        "block"?: boolean;
        /**
          * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        "canClose"?: boolean;
        /**
          * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
         */
        "color"?: 'standard' | 'alternative';
        /**
          * Indicates whether or not the chip has dashed border. Set to `false` by default.
         */
        "dashed"?: boolean;
        /**
          * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Send the chip value to the parent component when clicking the close button of a chip.
         */
        "onDidClose"?: (event: SeChipCustomEvent<any>) => void;
        /**
          * Indicates whether or not the chip can changed state when hover or clicked on.  Set to `false` by default.
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        "selected"?: boolean;
        /**
          * Defines the size of the chip. `nano` sets the font to 14px and the height to 20px. `small` is the default option, with a 16px font and a 24px height. `medium` is the default option, with a 16px font and a 32px height. `large` is the default option, with a 16px font and a 40px height.
         */
        "size"?: 'nano' | 'small' | 'medium' | 'large';
        /**
          * The text you want to display in your chip.
         */
        "value"?: string;
    }
    interface SeContainer {
        /**
          * Defines the background color of the container. `none` has no background. `standard` is `se-background`, light gray. `alternative` is a white background.
         */
        "color"?: 'none' | 'standard' | 'alternative';
        /**
          * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`.
         */
        "columnSize"?: string;
        /**
          * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction"?: 'column' | 'row';
        /**
          * Defines how to display the element. `flex` is the default display. `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        "display"?: 'flex' | 'block' | 'grid';
        /**
          * Defines the gap between items. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "gap"?: 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set. `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set. `centered` centers the container so the content does not exceed a maximum width. `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated. `inherited` will insure that no specific style is applied to the container.
         */
        "option"?: | 'fill'
    | 'widget'
    | 'card'
    | 'card-old'
    | 'centered'
    | 'inherited';
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "padding"?: 'none' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        "position"?: 'relative' | 'absolute';
        /**
          * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        "rowSize"?: string;
    }
    interface SeDialog {
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
          * @deprecated use noBackdrop='true' instead
         */
        "canBackdrop"?: boolean;
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
          * @deprecated use the configuration directly on se-dialog-header
         */
        "color"?: 'alternative' | 'primary';
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `false`.
         */
        "noBackdrop"?: boolean;
        /**
          * Send data to the parent component when the backdrop is clicked.
         */
        "onBackdrop"?: (event: SeDialogCustomEvent<any>) => void;
        /**
          * Send data to the parent component when clicking an element within the dialog to close it. The modal can then be safely removed from the DOM.
         */
        "onDidClose"?: (event: SeDialogCustomEvent<any>) => void;
        /**
          * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        "open"?: boolean;
        /**
          * Option to scroll page in browser window if set to `true`.
         */
        "pageScroll"?: boolean;
        /**
          * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
         */
        "size"?: 'small' | 'medium' | 'large' | 'xlarge' | 'fill';
    }
    interface SeDialogContent {
        /**
          * Indicates an icon you want to display in your dialog.
         */
        "icon"?: string;
        /**
          * Indicates what icon color schema you want to render in your dialog.
         */
        "iconColor"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'information';
        /**
          * Indicates if se-dialog-content is the last child of the dialog component.
         */
        "isLastChild"?: boolean;
        /**
          * Defaulted to a small padding. When set to `fill`, the content will fill the whole space of the dialog. When set to `indent`, the content will alternative margins and paddings.
          * @deprecated use padding instead
         */
        "option"?: 'fill' | 'indent';
        /**
          * optional property. define the padding around the button `none` no padding. `small` small padding: default `large` large padding.
         */
        "padding"?: 'none' | 'small' | 'large';
    }
    interface SeDialogFooter {
    }
    interface SeDialogHeader {
        /**
          * Display the close icon to close the dialog. Default setting is `false`.
         */
        "closeIcon"?: boolean;
        /**
          * Defines the color of the dialog header. `standard`: Standard color schema. `alternative`: Alternative background with standard color for the text. `primary`: Primary color schema. `secondary`: Secondary color schema. `information`: Information color schema. By default, the primary color will be used.
         */
        "color"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'information';
        /**
          * Send data to the parent component when clicking an element within the dialog to close it. The modal can then be safely removed from the DOM.
         */
        "onDidCloseDialog"?: (event: SeDialogHeaderCustomEvent<any>) => void;
        /**
          * Defaulted to a small padding. When set to `indent`, the header will have an alternative margins and paddings.
          * @deprecated use padding instead
         */
        "option"?: 'indent';
        /**
          * optional property. define the padding around the button `small` small padding: default `large` large padding.
         */
        "padding"?: 'small' | 'large';
    }
    interface SeDivider {
        /**
          * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
         */
        "color"?: 'standard' | 'alternative';
        /**
          * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        "option"?: 'horizontal' | 'vertical' | 'inset';
    }
    interface SeDropdown {
        /**
          * Define the type of even needed to open the modal. By default it's on click. If `hover` is selected, then the dropdown will close when the mouse goes away as well.
         */
        "action"?: 'click' | 'hover';
        "alignment"?: 'end' | 'start' | 'right' | 'left';
        /**
          * By default, when opened, the dropdown will visible to the user even if inside an se-block that scrolls. Use `auto-hide` to automatically hide the dropdown if not visible by the user. For conveniences, this option is automatically set to `true` if the dropdown is inside an `se-table`.
         */
        "autoHide"?: boolean;
        /**
          * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        "maxHeight"?: string;
        /**
          * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        "maxWidth"?: string;
        /**
          * Event emitted when the dropdown has been touched. Every dropdown listen to this event to avoid avoid multiple dropdown open at the same time.
         */
        "onCancelAllDropdown"?: (event: SeDropdownCustomEvent<any>) => void;
        /**
          * Event emitted when the dropdown has been closed.
         */
        "onDidClose"?: (event: SeDropdownCustomEvent<any>) => void;
        /**
          * Event emitted when the dropdown has been opened.
         */
        "onDidOpen"?: (event: SeDropdownCustomEvent<any>) => void;
        /**
          * Defines the preferred vertically align of the dropdown. It will automatically re-position if the there is not enough space. `top`: Position the container with respect to the top side of the trigger element. `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        "verticalAlignment"?: 'top' | 'bottom';
    }
    interface SeFab {
        /**
          * Indicates the color of your main action button . The Default setting is `primary` color. The `alternative` button can also be used.
         */
        "color"?: 'primary' | 'alternative';
        /**
          * Property that determines if an icon is included in the main action button.
         */
        "icon"?: string;
        /**
          * Event emitted to close the tooltip (if there is one) when interacting with the fab button.
         */
        "onCloseTooltips"?: (event: SeFabCustomEvent<any>) => void;
        /**
          * Property that determines the functionality of the FAB. The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB. The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        "option"?: 'speeddial' | 'backtotop';
        /**
          * Indicates if there is an overlay behind the FAB. Used only if in dial mode.
         */
        "overlay"?: boolean;
        /**
          * Property that determines the position of the component. The default setting is `bottom`, rendering a FAB at the bottom right corner. The `top` setting renders the FAB at the top right corner.
         */
        "position"?: 'bottom' | 'top';
    }
    interface SeFabItem {
        /**
          * Property that determines if an icon is included in the floating action button.
         */
        "icon"?: string;
        /**
          * Send the value of the caption to the parent when clicking on the item.
         */
        "onDidClick"?: (event: SeFabItemCustomEvent<any>) => void;
    }
    interface SeFiltration {
        /**
          * Boolean property to indicate if the content will be visible or hidden collapsed = `true` => content is shown collapsed = `false` => content is hidden
         */
        "collapsed"?: boolean;
        /**
          * text to display in the header
         */
        "item"?: any;
        /**
          * Text for the placeholder. the default is `enter text`
         */
        "labelHint"?: string;
        /**
          * Variable to show 'Select all'
         */
        "labelSelectAll"?: string;
        /**
          * Default text to display for viewing less content
         */
        "labelViewLess"?: string;
        /**
          * Default value to display for viewing more content
         */
        "labelViewMore"?: string;
        /**
          * Maximum number of items to be displayed when expanded. Default is `10`
         */
        "maxItems"?: number;
        /**
          * Minimum number of items to be displayed when collapsed. Default is `5`
         */
        "minItems"?: number;
        "onDidSearch"?: (event: SeFiltrationCustomEvent<any>) => void;
        /**
          * Event emitter for callback to select all items
         */
        "onDidSelectAll"?: (event: SeFiltrationCustomEvent<any>) => void;
        /**
          * The search value in the search field. Mostly used to clear the search box when needed.
         */
        "search"?: string;
        /**
          * Optional property to show a search box inside the form
         */
        "searchable"?: boolean;
        /**
          * Boolean property to indicate if there should be a shadow around the box valid values are `true` or `false`
         */
        "shadow"?: boolean;
        /**
          * Optional property to indicate if multiple selections will be made `true` = multiple selection | `false` = single selection
         */
        "showSelectAll"?: boolean;
    }
    interface SeFiltrationSmart {
        /**
          * Object that describes set of data attributes of sections and filters.
         */
        "dataAttrsData"?: FiltrationSmartDataAttrsData;
        /**
          * Normalized data for the filter.
         */
        "filters": FiltrationSmartData;
        /**
          * The header label of filters used in desktop version.
         */
        "headerLabelDesktop"?: string;
        /**
          * The header label of filters used in mobile version.
         */
        "headerLabelMobile"?: string;
        /**
          * Defines if the mobile view is visible.
         */
        "isMobileViewVisible"?: boolean;
        /**
          * Defines maximum height of a facet content in desktop view.
         */
        "maxFacetContentHeight"?: number;
        /**
          * Event that emits list of checked filters.
         */
        "onFilterStateChanged"?: (event: SeFiltrationSmartCustomEvent<FilterEmittedState>) => void;
        /**
          * Event that emits after every filters render.
         */
        "onSeFiltrationSmartDidRender"?: (event: SeFiltrationSmartCustomEvent<any>) => void;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * Defines text of the show products button (in mobile view).
         */
        "showProductsLabel": string;
        /**
          * Defines text of the "View less facets" button at the bottom of the filter.
         */
        "viewLessFacetsLabel": string;
        /**
          * Defines text of the "View less refinements" button in a facet.
         */
        "viewLessRefinementsLabel": string;
        /**
          * Defines text of the "View more facets" button at the bottom of the filter.
         */
        "viewMoreFacetsLabel": string;
        /**
          * Defines text of the "View more refinements" button in a facet.
         */
        "viewMoreRefinementsLabel": string;
        /**
          * Number of facets to show on initial render.
         */
        "visibleFacetsCount"?: number;
        /**
          * Number of refinements per facet to show on initial render.
         */
        "visibleRefinementsPerFacetCount"?: number;
    }
    interface SeFiltrationSmartCheckbox {
        /**
          * Defines if the checkbox is used in mobile view.
         */
        "isMobile"?: boolean;
        /**
          * Event that has info about refinement whose state should be changed. Root component listens to it.
         */
        "onRefinementStateChanged"?: (event: SeFiltrationSmartCheckboxCustomEvent<string>) => void;
        /**
          * Id of the refinement that will be used to find the data in the Root Filter store.
         */
        "refinementId": string;
    }
    interface SeFiltrationSmartDesktopView {
        /**
          * Defines text that will be used as the header of the Filter.
         */
        "headerLabel"?: string;
        /**
          * Defines maximum height of a section content.
         */
        "maxFacetContentHeight"?: number;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * Defines text of the "View less facets" button at the bottom of the filter.
         */
        "viewLessFacetsLabel": string;
        /**
          * Defines text of the "View less refinements" button in a facet.
         */
        "viewLessRefinementsLabel": string;
        /**
          * Defines text of the "View more facets" button at the bottom of the filter.
         */
        "viewMoreFacetsLabel": string;
        /**
          * Defines text of the "View more refinements" button in a facet.
         */
        "viewMoreRefinementsLabel": string;
    }
    interface SeFiltrationSmartFacet {
        /**
          * Facet ID that will be used to retrieve data from store.
         */
        "facetId": string;
        /**
          * Defines if the facet is used in mobile view.
         */
        "isMobile"?: boolean;
        /**
          * Defines maximum height of the content.
         */
        "maxContentHeight"?: number;
        /**
          * Event that has info about facet whose collapsed/expanded state should be changed.  Root Filter component listens to it.
         */
        "onToggleIsSectionExpanded"?: (event: SeFiltrationSmartFacetCustomEvent<string>) => void;
        /**
          * Defines text of the "View less refinements" button.
         */
        "viewLessLabel"?: string;
        /**
          * Defines text of the "View more refinements" button.
         */
        "viewMoreLabel"?: string;
    }
    interface SeFiltrationSmartGroup {
        /**
          * Set mobile view or not
         */
        "isMobile"?: boolean;
        /**
          * Nesting level of the group. Used to determine if the section should be wrapped in another section.
         */
        "level"?: number;
        /**
          * Event that has info about the section whose collapsed/expanded state should be changed.  Root Filter component listens to it.
         */
        "onToggleIsSectionExpanded"?: (event: SeFiltrationSmartGroupCustomEvent<string>) => void;
        /**
          * Id of the section that will be used to find the data in the Root Filter store.
         */
        "sectionId": string;
    }
    interface SeFiltrationSmartMobileView {
        /**
          * The header label of filters.
         */
        "headerLabel"?: string;
        /**
          * Defines if the mobile view is visible.
         */
        "isVisible": boolean;
        /**
          * Event that closes mobile view with two options:  { restore: true } -- closes mobile view and undoes changes made in mobile view  { restore: false } -- closes mobile view and applies changes made in mobile view
         */
        "onToggleMobileView"?: (event: SeFiltrationSmartMobileViewCustomEvent<ToggleMobileViewVisibility>) => void;
        /**
          * Defines text that will be used in the "Reset" button.
         */
        "resetButtonLabel": string;
        /**
          * The text label of the show products button.
         */
        "showProductsLabel": string;
    }
    interface SeFiltrationSmartMobileViewTrigger {
        /**
          * The number of facets in which there are selected refinements.
         */
        "count"?: number;
        /**
          * The text label of the "Show filter" button.
         */
        "label": string;
        /**
          * Event that toggle visibility of the mobile view.
         */
        "onToggleMobileView"?: (event: SeFiltrationSmartMobileViewTriggerCustomEvent<void>) => void;
    }
    interface SeFiltrationSmartResetButton {
        /**
          * Defines if the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Text label of the button.
         */
        "label": string;
        /**
          * Event that reset Smart Filter to initial state.
         */
        "onResetAllClicked"?: (event: SeFiltrationSmartResetButtonCustomEvent<void>) => void;
    }
    interface SeFiltrationSmartTab {
        /**
          * Event that has info about tab whose state should be changed. Root Filter component listens to it.
         */
        "onRefinementStateChanged"?: (event: SeFiltrationSmartTabCustomEvent<string>) => void;
        /**
          * Id of the filter that will be used to find the data in the Root Filter store.
         */
        "refinementId": string;
    }
    interface SeFiltrationSmartViewMoreFacetsButton {
        /**
          * Defines what number should be rendered in the circle inside the button.
         */
        "count": number;
        /**
          * Defines what label should be used inside the button:  true => "show less"  false => "show more"
         */
        "isAllFacetsVisible": boolean;
        /**
          * Event that signals Smart Filter to toggle visibility of all its facets.
         */
        "onToggleViewMoreFacets"?: (event: SeFiltrationSmartViewMoreFacetsButtonCustomEvent<void>) => void;
        /**
          * Defines text of the "View less" button.
         */
        "viewLessLabel": string;
        /**
          * Defines text of the "View more" button.
         */
        "viewMoreLabel": string;
    }
    interface SeFiltrationSmartViewMoreRefinementsButton {
        /**
          * Defines what number should be rendered in the circle inside the button.
         */
        "count"?: number;
        "facetId": string;
        /**
          * Defines what label should be used inside the button:  true => "show less"  false => "show more"
         */
        "isAllRefinementsVisible"?: boolean;
        /**
          * Event that signals Smart Filter to toggle visibility of all its refinements.
         */
        "onToggleViewMoreRefinements"?: (event: SeFiltrationSmartViewMoreRefinementsButtonCustomEvent<string>) => void;
        /**
          * Defines text of the "View less" button.
         */
        "viewLessLabel"?: string;
        /**
          * Defines text of the "View more" button.
         */
        "viewMoreLabel"?: string;
    }
    interface SeFormField {
        /**
          * Optional property that defines if the field displays as a block in it's container. When set to true, the field will be as wide as its container. both field label auto adjust when it set to inline
         */
        "block"?: boolean;
        /**
          * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Defines the text value of the label in your form field.
         */
        "label"?: string;
        /**
          * Optional property to define how to align the label
         */
        "labelAlign"?: 'left' | 'right';
        /**
          * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        "labelWidth"?: string;
        /**
          * Optional property that defines the minumum width after witch the form field will move to stacked mode.
         */
        "minWidth"?: number;
        /**
          * Optional property that defines if the form-filed should not stack even if the container is small (it won't be responsive).
         */
        "noStacking"?: boolean;
        /**
          * Passes form data to the parent component on a click (`checkbox` or `radio`), menu change (`select`), or when the input field loses focus.
         */
        "onDidSubmit"?: (event: SeFormFieldCustomEvent<any>) => void;
        /**
          * Defines the layout of your form field. `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
          * @deprecated use `stacked` property instead
         */
        "option"?: 'inline' | 'stacked';
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px.
         */
        "padding"?: 'none' | 'small' | 'medium';
        /**
          * Determines if the input is required by the application. Set to `false` by default. Setting this value to `true` will render a red asterisk next to your label.
         */
        "required"?: boolean;
        /**
          * Defines the layout of your form field. If `true`, the input field will render bellow the label.
         */
        "stacked"?: boolean;
        /**
          * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * Defines if the field is a text, to add a padding and better align with other fields.
         */
        "textOnly"?: boolean;
        /**
          * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`). `input` is the default type.
         */
        "type"?: 'input' | 'checkbox' | 'radio' | 'select';
        /**
          * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
         */
        "value"?: string;
    }
    interface SeHeader {
        /**
          * Sets the title of your application.
         */
        "appTitle"?: string;
        "disabled"?: boolean;
        /**
          * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        "domain"?: string;
        /**
          * to remove the "Schneider electric" logo at the end of the header.
         */
        "hideSeLogo"?: boolean;
        /**
          * Defines the project name (useful for small projects) that can be used for versioning as well. It will be placed at the right side of the title.
         */
        "project"?: string;
    }
    interface SeIcon {
        /**
          * Optional property that defines if the icon should animate when changing states (rotation for example).
         */
        "animation"?: boolean;
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error'
    | 'information';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Optional property that defines the hover background color of the button. This property is ignored if noHover is set, or if the icon option is not set to "button".
         */
        "hoverColor"?: 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Optional property that defines if the icon should be mirrored.
         */
        "mirror"?: 'horizontal' | 'vertical' | 'both';
        /**
          * Optional property that disables the hover background (only if option property is set to button). If set, this will override the hoverColor property and ignore it.
         */
        "noHover"?: boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option"?: 'button';
        /**
          * Optional property that defines the icon should be rotated.
         */
        "rotate"?: number | string;
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `micro` sets the size to 18px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size"?: 'nano' | 'micro' | 'small' | 'medium' | 'large' | 'xlarge';
    }
    interface SeIconEcostruxure {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color"?: 'standard' | 'inherited';
        /**
          * Sets the size of the EcoStruxure icon.  The default setting is `small`.
         */
        "size"?: 'small' | 'medium';
    }
    interface SeIconFile {
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error'
    | 'information';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option"?: 'button';
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size"?: 'nano' | 'small' | 'medium' | 'large' | 'xlarge';
        /**
          * Text displayed inside the SVG icon. The text cannot be longer than 4 character.
         */
        "value"?: string;
    }
    interface SeIconLifeison {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color"?: 'standard' | 'inherited';
    }
    interface SeIconSchneider {
    }
    interface SeLink {
        /**
          * Determines whether or not the link is disabled.
         */
        "disabled"?: boolean;
        /**
          * Determines whether it's a download link or a url.
         */
        "download"?: boolean;
        /**
          * Adds visual and function properties to your link component. The default setting is `internal`, which redirects you to the specified URL in the same page. The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab.
         */
        "option"?: 'internal' | 'external';
        /**
          * Defines the spacing around the link. `none` is 0px `small` is 4px
         */
        "spacing"?: 'none' | 'small';
        /**
          * Sets :hover and :visited states the same color as main
         */
        "unicolor"?: boolean;
        /**
          * Defines the url the user should get redirected to when clicking on the link.
         */
        "url"?: string;
    }
    interface SeList {
        /**
          * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        "canCollapse"?: boolean;
        /**
          * Defines the style of the list.  The default setting is `classic`.
         */
        "option"?: ListOption;
        /**
          * Defines if the list element should be selected or not.
         */
        "selectedColor"?: 'primary' | 'standard';
    }
    interface SeListGroup {
        /**
          * Defines if list groups can be collapsed, true by default.
         */
        "canCollapse"?: boolean;
        /**
          * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        "collapsed"?: boolean;
        /**
          * Defines the description of the item, placed under its title.
         */
        "description"?: string;
        /**
          * Disable the item for any interaction.
         */
        "disabled"?: boolean;
        /**
          * define the flex behavior of the group
         */
        "flex"?: number;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon"?: string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor"?: 'primary' | 'secondary';
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation"?: number;
        /**
          * Defines the title of the item.
         */
        "item"?: string;
        /**
          * Emitted when the group item is clicked.
         */
        "onDidGroupClick"?: (event: SeListGroupCustomEvent<boolean>) => void;
        /**
          * Emitted when the group item is collapsed/uncollapsed.
         */
        "onDidGroupCollapse"?: (event: SeListGroupCustomEvent<GroupCollapseEvent>) => void;
        /**
          * Defines if the list group should be displayed as selected (if one of its child elements is selected when collapsed).
         */
        "selected"?: boolean;
    }
    interface SeListItem {
        /**
          * Defines the description of the item, placed under its title.
         */
        "description"?: string;
        /**
          * Disable the item for any interaction.
         */
        "disabled"?: boolean;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href"?: string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon"?: string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor"?: | 'standard'
    | 'alternative'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'error';
        /**
          * Defines the title of the item.
         */
        "item"?: string;
        /**
          * Event emitted to notify the list-group component that the selected state has changed.
         */
        "onDidSelectedChange"?: (event: SeListItemCustomEvent<void>) => void;
        /**
          * Defines if the list element should be selected or not.
         */
        "selected"?: boolean;
    }
    interface SeLoading {
        /**
          * Defines the color of the loading spinner.
         */
        "color"?: 'primary' | 'secondary';
        /**
          * Defines if we want the loading to take the full page of the browser. default the browser will stay in the container.
         */
        "fullPage"?: boolean;
        /**
          * Displays the loading icon on screen when set to `true`.
         */
        "loading"?: boolean;
        /**
          * Defines the visual display of the loader. `standard` is the default option, and displays a spinning green circle. `dialog` gives the loading icon a look-and-feel that it is within a popup dialog box.
         */
        "option"?: 'standard' | 'dialog';
        /**
          * Defines ig there is a dimming overlay effect on behind the loading spinner.
         */
        "overlay"?: boolean;
    }
    interface SePagination {
        /**
          * Hide the "go to first page" and "go to last page" icons.
         */
        "hideEdge"?: boolean;
        /**
          * Label used when hover the "Go to first page" icon.
         */
        "labelFirst"?: string;
        /**
          * Label used when hover the "Go to last page" icon.
         */
        "labelLast"?: string;
        /**
          * Label used when hover the "Go to next page" icon.
         */
        "labelNext"?: string;
        /**
          * Text before the number of item per page selection dropdown.
         */
        "labelPerPage"?: string;
        /**
          * Label used when hover the "Go to previous page" icon.
         */
        "labelPrev"?: string;
        /**
          * Text before the page selection dropdown.
         */
        "labelValue"?: string;
        /**
          * Event emitted when the selected page or the number of item per page changed. Return `{value: number; perPage: number;}`.
         */
        "onDidChange"?: (event: SePaginationCustomEvent<PageEvent>) => void;
        /**
          * Number of item per page
         */
        "perPage"?: number;
        /**
          * List of per page options to select from as a string separated by `;`. Default is `"15"` but does not affect the component if not used. ex: `"15;20;25;30"`.
         */
        "perPageList"?: string;
        /**
          * Total number of pages. Used to go to the last page and in the page selection dropdown.
         */
        "total"?: number;
        /**
          * Selected page
         */
        "value"?: number;
    }
    interface SeRadio {
        /**
          * Defines the color of the checkbox. The default setting is `primary`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color"?: 'primary' | 'secondary';
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Defines the label that will display next to the radio button.
         */
        "label"?: string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right`.
         */
        "labelPos"?: 'left' | 'right';
        /**
          * Defines the name of the form field to attach the .
         */
        "name"?: string;
        /**
          * Send the checkbox value to the parent component when clicking on the checkbox.
         */
        "onDidCheck"?: (event: SeRadioCustomEvent<any>) => void;
        /**
          * optional property. define the padding around the button `none` no padding. `small` 4px padding: default `medium` 8px padding. `large` 16px padding.
         */
        "padding"?: 'none' | 'small' | 'medium' | 'large';
        /**
          * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        "required"?: boolean;
        /**
          * Determines whether or not the checkbox is checked when you initialize it. The default setting is `false`. Checked if set to `true`.
         */
        "selected"?: boolean;
        /**
          * Defines the value you want to pass to the parent component when the radio button is checked.
         */
        "value"?: string;
    }
    interface SeRadioGroup {
        /**
          * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        "color"?: 'standard' | 'alternative' | 'primary' | 'secondary';
        /**
          * Defines the direction of the flex element. `row` is the default if used with `se-button`. `column` is the default if used with `se-radio`.
         */
        "direction"?: 'column' | 'row';
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Passes the selected button value to the parent component when clicking on a button in the group.
         */
        "onDidChange"?: (event: SeRadioGroupCustomEvent<any>) => void;
        /**
          * Defines the height of each button in the group. `small` is the default setting, rendering a 32px height and a 14px font size. `nano` sets the height to 24px and the font size to 12px.
         */
        "size"?: 'small' | 'nano';
        /**
          * Specify the currently selected child Radio value..
         */
        "value"?: string;
    }
    interface SeSidemenu {
        "disabled"?: boolean;
        /**
          * Defines the text displayed in the header of the Sidemenu. The default value is `Menu`.
         */
        "label"?: string;
        "link"?: string;
        "onDidNavigationClick"?: (event: SeSidemenuCustomEvent<any>) => void;
        /**
          * When the menu is opened, it will trigger a `toggled` event with `event.detail.state` set to `open`. When the menu is closed, it will trigger a `toggled` event with `event.detail.state` set to `closed`.
         */
        "onToggled"?: (event: SeSidemenuCustomEvent<any>) => void;
    }
    interface SeSidemenuItem {
        /**
          * Defines if the menu item is active or not. The default setting is `false`.
         */
        "active"?: boolean;
        /**
          * Defines the title of the menu item.
         */
        "item"?: string;
        /**
          * Send an event when the sidemenu item changes
         */
        "onDidClick"?: (event: SeSidemenuItemCustomEvent<any>) => void;
    }
    interface SeSkeleton {
        "circle"?: boolean;
        "count"?: number;
        "height"?: any;
        "width"?: any;
    }
    interface SeSlider {
        /**
          * Indicates if your slider is disabled. The default setting is `false`.
         */
        "disabled"?: boolean;
        /**
          * The label of the slider that will be attached to the input.
         */
        "label"?: string;
        /**
          * Indicates the maximum value of your slider. The default value is `100`.
         */
        "max"?: number;
        /**
          * Indicates the minimum value of your slider. The default value is `0`.
         */
        "min"?: number;
        /**
          * Event emitted when the slider has been changed.
         */
        "onDidChange"?: (event: SeSliderCustomEvent<any>) => void;
        /**
          * Indicates the initial value of your slider component when it loads. The default value is `0`.
         */
        "value"?: number;
    }
    interface SeSnackbar {
        /**
          * Defines the text you want your custom action button to read.
         */
        "actionText"?: string;
        /**
          * Displays a "button" to close the snackbar. The default setting is `false`. This will be visible if set to `true`.
         */
        "canClose"?: boolean;
        /**
          * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false. The default setting is 5000.
         */
        "duration"?: number;
        /**
          * The name of the icon you wish to display.  The default icon is an information circle.
         */
        "icon"?: string | 'none';
        /**
          * The content of the message you want the snackbar to display.
         */
        "message"?: string;
        /**
          * Sends information to the parent component when clicking a custom action button.
         */
        "onActionClicked"?: (event: SeSnackbarCustomEvent<void>) => void;
        /**
          * Sends information to the parent component when closing the snackbar.
         */
        "onDidClose"?: (event: SeSnackbarCustomEvent<void>) => void;
        "open"?: boolean;
        /**
          * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
         */
        "type"?: 'success' | 'error' | 'warning' | 'information';
    }
    interface SeStepper {
        /**
          * Defines if the stepper takes the whole space.
         */
        "block"?: boolean;
        /**
          * Sets the background color of your stepper. The default setting is `primary`, implementing a green background for the stepper visual items. The `alternative` setting implements a white background for the stepper visual items. This setting is best used against a gray background.
         */
        "color"?: 'primary' | 'alternative';
        /**
          * Defines if the stepper items is interactive or not. The default setting is `true`, each stepper item can be interacted with. `linear` keeps its same interaction limitation. `false` disabled the interactivness. It overrides the individual stepper item `interactive` property.
         */
        "interactive"?: boolean;
        /**
          * Sets the max width for each stepper label The default setting is `none`.
         */
        "labelMaxWidth"?: string;
        /**
          * Defines if the stepper items must be completed sequentially. The default setting is `true`, each stepper item must be validated before advancing to the next step. `false` allows each step to be selected in any order.
         */
        "linear"?: boolean;
        /**
          * Event to send to the parent component when a stepper item is clicked and next and previous will be clicked. The Stepper Item data is passed to the parent.
         */
        "onDidChange"?: (event: SeStepperCustomEvent<any>) => void;
        /**
          * Defines the spacing/margin around the stepper. `none` is 0px `small` is 4px `medium` is 8px `large` is 16px
         */
        "spacing"?: 'none' | 'small' | 'medium' | 'large';
        /**
          * Sets the labels of the stepper items to be stacked below the steps The default setting is `false`.
         */
        "stacked"?: boolean;
    }
    interface SeStepperItem {
        /**
          * Indicates the content for the currently selected step in the stepper.
         */
        "active"?: boolean;
        /**
          * Indicates if the stepper item is interactive or not. The default setting is `true`, the stepper item can be interacted with. `false` disabled the interactivness.
         */
        "interactive"?: boolean;
        /**
          * Indicates the label for your stepper item.
         */
        "label"?: string;
        /**
          * Event to send to the parent component when a stepper item's data is active true or false. The boolean validated property is passed to the parent.
         */
        "onDidActivate"?: (event: SeStepperItemCustomEvent<any>) => void;
        /**
          * Event to send to the parent component when a stepper item's data is validated.
         */
        "onDidValidate"?: (event: SeStepperItemCustomEvent<any>) => void;
        /**
          * Indicates whether a required item's data has been validated.  Useful if using a form field. When the stepper component is set to linear mode, all stepper items will need to be validated before advancing the stpper.
         */
        "validated"?: boolean;
    }
    interface SeTab {
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option"?: 'anchor' | 'content' | 'navigation';
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow"?: 'compact' | 'stack' | 'scroll';
    }
    interface SeTabItem {
        /**
          * Disable the item for any interaction.
         */
        "disabled"?: boolean;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href"?: string;
        /**
          * Defines if the list element should be selected or not.
         */
        "selected"?: boolean;
    }
    interface SeTabbar {
        /**
          * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background for nav-bars and ultra-light-grey-1 for content. The `alternative` setting renders a white background.
         */
        "color"?: TColor;
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option"?: 'nav' | 'content';
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow"?: 'compact' | 'stack' | 'scroll';
    }
    interface SeTable {
        /**
          * Defines the vertical alignment of table items.
         */
        "alignItems"?: string;
        /**
          * Define if we should show a compact view of the table, vs a version with larger spacing and font
         */
        "compact"?: boolean;
    }
    interface SeTableGroup {
        /**
          * Indicates whether or not the `se-table-group` is selectable.  Set to `false` by default.
         */
        "selectable"?: boolean;
        /**
          * Indicates whether or not the `se-table-group` is selected.  Set to `false` by default.
         */
        "selected"?: boolean;
    }
    interface SeTableGroupHeader {
    }
    interface SeTableItem {
        /**
          * Defines the vertical alignment of a table item.
         */
        "alignItems"?: string;
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable"?: boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex"?: string;
        /**
          * Defines the max-width of a column.
         */
        "maxWidth"?: string;
        /**
          * Defines the min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth"?: string;
        "option"?: 'dropdown' | 'text' | 'custom';
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width"?: string;
    }
    interface SeTableItemHeader {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable"?: boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex"?: string;
        /**
          * Defines the  max-width of a column.
         */
        "maxWidth"?: string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth"?: string;
        /**
          * Event emitted to notify the table-group-header component that the width has changed.
         */
        "onDidWidthChange"?: (event: SeTableItemHeaderCustomEvent<void>) => void;
        /**
          * Optional property defines whether the column is resizable or not. Default value `false` defines column as not resizable `true` defines column is resizable
         */
        "resizable"?: boolean;
        /**
          * Optional property that provides the arrow icon based on which string is provided, and also causes the `clickable` property to `true`. `asc` defines the icon as an upwards arrow in black. `desc` defines the icon as a downwards arrow in black. `none` defines the icon as an upwards arrow in grey.
         */
        "sort"?: 'asc' | 'desc' | 'none';
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width"?: string;
    }
    interface SeTooltip {
        /**
          * @deprecated only `hover` action should be used for tooltips
         */
        "action"?: 'click' | 'hover';
        /**
          * Indicates the color of the tooltip
         */
        "color"?: 'alternative' | 'information' | 'success' | 'warning' | 'error';
        /**
          * Event emitted when the tooltip has been closed.
         */
        "onDidClose"?: (event: SeTooltipCustomEvent<any>) => void;
        /**
          * Event emitted when the tooltip has been opened.
         */
        "onDidOpen"?: (event: SeTooltipCustomEvent<any>) => void;
        /**
          * Indicates the position of your tooltip. The default setting is `bottom`, rendering the tooltip below its parent.
         */
        "position"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Add a delay to display the tooltip in millisecond.
         */
        "showDelay"?: number;
    }
    interface SeTooltipContent {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon"?: string;
    }
    interface SeTooltipFooter {
    }
    interface SeTooltipHeader {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon"?: string;
    }
    interface SeVisualLinear {
        /**
          * Defines the text value of the label in your component.
         */
        "label"?: string;
        /**
          * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
         */
        "option"?: 'inline' | 'stacked';
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage"?: number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor"?: string;
        /**
          * Defines the value of your component.
         */
        "value"?: string;
    }
    interface SeVisualRadial {
        /**
          * Defines the text value of the label in your component.
         */
        "label"?: string;
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage"?: number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor"?: string;
        /**
          * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        "size"?: 'small' | 'large';
        /**
          * Defines the value of your component.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "se-about": SeAbout;
        "se-accessibility-toggle": SeAccessibilityToggle;
        "se-app": SeApp;
        "se-authentication": SeAuthentication;
        "se-banner": SeBanner;
        "se-banner-item": SeBannerItem;
        "se-block": SeBlock;
        "se-block-content": SeBlockContent;
        "se-block-footer": SeBlockFooter;
        "se-block-header": SeBlockHeader;
        "se-breadcrumb": SeBreadcrumb;
        "se-breadcrumb-item": SeBreadcrumbItem;
        "se-button": SeButton;
        "se-carousel": SeCarousel;
        "se-carousel-item": SeCarouselItem;
        "se-carousel-pagination": SeCarouselPagination;
        "se-checkbox": SeCheckbox;
        "se-chip": SeChip;
        "se-container": SeContainer;
        "se-dialog": SeDialog;
        "se-dialog-content": SeDialogContent;
        "se-dialog-footer": SeDialogFooter;
        "se-dialog-header": SeDialogHeader;
        "se-divider": SeDivider;
        "se-dropdown": SeDropdown;
        "se-fab": SeFab;
        "se-fab-item": SeFabItem;
        "se-filtration": SeFiltration;
        "se-filtration-smart": SeFiltrationSmart;
        "se-filtration-smart-checkbox": SeFiltrationSmartCheckbox;
        "se-filtration-smart-desktop-view": SeFiltrationSmartDesktopView;
        "se-filtration-smart-facet": SeFiltrationSmartFacet;
        "se-filtration-smart-group": SeFiltrationSmartGroup;
        "se-filtration-smart-mobile-view": SeFiltrationSmartMobileView;
        "se-filtration-smart-mobile-view-trigger": SeFiltrationSmartMobileViewTrigger;
        "se-filtration-smart-reset-button": SeFiltrationSmartResetButton;
        "se-filtration-smart-tab": SeFiltrationSmartTab;
        "se-filtration-smart-view-more-facets-button": SeFiltrationSmartViewMoreFacetsButton;
        "se-filtration-smart-view-more-refinements-button": SeFiltrationSmartViewMoreRefinementsButton;
        "se-form-field": SeFormField;
        "se-header": SeHeader;
        "se-icon": SeIcon;
        "se-icon-ecostruxure": SeIconEcostruxure;
        "se-icon-file": SeIconFile;
        "se-icon-lifeison": SeIconLifeison;
        "se-icon-schneider": SeIconSchneider;
        "se-link": SeLink;
        "se-list": SeList;
        "se-list-group": SeListGroup;
        "se-list-item": SeListItem;
        "se-loading": SeLoading;
        "se-pagination": SePagination;
        "se-radio": SeRadio;
        "se-radio-group": SeRadioGroup;
        "se-sidemenu": SeSidemenu;
        "se-sidemenu-item": SeSidemenuItem;
        "se-skeleton": SeSkeleton;
        "se-slider": SeSlider;
        "se-snackbar": SeSnackbar;
        "se-stepper": SeStepper;
        "se-stepper-item": SeStepperItem;
        "se-tab": SeTab;
        "se-tab-item": SeTabItem;
        "se-tabbar": SeTabbar;
        "se-table": SeTable;
        "se-table-group": SeTableGroup;
        "se-table-group-header": SeTableGroupHeader;
        "se-table-item": SeTableItem;
        "se-table-item-header": SeTableItemHeader;
        "se-tooltip": SeTooltip;
        "se-tooltip-content": SeTooltipContent;
        "se-tooltip-footer": SeTooltipFooter;
        "se-tooltip-header": SeTooltipHeader;
        "se-visual-linear": SeVisualLinear;
        "se-visual-radial": SeVisualRadial;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "se-about": LocalJSX.SeAbout & JSXBase.HTMLAttributes<HTMLSeAboutElement>;
            "se-accessibility-toggle": LocalJSX.SeAccessibilityToggle & JSXBase.HTMLAttributes<HTMLSeAccessibilityToggleElement>;
            "se-app": LocalJSX.SeApp & JSXBase.HTMLAttributes<HTMLSeAppElement>;
            "se-authentication": LocalJSX.SeAuthentication & JSXBase.HTMLAttributes<HTMLSeAuthenticationElement>;
            "se-banner": LocalJSX.SeBanner & JSXBase.HTMLAttributes<HTMLSeBannerElement>;
            "se-banner-item": LocalJSX.SeBannerItem & JSXBase.HTMLAttributes<HTMLSeBannerItemElement>;
            "se-block": LocalJSX.SeBlock & JSXBase.HTMLAttributes<HTMLSeBlockElement>;
            "se-block-content": LocalJSX.SeBlockContent & JSXBase.HTMLAttributes<HTMLSeBlockContentElement>;
            "se-block-footer": LocalJSX.SeBlockFooter & JSXBase.HTMLAttributes<HTMLSeBlockFooterElement>;
            "se-block-header": LocalJSX.SeBlockHeader & JSXBase.HTMLAttributes<HTMLSeBlockHeaderElement>;
            "se-breadcrumb": LocalJSX.SeBreadcrumb & JSXBase.HTMLAttributes<HTMLSeBreadcrumbElement>;
            "se-breadcrumb-item": LocalJSX.SeBreadcrumbItem & JSXBase.HTMLAttributes<HTMLSeBreadcrumbItemElement>;
            "se-button": LocalJSX.SeButton & JSXBase.HTMLAttributes<HTMLSeButtonElement>;
            "se-carousel": LocalJSX.SeCarousel & JSXBase.HTMLAttributes<HTMLSeCarouselElement>;
            "se-carousel-item": LocalJSX.SeCarouselItem & JSXBase.HTMLAttributes<HTMLSeCarouselItemElement>;
            "se-carousel-pagination": LocalJSX.SeCarouselPagination & JSXBase.HTMLAttributes<HTMLSeCarouselPaginationElement>;
            "se-checkbox": LocalJSX.SeCheckbox & JSXBase.HTMLAttributes<HTMLSeCheckboxElement>;
            "se-chip": LocalJSX.SeChip & JSXBase.HTMLAttributes<HTMLSeChipElement>;
            "se-container": LocalJSX.SeContainer & JSXBase.HTMLAttributes<HTMLSeContainerElement>;
            "se-dialog": LocalJSX.SeDialog & JSXBase.HTMLAttributes<HTMLSeDialogElement>;
            "se-dialog-content": LocalJSX.SeDialogContent & JSXBase.HTMLAttributes<HTMLSeDialogContentElement>;
            "se-dialog-footer": LocalJSX.SeDialogFooter & JSXBase.HTMLAttributes<HTMLSeDialogFooterElement>;
            "se-dialog-header": LocalJSX.SeDialogHeader & JSXBase.HTMLAttributes<HTMLSeDialogHeaderElement>;
            "se-divider": LocalJSX.SeDivider & JSXBase.HTMLAttributes<HTMLSeDividerElement>;
            "se-dropdown": LocalJSX.SeDropdown & JSXBase.HTMLAttributes<HTMLSeDropdownElement>;
            "se-fab": LocalJSX.SeFab & JSXBase.HTMLAttributes<HTMLSeFabElement>;
            "se-fab-item": LocalJSX.SeFabItem & JSXBase.HTMLAttributes<HTMLSeFabItemElement>;
            "se-filtration": LocalJSX.SeFiltration & JSXBase.HTMLAttributes<HTMLSeFiltrationElement>;
            "se-filtration-smart": LocalJSX.SeFiltrationSmart & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartElement>;
            "se-filtration-smart-checkbox": LocalJSX.SeFiltrationSmartCheckbox & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartCheckboxElement>;
            "se-filtration-smart-desktop-view": LocalJSX.SeFiltrationSmartDesktopView & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartDesktopViewElement>;
            "se-filtration-smart-facet": LocalJSX.SeFiltrationSmartFacet & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartFacetElement>;
            "se-filtration-smart-group": LocalJSX.SeFiltrationSmartGroup & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartGroupElement>;
            "se-filtration-smart-mobile-view": LocalJSX.SeFiltrationSmartMobileView & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartMobileViewElement>;
            "se-filtration-smart-mobile-view-trigger": LocalJSX.SeFiltrationSmartMobileViewTrigger & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartMobileViewTriggerElement>;
            "se-filtration-smart-reset-button": LocalJSX.SeFiltrationSmartResetButton & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartResetButtonElement>;
            "se-filtration-smart-tab": LocalJSX.SeFiltrationSmartTab & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartTabElement>;
            "se-filtration-smart-view-more-facets-button": LocalJSX.SeFiltrationSmartViewMoreFacetsButton & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartViewMoreFacetsButtonElement>;
            "se-filtration-smart-view-more-refinements-button": LocalJSX.SeFiltrationSmartViewMoreRefinementsButton & JSXBase.HTMLAttributes<HTMLSeFiltrationSmartViewMoreRefinementsButtonElement>;
            "se-form-field": LocalJSX.SeFormField & JSXBase.HTMLAttributes<HTMLSeFormFieldElement>;
            "se-header": LocalJSX.SeHeader & JSXBase.HTMLAttributes<HTMLSeHeaderElement>;
            "se-icon": LocalJSX.SeIcon & JSXBase.HTMLAttributes<HTMLSeIconElement>;
            "se-icon-ecostruxure": LocalJSX.SeIconEcostruxure & JSXBase.HTMLAttributes<HTMLSeIconEcostruxureElement>;
            "se-icon-file": LocalJSX.SeIconFile & JSXBase.HTMLAttributes<HTMLSeIconFileElement>;
            "se-icon-lifeison": LocalJSX.SeIconLifeison & JSXBase.HTMLAttributes<HTMLSeIconLifeisonElement>;
            "se-icon-schneider": LocalJSX.SeIconSchneider & JSXBase.HTMLAttributes<HTMLSeIconSchneiderElement>;
            "se-link": LocalJSX.SeLink & JSXBase.HTMLAttributes<HTMLSeLinkElement>;
            "se-list": LocalJSX.SeList & JSXBase.HTMLAttributes<HTMLSeListElement>;
            "se-list-group": LocalJSX.SeListGroup & JSXBase.HTMLAttributes<HTMLSeListGroupElement>;
            "se-list-item": LocalJSX.SeListItem & JSXBase.HTMLAttributes<HTMLSeListItemElement>;
            "se-loading": LocalJSX.SeLoading & JSXBase.HTMLAttributes<HTMLSeLoadingElement>;
            "se-pagination": LocalJSX.SePagination & JSXBase.HTMLAttributes<HTMLSePaginationElement>;
            "se-radio": LocalJSX.SeRadio & JSXBase.HTMLAttributes<HTMLSeRadioElement>;
            "se-radio-group": LocalJSX.SeRadioGroup & JSXBase.HTMLAttributes<HTMLSeRadioGroupElement>;
            "se-sidemenu": LocalJSX.SeSidemenu & JSXBase.HTMLAttributes<HTMLSeSidemenuElement>;
            "se-sidemenu-item": LocalJSX.SeSidemenuItem & JSXBase.HTMLAttributes<HTMLSeSidemenuItemElement>;
            "se-skeleton": LocalJSX.SeSkeleton & JSXBase.HTMLAttributes<HTMLSeSkeletonElement>;
            "se-slider": LocalJSX.SeSlider & JSXBase.HTMLAttributes<HTMLSeSliderElement>;
            "se-snackbar": LocalJSX.SeSnackbar & JSXBase.HTMLAttributes<HTMLSeSnackbarElement>;
            "se-stepper": LocalJSX.SeStepper & JSXBase.HTMLAttributes<HTMLSeStepperElement>;
            "se-stepper-item": LocalJSX.SeStepperItem & JSXBase.HTMLAttributes<HTMLSeStepperItemElement>;
            "se-tab": LocalJSX.SeTab & JSXBase.HTMLAttributes<HTMLSeTabElement>;
            "se-tab-item": LocalJSX.SeTabItem & JSXBase.HTMLAttributes<HTMLSeTabItemElement>;
            "se-tabbar": LocalJSX.SeTabbar & JSXBase.HTMLAttributes<HTMLSeTabbarElement>;
            "se-table": LocalJSX.SeTable & JSXBase.HTMLAttributes<HTMLSeTableElement>;
            "se-table-group": LocalJSX.SeTableGroup & JSXBase.HTMLAttributes<HTMLSeTableGroupElement>;
            "se-table-group-header": LocalJSX.SeTableGroupHeader & JSXBase.HTMLAttributes<HTMLSeTableGroupHeaderElement>;
            "se-table-item": LocalJSX.SeTableItem & JSXBase.HTMLAttributes<HTMLSeTableItemElement>;
            "se-table-item-header": LocalJSX.SeTableItemHeader & JSXBase.HTMLAttributes<HTMLSeTableItemHeaderElement>;
            "se-tooltip": LocalJSX.SeTooltip & JSXBase.HTMLAttributes<HTMLSeTooltipElement>;
            "se-tooltip-content": LocalJSX.SeTooltipContent & JSXBase.HTMLAttributes<HTMLSeTooltipContentElement>;
            "se-tooltip-footer": LocalJSX.SeTooltipFooter & JSXBase.HTMLAttributes<HTMLSeTooltipFooterElement>;
            "se-tooltip-header": LocalJSX.SeTooltipHeader & JSXBase.HTMLAttributes<HTMLSeTooltipHeaderElement>;
            "se-visual-linear": LocalJSX.SeVisualLinear & JSXBase.HTMLAttributes<HTMLSeVisualLinearElement>;
            "se-visual-radial": LocalJSX.SeVisualRadial & JSXBase.HTMLAttributes<HTMLSeVisualRadialElement>;
        }
    }
}
