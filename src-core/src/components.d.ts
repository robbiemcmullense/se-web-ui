/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface SeAbout {
    /**
    * The title of your about screen.
    */
    'appTitle': string;
    /**
    * The copyright you would like to display.
    */
    'copyright': string;
    /**
    * The domain you want to display.  If set to `ecostruxture`, it renders an EcoStruxure icon.
    */
    'domain': string;
    /**
    * Sets the background image for your about page.
    */
    'imageUrl': string;
    /**
    * An external link you would like to provide.
    */
    'link': string;
    /**
    * The version number you want to display.
    */
    'version': string;
  }
  interface SeAboutAttributes extends StencilHTMLAttributes {
    /**
    * The title of your about screen.
    */
    'appTitle'?: string;
    /**
    * The copyright you would like to display.
    */
    'copyright'?: string;
    /**
    * The domain you want to display.  If set to `ecostruxture`, it renders an EcoStruxure icon.
    */
    'domain'?: string;
    /**
    * Sets the background image for your about page.
    */
    'imageUrl'?: string;
    /**
    * An external link you would like to provide.
    */
    'link'?: string;
    /**
    * The version number you want to display.
    */
    'version'?: string;
  }

  interface SeApp {}
  interface SeAppAttributes extends StencilHTMLAttributes {}

  interface SeAuthentication {
    /**
    * The title of your authentication screen.
    */
    'appTitle': string;
    /**
    * The copyright you would like to display.
    */
    'copyright': string;
    /**
    * The domain you want to display.  If set to `ecostruxture`, it renders an EcoStruxure icon.
    */
    'domain': string;
    /**
    * If set to `true`, hides the authentication screen.
    */
    'hide': boolean;
    /**
    * Sets the background image for your authentication screen.
    */
    'imageUrl': string;
    /**
    * An external link you would like to provide.
    */
    'link': string;
    /**
    * A logo that you wish to display.
    */
    'logo': string;
    /**
    * The version number you want to display.
    */
    'version': string;
  }
  interface SeAuthenticationAttributes extends StencilHTMLAttributes {
    /**
    * The title of your authentication screen.
    */
    'appTitle'?: string;
    /**
    * The copyright you would like to display.
    */
    'copyright'?: string;
    /**
    * The domain you want to display.  If set to `ecostruxture`, it renders an EcoStruxure icon.
    */
    'domain'?: string;
    /**
    * If set to `true`, hides the authentication screen.
    */
    'hide'?: boolean;
    /**
    * Sets the background image for your authentication screen.
    */
    'imageUrl'?: string;
    /**
    * An external link you would like to provide.
    */
    'link'?: string;
    /**
    * A logo that you wish to display.
    */
    'logo'?: string;
    /**
    * The version number you want to display.
    */
    'version'?: string;
  }

  interface SeButton {
    /**
    * Optional property that defines if the button has caption/tooltip text .Used with mini-fab
    */
    'caption': string;
    /**
    * Optional property that defines the background color of the button. The default setting is `standard`.
    */
    'color': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Optional property that determines if your button includes an icon.
    */
    'icon': string;
    /**
    * Optional property to change the color of the icon when needed. Used for the user dropdown in the header for example.
    */
    'iconColor': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `login` and `signup` options are specific for "Login" and "Sign Up" buttons in your application.
    */
    'option': 'flat' | 'raised' | 'outline' | 'login' | 'signup' | 'inherit' |'fab'|'minifab';
    /**
    * Optional property that defines if the button should be shown as selected. Used with `se-radio`
    */
    'selected': boolean;
    /**
    * Setd the disabled property for your button from the parent component.
    */
    'setDisabled': (val: boolean) => void;
    /**
    * Indicates if the button is part of a group of buttons within the `se-radio` component.
    */
    'setGrouped': () => void;
    /**
    * Optional type property of the button. `button`	The button is a clickable button (default) `submit`	The button is a submit button (submits form-data) `reset`	The button is a reset button (resets the form-data to its initial values)
    */
    'type': 'button' |'submit' |'reset';
    /**
    * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
    */
    'value': string;
  }
  interface SeButtonAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines if the button has caption/tooltip text .Used with mini-fab
    */
    'caption'?: string;
    /**
    * Optional property that defines the background color of the button. The default setting is `standard`.
    */
    'color'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Optional property that determines if your button includes an icon.
    */
    'icon'?: string;
    /**
    * Optional property to change the color of the icon when needed. Used for the user dropdown in the header for example.
    */
    'iconColor'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    'onDidClick'?: (event: CustomEvent<any>) => void;
    /**
    * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `login` and `signup` options are specific for "Login" and "Sign Up" buttons in your application.
    */
    'option'?: 'flat' | 'raised' | 'outline' | 'login' | 'signup' | 'inherit' |'fab'|'minifab';
    /**
    * Optional property that defines if the button should be shown as selected. Used with `se-radio`
    */
    'selected'?: boolean;
    /**
    * Optional type property of the button. `button`	The button is a clickable button (default) `submit`	The button is a submit button (submits form-data) `reset`	The button is a reset button (resets the form-data to its initial values)
    */
    'type'?: 'button' |'submit' |'reset';
    /**
    * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
    */
    'value'?: string;
  }

  interface SeCheckbox {
    /**
    * Defines the color of the checkbox.
    */
    'color': 'primary' | 'secondary';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * The label of the checkbox that will be attached to the box.
    */
    'label': string;
    /**
    * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
    */
    'required': boolean;
    /**
    * Determines whether or not the checkbox is checked when you initialize it.  Checked if `true`.
    */
    'selected': boolean;
    /**
    * Set the required property on the checkbox element.
    */
    'setRequired': () => void;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value': string;
  }
  interface SeCheckboxAttributes extends StencilHTMLAttributes {
    /**
    * Defines the color of the checkbox.
    */
    'color'?: 'primary' | 'secondary';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * The label of the checkbox that will be attached to the box.
    */
    'label'?: string;
    /**
    * Send the checkbox value to the parent component when clicking on the checkbox.
    */
    'onDidCheck'?: (event: CustomEvent) => void;
    /**
    * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
    */
    'required'?: boolean;
    /**
    * Determines whether or not the checkbox is checked when you initialize it.  Checked if `true`.
    */
    'selected'?: boolean;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value'?: string;
  }

  interface SeChip {
    /**
    * Indicates whether or not the chip has a close button.  Set to `true` by default.
    */
    'canClose': boolean;
    /**
    * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
    */
    'color': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * The text you want to display in your chip.
    */
    'value': string;
  }
  interface SeChipAttributes extends StencilHTMLAttributes {
    /**
    * Indicates whether or not the chip has a close button.  Set to `true` by default.
    */
    'canClose'?: boolean;
    /**
    * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
    */
    'color'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Send the chip value to the parent component when clicking the close button of a chip.
    */
    'onDidClose'?: (event: CustomEvent) => void;
    /**
    * The text you want to display in your chip.
    */
    'value'?: string;
  }

  interface SeContainer {
    /**
    * Defines the color of the background of the container. The default is transparent, reflecting the parent element's color. `standard` is a light gray. `alternative` is a white background.
    */
    'color': "standard" | "alternative";
    /**
    * When in `display="grid"`, defines the min width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`
    */
    'columnSize': string;
    /**
    * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
    */
    'direction': "column" | "row";
    /**
    * Defines how to display the element. `flex` is the default display. `block` will set each widget to be as large and high as it's content. Selecting this display will automatically configure each child widget in "display: block" as well.
    */
    'display': "flex" | "block" | "grid";
    /**
    * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. `widget` adds a small spacing all around the container so that all widgets are spaced with the same distance. This option automatically sets the color property to `standard` (gray). `centered` centers the container so the content does not exceed a maximum width. `card` adds a larger spacing and sets the color property to `alternative` (white).
    */
    'option': "fill" | "widget" | "card" | "centered";
    /**
    * In specific cases, it may be necessary to define the container with an absolute position (inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
    */
    'position': "relative" | "absolute";
    /**
    * When in `display="grid"`, defines the height of each widget.
    */
    'rowSize': string;
  }
  interface SeContainerAttributes extends StencilHTMLAttributes {
    /**
    * Defines the color of the background of the container. The default is transparent, reflecting the parent element's color. `standard` is a light gray. `alternative` is a white background.
    */
    'color'?: "standard" | "alternative";
    /**
    * When in `display="grid"`, defines the min width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`
    */
    'columnSize'?: string;
    /**
    * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
    */
    'direction'?: "column" | "row";
    /**
    * Defines how to display the element. `flex` is the default display. `block` will set each widget to be as large and high as it's content. Selecting this display will automatically configure each child widget in "display: block" as well.
    */
    'display'?: "flex" | "block" | "grid";
    /**
    * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. `widget` adds a small spacing all around the container so that all widgets are spaced with the same distance. This option automatically sets the color property to `standard` (gray). `centered` centers the container so the content does not exceed a maximum width. `card` adds a larger spacing and sets the color property to `alternative` (white).
    */
    'option'?: "fill" | "widget" | "card" | "centered";
    /**
    * In specific cases, it may be necessary to define the container with an absolute position (inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
    */
    'position'?: "relative" | "absolute";
    /**
    * When in `display="grid"`, defines the height of each widget.
    */
    'rowSize'?: string;
  }

  interface SeDialogContent {
    /**
    * Indicates an icon you want to display in your dialog.
    */
    'icon': string;
    /**
    * Indicates what color schema you want to render in your dialog.
    */
    'iconColor': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * When set to `fill`, content will fill the whole space of the dialog.
    */
    'option': 'fill';
  }
  interface SeDialogContentAttributes extends StencilHTMLAttributes {
    /**
    * Indicates an icon you want to display in your dialog.
    */
    'icon'?: string;
    /**
    * Indicates what color schema you want to render in your dialog.
    */
    'iconColor'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * When set to `fill`, content will fill the whole space of the dialog.
    */
    'option'?: 'fill';
  }

  interface SeDialogFooter {}
  interface SeDialogFooterAttributes extends StencilHTMLAttributes {}

  interface SeDialogHeader {
    /**
    * Define the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema.
    */
    'color': 'alternative' | 'primary';
  }
  interface SeDialogHeaderAttributes extends StencilHTMLAttributes {
    /**
    * Define the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema.
    */
    'color'?: 'alternative' | 'primary';
  }

  interface SeDialog {
    /**
    * Emit the `backdrop` event from the dialog's parent component.
    */
    'backdropClicked': () => void;
    /**
    * option to enable click on backdrop (`true`) or (`false`).  Default setting is `true`.
    */
    'canBackdrop': boolean;
    /**
    * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
    */
    'color': 'alternative' | 'primary';
    /**
    * Indicates whether or not the dialog is open (`true`) or closed (`false`).  Default setting is `false`.
    */
    'open': boolean;
    /**
    * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
    */
    'size': "small" | "medium" | "large" | "fill";
  }
  interface SeDialogAttributes extends StencilHTMLAttributes {
    /**
    * option to enable click on backdrop (`true`) or (`false`).  Default setting is `true`.
    */
    'canBackdrop'?: boolean;
    /**
    * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
    */
    'color'?: 'alternative' | 'primary';
    /**
    * Send data to the parent component when the backdrop is clicked.
    */
    'onBackdrop'?: (event: CustomEvent<any>) => void;
    /**
    * Send data to the parent component when clicking an element within the dialog to close it. The modal can be safely removed from the DOM.
    */
    'onDidClose'?: (event: CustomEvent<any>) => void;
    /**
    * Indicates whether or not the dialog is open (`true`) or closed (`false`).  Default setting is `false`.
    */
    'open'?: boolean;
    /**
    * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
    */
    'size'?: "small" | "medium" | "large" | "fill";
  }

  interface SeDivider {
    /**
    * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
    */
    'color': "standard" | "alternative";
    /**
    * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
    */
    'option': "horizontal" | "vertical" | "inset";
  }
  interface SeDividerAttributes extends StencilHTMLAttributes {
    /**
    * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
    */
    'color'?: "standard" | "alternative";
    /**
    * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
    */
    'option'?: "horizontal" | "vertical" | "inset";
  }

  interface SeDropdown {
    /**
    * Define how to align the dropdown container. `left`: Position the container regarding to the left side of the trigger element. `right`: Position the container regarding to the right side of the trigger element.
    */
    'alignment': 'left' | 'right';
    /**
    * Method to close the dropdown from the outside.
    */
    'close': () => void;
    /**
    * Method to open the dropdown from the outside.
    */
    'open': () => void;
  }
  interface SeDropdownAttributes extends StencilHTMLAttributes {
    /**
    * Define how to align the dropdown container. `left`: Position the container regarding to the left side of the trigger element. `right`: Position the container regarding to the right side of the trigger element.
    */
    'alignment'?: 'left' | 'right';
    /**
    * Event emitted when the dropdown has been closed.
    */
    'onDidClose'?: (event: CustomEvent) => void;
    /**
    * Event emitted when the dropdown has been opened.
    */
    'onDidOpen'?: (event: CustomEvent) => void;
  }

  interface SeFab {
    /**
    * Indicates the color of your main action button . Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
    */
    'color': 'primary' | 'alternative';
    'getIcon': () => any;
    /**
    * Property that determines  icon included in the main action button.
    */
    'icon': string;
    /**
    * Property that determines  icon included in the main action button.
    */
    'option': 'speeddial' | 'backtotop';
    /**
    * Property that determines position of main action button.   Default setting is `bottom`, rendering a FAB at bottom right corner. The `top` setting renders  FAB at top right corner.
    */
    'position': 'bottom' | 'top';
    /**
    * Method to toggle(show/hide) the mini action buttons.
    */
    'toggleAction': () => void;
  }
  interface SeFabAttributes extends StencilHTMLAttributes {
    /**
    * Indicates the color of your main action button . Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
    */
    'color'?: 'primary' | 'alternative';
    /**
    * Property that determines  icon included in the main action button.
    */
    'icon'?: string;
    /**
    * Property that determines  icon included in the main action button.
    */
    'option'?: 'speeddial' | 'backtotop';
    /**
    * Property that determines position of main action button.   Default setting is `bottom`, rendering a FAB at bottom right corner. The `top` setting renders  FAB at top right corner.
    */
    'position'?: 'bottom' | 'top';
  }

  interface SeFormField {
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Defines the text value of the label in your form field.
    */
    'label': string;
    /**
    * Defines the layout of your form field. `inline` is the default option and is always applied if the type is set to "checkbox".  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
    */
    'option': 'inline' | 'stacked';
    /**
    * Determines if the input is required by the application. Set to `false` by default. Setting this value to "true" will render a red asterisk next to your label.
    */
    'required': boolean;
    /**
    * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
    */
    'status': 'error' | 'warning' | 'success';
    /**
    * Defines whether the form field's input is a text field (input), a checkbox (checkbox), or a dropdown menu (select). `input` is the default type.
    */
    'type': 'input' | 'checkbox' | 'radio' | 'select';
    /**
    * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
    */
    'value': string;
  }
  interface SeFormFieldAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Defines the text value of the label in your form field.
    */
    'label'?: string;
    /**
    * Passes form data to the parent component on a click (checkbox), menu change (select), or when the input field loses focus.
    */
    'onDidSubmit'?: (event: CustomEvent) => void;
    /**
    * Defines the layout of your form field. `inline` is the default option and is always applied if the type is set to "checkbox".  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
    */
    'option'?: 'inline' | 'stacked';
    /**
    * Determines if the input is required by the application. Set to `false` by default. Setting this value to "true" will render a red asterisk next to your label.
    */
    'required'?: boolean;
    /**
    * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
    */
    'status'?: 'error' | 'warning' | 'success';
    /**
    * Defines whether the form field's input is a text field (input), a checkbox (checkbox), or a dropdown menu (select). `input` is the default type.
    */
    'type'?: 'input' | 'checkbox' | 'radio' | 'select';
    /**
    * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
    */
    'value'?: string;
  }

  interface SeHeader {
    /**
    * Sets the title of your application.
    */
    'appTitle': string;
    /**
    * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
    */
    'domain': string;
    /**
    * Defines the project name (useful for small project) that can be used for versioning as well. It will be placed at the right side of the title.
    */
    'project': string;
  }
  interface SeHeaderAttributes extends StencilHTMLAttributes {
    /**
    * Sets the title of your application.
    */
    'appTitle'?: string;
    /**
    * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
    */
    'domain'?: string;
    /**
    * Defines the project name (useful for small project) that can be used for versioning as well. It will be placed at the right side of the title.
    */
    'project'?: string;
  }

  interface SeIconEcostruxure {
    /**
    * Sets the size of the EcoStruxure icon.  The default setting is `small`.
    */
    'size': "small" | "medium";
  }
  interface SeIconEcostruxureAttributes extends StencilHTMLAttributes {
    /**
    * Sets the size of the EcoStruxure icon.  The default setting is `small`.
    */
    'size'?: "small" | "medium";
  }

  interface SeIconLifeison {
    /**
    * Define the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
    */
    'color': "standard" | "inherited";
  }
  interface SeIconLifeisonAttributes extends StencilHTMLAttributes {
    /**
    * Define the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
    */
    'color'?: "standard" | "inherited";
  }

  interface SeIconSchneider {}
  interface SeIconSchneiderAttributes extends StencilHTMLAttributes {}

  interface SeIcon {
    /**
    * Optional property that defines the background color of the button. The default color will be inherited from its parent.
    */
    'color': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property to define if the icon should act as a button (clickable).
    */
    'option': 'button';
    /**
    * Defines the size of an icon. The default size is `small` (24px). `medium` is 36px, and `large` is 63px.
    */
    'size': "small" | "medium" | "large";
  }
  interface SeIconAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines the background color of the button. The default color will be inherited from its parent.
    */
    'color'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property to define if the icon should act as a button (clickable).
    */
    'option'?: 'button';
    /**
    * Defines the size of an icon. The default size is `small` (24px). `medium` is 36px, and `large` is 63px.
    */
    'size'?: "small" | "medium" | "large";
  }

  interface SeLink {
    /**
    * Determines whether or not the link is disabled.
    */
    'disabled': boolean;
    /**
    * Default setting is `internal`. The `external` setting adds an underline to the link, and opens the link in a new web browser tab.
    */
    'type': 'internal' | 'external';
    /**
    * Defines the url the user should get redirected to when clicking on the link.
    */
    'url': string;
  }
  interface SeLinkAttributes extends StencilHTMLAttributes {
    /**
    * Determines whether or not the link is disabled.
    */
    'disabled'?: boolean;
    /**
    * Default setting is `internal`. The `external` setting adds an underline to the link, and opens the link in a new web browser tab.
    */
    'type'?: 'internal' | 'external';
    /**
    * Defines the url the user should get redirected to when clicking on the link.
    */
    'url'?: string;
  }

  interface SeListGroup {
    /**
    * Defines if list groups can be collapsed, true by default.
    */
    'canCollapse': boolean;
    /**
    * Defines if the item group is collapsed/closed. The `se-list-group` cannot be selected from the outside.
    */
    'collapsed': boolean;
    /**
    * Defines the description of the item, placed under its title.
    */
    'description': string;
    /**
    * Places an icon on the left side of the item list.
    */
    'icon': string;
    /**
    * Optional property to define the color of the icon. The default color will be inherited from it's parent.
    */
    'iconColor': "primary" | "secondary";
    /**
    * Define the group indentation to add paddings to the list item (used with multiple list groups).
    */
    'indentation': number;
    /**
    * Defines the title of the item.
    */
    'item': string;
    /**
    * Defines the theme of the list. This them will be handled and modified by the parent element.
    */
    'option': "nav" | "classic" | "dropdown" | "treeview" | "headline";
    /**
    * Defines if the list group should be displayed as selected (if one of its child is selected when collapsed).
    */
    'selected': boolean;
  }
  interface SeListGroupAttributes extends StencilHTMLAttributes {
    /**
    * Defines if list groups can be collapsed, true by default.
    */
    'canCollapse'?: boolean;
    /**
    * Defines if the item group is collapsed/closed. The `se-list-group` cannot be selected from the outside.
    */
    'collapsed'?: boolean;
    /**
    * Defines the description of the item, placed under its title.
    */
    'description'?: string;
    /**
    * Places an icon on the left side of the item list.
    */
    'icon'?: string;
    /**
    * Optional property to define the color of the icon. The default color will be inherited from it's parent.
    */
    'iconColor'?: "primary" | "secondary";
    /**
    * Define the group indentation to add paddings to the list item (used with multiple list groups).
    */
    'indentation'?: number;
    /**
    * Defines the title of the item.
    */
    'item'?: string;
    /**
    * Defines the theme of the list. This them will be handled and modified by the parent element.
    */
    'option'?: "nav" | "classic" | "dropdown" | "treeview" | "headline";
    /**
    * Defines if the list group should be displayed as selected (if one of its child is selected when collapsed).
    */
    'selected'?: boolean;
  }

  interface SeListItem {
    /**
    * Defines the description of the item. placed under its title.
    */
    'description': string;
    /**
    * Places an icon on the left side of the item list.
    */
    'icon': string;
    /**
    * Optional property to define the color of the icon. The default color will be inherited from it's parent.
    */
    'iconColor': "standard" | "disable" | "primary" | "warning" | "error";
    /**
    * Defines the group indentation to add paddings to the list item (used with multiple list groups).
    */
    'indentation': number;
    /**
    * Defines the title of the item.
    */
    'item': string;
    /**
    * Define the theme of the list. This them will be handled and modified by the parent element.
    */
    'option': "nav" | "classic" | "dropdown" | "treeview";
    /**
    * Defines if the list element should be selected or not.
    */
    'selected': boolean;
  }
  interface SeListItemAttributes extends StencilHTMLAttributes {
    /**
    * Defines the description of the item. placed under its title.
    */
    'description'?: string;
    /**
    * Places an icon on the left side of the item list.
    */
    'icon'?: string;
    /**
    * Optional property to define the color of the icon. The default color will be inherited from it's parent.
    */
    'iconColor'?: "standard" | "disable" | "primary" | "warning" | "error";
    /**
    * Defines the group indentation to add paddings to the list item (used with multiple list groups).
    */
    'indentation'?: number;
    /**
    * Defines the title of the item.
    */
    'item'?: string;
    /**
    * Event emitted to notify the item-group that the selected state has changed.
    */
    'onDidSelectedChange'?: (event: CustomEvent<void>) => void;
    /**
    * Define the theme of the list. This them will be handled and modified by the parent element.
    */
    'option'?: "nav" | "classic" | "dropdown" | "treeview";
    /**
    * Defines if the list element should be selected or not.
    */
    'selected'?: boolean;
  }

  interface SeList {
    /**
    * Defines if list groups can be collapsed, true by default.
    */
    'canCollapse': boolean;
    /**
    * Defines the style of the list.  The default setting is `classic`.
    */
    'option': "nav" | "classic" | "dropdown" | "treeview" | "headline";
  }
  interface SeListAttributes extends StencilHTMLAttributes {
    /**
    * Defines if list groups can be collapsed, true by default.
    */
    'canCollapse'?: boolean;
    /**
    * Defines the style of the list.  The default setting is `classic`.
    */
    'option'?: "nav" | "classic" | "dropdown" | "treeview" | "headline";
  }

  interface SeLoading {
    /**
    * Displays the loading icon on screen when set to `true`.
    */
    'loading': boolean;
  }
  interface SeLoadingAttributes extends StencilHTMLAttributes {
    /**
    * Displays the loading icon on screen when set to `true`.
    */
    'loading'?: boolean;
  }

  interface SeRadioGroup {
    /**
    * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
    */
    'color': 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Defines the functionality of your button group. `checkbox` option allows all buttons in the group to be selected. `radio` option (default) indicates that only one button in the group can be selected at a time.
    */
    'option': 'checkbox' | 'radio';
    /**
    * Defines the selected values of the array.
    */
    'value': string | string[];
  }
  interface SeRadioGroupAttributes extends StencilHTMLAttributes {
    /**
    * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
    */
    'color'?: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Passes the selected button value to the parent component when clicking on a button in the group.
    */
    'onDidChange'?: (event: CustomEvent) => void;
    /**
    * Defines the functionality of your button group. `checkbox` option allows all buttons in the group to be selected. `radio` option (default) indicates that only one button in the group can be selected at a time.
    */
    'option'?: 'checkbox' | 'radio';
    /**
    * Defines the selected values of the array.
    */
    'value'?: string | string[];
  }

  interface SeRadioOnOff {
    /**
    * Defines the background color of the button. Default is `standard`, rendering a light gray background color.
    */
    'color': 'standard' | 'alternative';
    /**
    * Optional property that defines if the radio on/off switch is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Defines the visual appearance of the on/off radio switch. `default` is the default option. Use `header` if the on/off radio switch is within a header element to reduce its visual height.
    */
    'option': 'default' | 'header';
    /**
    * Defines the text the user will see for the "off" or "inactive" part of the radio switch.  Set to `OFF` by default.
    */
    'textOff': string;
    /**
    * Defines the text the user will see for the "on" or "active" part of the radio switch.  Set to `ON` by default.
    */
    'textOn': string;
    /**
    * Determines whether or not the switch is "on" or "off" when you initialize it. Sets the switch to the "on" position if `true`.
    */
    'value': boolean;
  }
  interface SeRadioOnOffAttributes extends StencilHTMLAttributes {
    /**
    * Defines the background color of the button. Default is `standard`, rendering a light gray background color.
    */
    'color'?: 'standard' | 'alternative';
    /**
    * Optional property that defines if the radio on/off switch is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Passes the current state (true or false) to the parent component when clicking on a button in the group.
    */
    'onDidChange'?: (event: CustomEvent<any>) => void;
    /**
    * Defines the visual appearance of the on/off radio switch. `default` is the default option. Use `header` if the on/off radio switch is within a header element to reduce its visual height.
    */
    'option'?: 'default' | 'header';
    /**
    * Defines the text the user will see for the "off" or "inactive" part of the radio switch.  Set to `OFF` by default.
    */
    'textOff'?: string;
    /**
    * Defines the text the user will see for the "on" or "active" part of the radio switch.  Set to `ON` by default.
    */
    'textOn'?: string;
    /**
    * Determines whether or not the switch is "on" or "off" when you initialize it. Sets the switch to the "on" position if `true`.
    */
    'value'?: boolean;
  }

  interface SeRadioSwitch {
    /**
    * Optional property that defines if the switch is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * Determines whether or not the switch is "on" or "off" when you initialize it. Sets the switch to the "on" position if `true`.
    */
    'value': boolean;
  }
  interface SeRadioSwitchAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines if the switch is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * Send the state of the switch (true/false) to the parent component when it is toggled.
    */
    'onDidChange'?: (event: CustomEvent) => void;
    /**
    * Determines whether or not the switch is "on" or "off" when you initialize it. Sets the switch to the "on" position if `true`.
    */
    'value'?: boolean;
  }

  interface SeRadio {
    /**
    * Defines the color of the checkbox.
    */
    'color': 'primary' | 'secondary';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled': boolean;
    /**
    * The label of the checkbox that will be attached to the box.
    */
    'label': string;
    /**
    * Adds a red asterisk if the radio button is required when used in a form field.  Default is `false`.
    */
    'required': boolean;
    /**
    * Determines whether or not the checkbox is checked when you initialize it.  Checked if `true`.
    */
    'selected': boolean;
    /**
    * Set the required property on the radio button element.
    */
    'setRequired': () => void;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value': string;
  }
  interface SeRadioAttributes extends StencilHTMLAttributes {
    /**
    * Defines the color of the checkbox.
    */
    'color'?: 'primary' | 'secondary';
    /**
    * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
    */
    'disabled'?: boolean;
    /**
    * The label of the checkbox that will be attached to the box.
    */
    'label'?: string;
    /**
    * Send the checkbox value to the parent component when clicking on the checkbox.
    */
    'onDidCheck'?: (event: CustomEvent) => void;
    /**
    * Adds a red asterisk if the radio button is required when used in a form field.  Default is `false`.
    */
    'required'?: boolean;
    /**
    * Determines whether or not the checkbox is checked when you initialize it.  Checked if `true`.
    */
    'selected'?: boolean;
    /**
    * The value you want to pass to the parent component when the checkbox is checked.
    */
    'value'?: string;
  }

  interface SeSidemenuItem {
    /**
    * Defines if the menu item is active or not.
    */
    'active': boolean;
    /**
    * Defines the title of the menu item.
    */
    'item': string;
  }
  interface SeSidemenuItemAttributes extends StencilHTMLAttributes {
    /**
    * Defines if the menu item is active or not.
    */
    'active'?: boolean;
    /**
    * Defines the title of the menu item.
    */
    'item'?: string;
  }

  interface SeSidemenu {
    /**
    * Overrides the default "Menu" label.
    */
    'label': string;
    'toggle': () => void;
  }
  interface SeSidemenuAttributes extends StencilHTMLAttributes {
    /**
    * Overrides the default "Menu" label.
    */
    'label'?: string;
  }

  interface SeSlider {
    /**
    * Indicates the disabled property of your slider.
    */
    'disabled': boolean;
    /**
    * Indicates the maximum value of your slider.
    */
    'max': number;
    /**
    * Indicates the minimum value of your slider.
    */
    'min': number;
    /**
    * Set the disabled property for slider component.
    */
    'setDisabled': (val: boolean) => void;
  }
  interface SeSliderAttributes extends StencilHTMLAttributes {
    /**
    * Indicates the disabled property of your slider.
    */
    'disabled'?: boolean;
    /**
    * Indicates the maximum value of your slider.
    */
    'max'?: number;
    /**
    * Indicates the minimum value of your slider.
    */
    'min'?: number;
    /**
    * Event emitted when the slider has been changed.
    */
    'onDidChange'?: (event: CustomEvent<any>) => void;
  }

  interface SeSnackbar {
    /**
    * Display a close "button".  Visible by default.
    */
    'canClose': boolean;
    /**
    * Defines the text you want your "close button" to read.  Default text is `dismiss`.
    */
    'closeText': string;
    /**
    * The name of the icon you wish to display.  The default icon is an information circle.
    */
    'icon': string;
    /**
    * The content of the message you want the snackbar to display.
    */
    'message': string;
    /**
    * Indicates if the snackbar is open.  Set to `false` (closed) by default.
    */
    'open': boolean;
    /**
    * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
    */
    'type': 'success' | 'error' | 'warning' | 'information';
  }
  interface SeSnackbarAttributes extends StencilHTMLAttributes {
    /**
    * Display a close "button".  Visible by default.
    */
    'canClose'?: boolean;
    /**
    * Defines the text you want your "close button" to read.  Default text is `dismiss`.
    */
    'closeText'?: string;
    /**
    * The name of the icon you wish to display.  The default icon is an information circle.
    */
    'icon'?: string;
    /**
    * The content of the message you want the snackbar to display.
    */
    'message'?: string;
    /**
    * Send information to the parent component when closing the snackbar.
    */
    'onDidClose'?: (event: CustomEvent) => void;
    /**
    * Indicates if the snackbar is open.  Set to `false` (closed) by default.
    */
    'open'?: boolean;
    /**
    * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
    */
    'type'?: 'success' | 'error' | 'warning' | 'information';
  }

  interface SeTabbar {
    /**
    * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
    */
    'color': 'primary' | 'alternative';
  }
  interface SeTabbarAttributes extends StencilHTMLAttributes {
    /**
    * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
    */
    'color'?: 'primary' | 'alternative';
  }

  interface SeTooltipContent {
    /**
    * Indicates an icon you want to display in your tooltip.
    */
    'icon': string;
  }
  interface SeTooltipContentAttributes extends StencilHTMLAttributes {
    /**
    * Indicates an icon you want to display in your tooltip.
    */
    'icon'?: string;
  }

  interface SeTooltipFooter {}
  interface SeTooltipFooterAttributes extends StencilHTMLAttributes {}

  interface SeTooltipHeader {
    /**
    * Indicates an icon you want to display in your tooltip.
    */
    'icon': string;
  }
  interface SeTooltipHeaderAttributes extends StencilHTMLAttributes {
    /**
    * Indicates an icon you want to display in your tooltip.
    */
    'icon'?: string;
  }

  interface SeTooltip {
    /**
    * Indicates the action of your tooltip.
    */
    'action': "click" | "hover";
    /**
    * Method to close the tooltip from the outside.
    */
    'close': () => void;
    /**
    * Method to open the tooltip from the outside.
    */
    'open': () => void;
    /**
    * Indicates the position color of your tooltip.
    */
    'position': "top" | "bottom" | "left" | "right";
  }
  interface SeTooltipAttributes extends StencilHTMLAttributes {
    /**
    * Indicates the action of your tooltip.
    */
    'action'?: "click" | "hover";
    /**
    * Event emitted when the tooltip has been closed.
    */
    'onDidClose'?: (event: CustomEvent) => void;
    /**
    * Event emitted when the tooltip has been opened.
    */
    'onDidOpen'?: (event: CustomEvent) => void;
    /**
    * Indicates the position color of your tooltip.
    */
    'position'?: "top" | "bottom" | "left" | "right";
  }

  interface SeVisualLinear {
    /**
    * Defines the text value of the label in your component.
    */
    'label': string;
    /**
    * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
    */
    'option': 'inline' | 'stacked';
    /**
    * Set the percentage of the "progress bar" to be "filled".
    */
    'percentage': number;
    /**
    * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). The default setting is `primary`, which gives the progress bar a green color.
    */
    'secolor': string;
    /**
    * Defines the value of your component.
    */
    'value': string;
  }
  interface SeVisualLinearAttributes extends StencilHTMLAttributes {
    /**
    * Defines the text value of the label in your component.
    */
    'label'?: string;
    /**
    * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
    */
    'option'?: 'inline' | 'stacked';
    /**
    * Set the percentage of the "progress bar" to be "filled".
    */
    'percentage'?: number;
    /**
    * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). The default setting is `primary`, which gives the progress bar a green color.
    */
    'secolor'?: string;
    /**
    * Defines the value of your component.
    */
    'value'?: string;
  }

  interface SeVisualRadial {
    /**
    * Defines the text value of the label in your component.
    */
    'label': string;
    /**
    * Set the percentage of the "progress bar" to be "filled".
    */
    'percentage': number;
    /**
    * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). The default setting is `primary`, which gives the progress bar a green color.
    */
    'secolor': string;
    /**
    * Determines the visual size of your circular progress bar.  Default setting is `large`.
    */
    'size': 'small' | 'large';
    /**
    * Defines the value of your component.
    */
    'value': string;
  }
  interface SeVisualRadialAttributes extends StencilHTMLAttributes {
    /**
    * Defines the text value of the label in your component.
    */
    'label'?: string;
    /**
    * Set the percentage of the "progress bar" to be "filled".
    */
    'percentage'?: number;
    /**
    * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). The default setting is `primary`, which gives the progress bar a green color.
    */
    'secolor'?: string;
    /**
    * Determines the visual size of your circular progress bar.  Default setting is `large`.
    */
    'size'?: 'small' | 'large';
    /**
    * Defines the value of your component.
    */
    'value'?: string;
  }

  interface SeWidgetContent {
    /**
    * When set to `fill`, content will fill the whole space of the widget.
    */
    'option': 'fill';
  }
  interface SeWidgetContentAttributes extends StencilHTMLAttributes {
    /**
    * When set to `fill`, content will fill the whole space of the widget.
    */
    'option'?: 'fill';
  }

  interface SeWidgetFooter {
    'direction': "row" | "column";
    /**
    * Defines the visual appearance of a footer. Updated automatically by the `se-widget` component when on card option. `card` will update the design of the footer with respect to the card design.
    */
    'option': "card";
  }
  interface SeWidgetFooterAttributes extends StencilHTMLAttributes {
    'direction'?: "row" | "column";
    /**
    * Defines the visual appearance of a footer. Updated automatically by the `se-widget` component when on card option. `card` will update the design of the footer with respect to the card design.
    */
    'option'?: "card";
  }

  interface SeWidgetHeader {
    /**
    * Defines the visual appearance of a header. Updated automatically by the `se-widget` component when on card option. `card` will update the design of the header with respect to the card design.
    */
    'option': "card";
  }
  interface SeWidgetHeaderAttributes extends StencilHTMLAttributes {
    /**
    * Defines the visual appearance of a header. Updated automatically by the `se-widget` component when on card option. `card` will update the design of the header with respect to the card design.
    */
    'option'?: "card";
  }

  interface SeWidget {
    /**
    * Optional property that defines the background color of the widget. Default setting is `alternative` (white).
    */
    'color': "standard" | "alternative";
    /**
    * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
    */
    'display': "flex" | "block" | "grid";
    /**
    * When on Grid display, determines if the widget should be a 2/2 instead of a small 1/1 grid item. Default setting is `false` (1/1).
    */
    'enlarged': boolean;
    /**
    * Defines a specific height of a widget.  Useful to create easy layout under `se-container` which uses `flex` by default.
    */
    'height': string;
    /**
    * Display the loading icon if set to `true`.  Default setting is `false`.
    */
    'loading': boolean;
    /**
    * Defines the visual appearance of a widget. `fill` will remove any spacing. `card` will create a card look and feel with shadow and rounded corner
    */
    'option': "fill" | "card";
    /**
    * Defines a specific width of a widget.  Useful to create easy layout under `se-container` which uses `flex` by default.
    */
    'width': string;
  }
  interface SeWidgetAttributes extends StencilHTMLAttributes {
    /**
    * Optional property that defines the background color of the widget. Default setting is `alternative` (white).
    */
    'color'?: "standard" | "alternative";
    /**
    * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
    */
    'display'?: "flex" | "block" | "grid";
    /**
    * When on Grid display, determines if the widget should be a 2/2 instead of a small 1/1 grid item. Default setting is `false` (1/1).
    */
    'enlarged'?: boolean;
    /**
    * Defines a specific height of a widget.  Useful to create easy layout under `se-container` which uses `flex` by default.
    */
    'height'?: string;
    /**
    * Display the loading icon if set to `true`.  Default setting is `false`.
    */
    'loading'?: boolean;
    /**
    * Defines the visual appearance of a widget. `fill` will remove any spacing. `card` will create a card look and feel with shadow and rounded corner
    */
    'option'?: "fill" | "card";
    /**
    * Defines a specific width of a widget.  Useful to create easy layout under `se-container` which uses `flex` by default.
    */
    'width'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SeAbout': Components.SeAbout;
    'SeApp': Components.SeApp;
    'SeAuthentication': Components.SeAuthentication;
    'SeButton': Components.SeButton;
    'SeCheckbox': Components.SeCheckbox;
    'SeChip': Components.SeChip;
    'SeContainer': Components.SeContainer;
    'SeDialogContent': Components.SeDialogContent;
    'SeDialogFooter': Components.SeDialogFooter;
    'SeDialogHeader': Components.SeDialogHeader;
    'SeDialog': Components.SeDialog;
    'SeDivider': Components.SeDivider;
    'SeDropdown': Components.SeDropdown;
    'SeFab': Components.SeFab;
    'SeFormField': Components.SeFormField;
    'SeHeader': Components.SeHeader;
    'SeIconEcostruxure': Components.SeIconEcostruxure;
    'SeIconLifeison': Components.SeIconLifeison;
    'SeIconSchneider': Components.SeIconSchneider;
    'SeIcon': Components.SeIcon;
    'SeLink': Components.SeLink;
    'SeListGroup': Components.SeListGroup;
    'SeListItem': Components.SeListItem;
    'SeList': Components.SeList;
    'SeLoading': Components.SeLoading;
    'SeRadioGroup': Components.SeRadioGroup;
    'SeRadioOnOff': Components.SeRadioOnOff;
    'SeRadioSwitch': Components.SeRadioSwitch;
    'SeRadio': Components.SeRadio;
    'SeSidemenuItem': Components.SeSidemenuItem;
    'SeSidemenu': Components.SeSidemenu;
    'SeSlider': Components.SeSlider;
    'SeSnackbar': Components.SeSnackbar;
    'SeTabbar': Components.SeTabbar;
    'SeTooltipContent': Components.SeTooltipContent;
    'SeTooltipFooter': Components.SeTooltipFooter;
    'SeTooltipHeader': Components.SeTooltipHeader;
    'SeTooltip': Components.SeTooltip;
    'SeVisualLinear': Components.SeVisualLinear;
    'SeVisualRadial': Components.SeVisualRadial;
    'SeWidgetContent': Components.SeWidgetContent;
    'SeWidgetFooter': Components.SeWidgetFooter;
    'SeWidgetHeader': Components.SeWidgetHeader;
    'SeWidget': Components.SeWidget;
  }

  interface StencilIntrinsicElements {
    'se-about': Components.SeAboutAttributes;
    'se-app': Components.SeAppAttributes;
    'se-authentication': Components.SeAuthenticationAttributes;
    'se-button': Components.SeButtonAttributes;
    'se-checkbox': Components.SeCheckboxAttributes;
    'se-chip': Components.SeChipAttributes;
    'se-container': Components.SeContainerAttributes;
    'se-dialog-content': Components.SeDialogContentAttributes;
    'se-dialog-footer': Components.SeDialogFooterAttributes;
    'se-dialog-header': Components.SeDialogHeaderAttributes;
    'se-dialog': Components.SeDialogAttributes;
    'se-divider': Components.SeDividerAttributes;
    'se-dropdown': Components.SeDropdownAttributes;
    'se-fab': Components.SeFabAttributes;
    'se-form-field': Components.SeFormFieldAttributes;
    'se-header': Components.SeHeaderAttributes;
    'se-icon-ecostruxure': Components.SeIconEcostruxureAttributes;
    'se-icon-lifeison': Components.SeIconLifeisonAttributes;
    'se-icon-schneider': Components.SeIconSchneiderAttributes;
    'se-icon': Components.SeIconAttributes;
    'se-link': Components.SeLinkAttributes;
    'se-list-group': Components.SeListGroupAttributes;
    'se-list-item': Components.SeListItemAttributes;
    'se-list': Components.SeListAttributes;
    'se-loading': Components.SeLoadingAttributes;
    'se-radio-group': Components.SeRadioGroupAttributes;
    'se-radio-on-off': Components.SeRadioOnOffAttributes;
    'se-radio-switch': Components.SeRadioSwitchAttributes;
    'se-radio': Components.SeRadioAttributes;
    'se-sidemenu-item': Components.SeSidemenuItemAttributes;
    'se-sidemenu': Components.SeSidemenuAttributes;
    'se-slider': Components.SeSliderAttributes;
    'se-snackbar': Components.SeSnackbarAttributes;
    'se-tabbar': Components.SeTabbarAttributes;
    'se-tooltip-content': Components.SeTooltipContentAttributes;
    'se-tooltip-footer': Components.SeTooltipFooterAttributes;
    'se-tooltip-header': Components.SeTooltipHeaderAttributes;
    'se-tooltip': Components.SeTooltipAttributes;
    'se-visual-linear': Components.SeVisualLinearAttributes;
    'se-visual-radial': Components.SeVisualRadialAttributes;
    'se-widget-content': Components.SeWidgetContentAttributes;
    'se-widget-footer': Components.SeWidgetFooterAttributes;
    'se-widget-header': Components.SeWidgetHeaderAttributes;
    'se-widget': Components.SeWidgetAttributes;
  }


  interface HTMLSeAboutElement extends Components.SeAbout, HTMLStencilElement {}
  var HTMLSeAboutElement: {
    prototype: HTMLSeAboutElement;
    new (): HTMLSeAboutElement;
  };

  interface HTMLSeAppElement extends Components.SeApp, HTMLStencilElement {}
  var HTMLSeAppElement: {
    prototype: HTMLSeAppElement;
    new (): HTMLSeAppElement;
  };

  interface HTMLSeAuthenticationElement extends Components.SeAuthentication, HTMLStencilElement {}
  var HTMLSeAuthenticationElement: {
    prototype: HTMLSeAuthenticationElement;
    new (): HTMLSeAuthenticationElement;
  };

  interface HTMLSeButtonElement extends Components.SeButton, HTMLStencilElement {}
  var HTMLSeButtonElement: {
    prototype: HTMLSeButtonElement;
    new (): HTMLSeButtonElement;
  };

  interface HTMLSeCheckboxElement extends Components.SeCheckbox, HTMLStencilElement {}
  var HTMLSeCheckboxElement: {
    prototype: HTMLSeCheckboxElement;
    new (): HTMLSeCheckboxElement;
  };

  interface HTMLSeChipElement extends Components.SeChip, HTMLStencilElement {}
  var HTMLSeChipElement: {
    prototype: HTMLSeChipElement;
    new (): HTMLSeChipElement;
  };

  interface HTMLSeContainerElement extends Components.SeContainer, HTMLStencilElement {}
  var HTMLSeContainerElement: {
    prototype: HTMLSeContainerElement;
    new (): HTMLSeContainerElement;
  };

  interface HTMLSeDialogContentElement extends Components.SeDialogContent, HTMLStencilElement {}
  var HTMLSeDialogContentElement: {
    prototype: HTMLSeDialogContentElement;
    new (): HTMLSeDialogContentElement;
  };

  interface HTMLSeDialogFooterElement extends Components.SeDialogFooter, HTMLStencilElement {}
  var HTMLSeDialogFooterElement: {
    prototype: HTMLSeDialogFooterElement;
    new (): HTMLSeDialogFooterElement;
  };

  interface HTMLSeDialogHeaderElement extends Components.SeDialogHeader, HTMLStencilElement {}
  var HTMLSeDialogHeaderElement: {
    prototype: HTMLSeDialogHeaderElement;
    new (): HTMLSeDialogHeaderElement;
  };

  interface HTMLSeDialogElement extends Components.SeDialog, HTMLStencilElement {}
  var HTMLSeDialogElement: {
    prototype: HTMLSeDialogElement;
    new (): HTMLSeDialogElement;
  };

  interface HTMLSeDividerElement extends Components.SeDivider, HTMLStencilElement {}
  var HTMLSeDividerElement: {
    prototype: HTMLSeDividerElement;
    new (): HTMLSeDividerElement;
  };

  interface HTMLSeDropdownElement extends Components.SeDropdown, HTMLStencilElement {}
  var HTMLSeDropdownElement: {
    prototype: HTMLSeDropdownElement;
    new (): HTMLSeDropdownElement;
  };

  interface HTMLSeFabElement extends Components.SeFab, HTMLStencilElement {}
  var HTMLSeFabElement: {
    prototype: HTMLSeFabElement;
    new (): HTMLSeFabElement;
  };

  interface HTMLSeFormFieldElement extends Components.SeFormField, HTMLStencilElement {}
  var HTMLSeFormFieldElement: {
    prototype: HTMLSeFormFieldElement;
    new (): HTMLSeFormFieldElement;
  };

  interface HTMLSeHeaderElement extends Components.SeHeader, HTMLStencilElement {}
  var HTMLSeHeaderElement: {
    prototype: HTMLSeHeaderElement;
    new (): HTMLSeHeaderElement;
  };

  interface HTMLSeIconEcostruxureElement extends Components.SeIconEcostruxure, HTMLStencilElement {}
  var HTMLSeIconEcostruxureElement: {
    prototype: HTMLSeIconEcostruxureElement;
    new (): HTMLSeIconEcostruxureElement;
  };

  interface HTMLSeIconLifeisonElement extends Components.SeIconLifeison, HTMLStencilElement {}
  var HTMLSeIconLifeisonElement: {
    prototype: HTMLSeIconLifeisonElement;
    new (): HTMLSeIconLifeisonElement;
  };

  interface HTMLSeIconSchneiderElement extends Components.SeIconSchneider, HTMLStencilElement {}
  var HTMLSeIconSchneiderElement: {
    prototype: HTMLSeIconSchneiderElement;
    new (): HTMLSeIconSchneiderElement;
  };

  interface HTMLSeIconElement extends Components.SeIcon, HTMLStencilElement {}
  var HTMLSeIconElement: {
    prototype: HTMLSeIconElement;
    new (): HTMLSeIconElement;
  };

  interface HTMLSeLinkElement extends Components.SeLink, HTMLStencilElement {}
  var HTMLSeLinkElement: {
    prototype: HTMLSeLinkElement;
    new (): HTMLSeLinkElement;
  };

  interface HTMLSeListGroupElement extends Components.SeListGroup, HTMLStencilElement {}
  var HTMLSeListGroupElement: {
    prototype: HTMLSeListGroupElement;
    new (): HTMLSeListGroupElement;
  };

  interface HTMLSeListItemElement extends Components.SeListItem, HTMLStencilElement {}
  var HTMLSeListItemElement: {
    prototype: HTMLSeListItemElement;
    new (): HTMLSeListItemElement;
  };

  interface HTMLSeListElement extends Components.SeList, HTMLStencilElement {}
  var HTMLSeListElement: {
    prototype: HTMLSeListElement;
    new (): HTMLSeListElement;
  };

  interface HTMLSeLoadingElement extends Components.SeLoading, HTMLStencilElement {}
  var HTMLSeLoadingElement: {
    prototype: HTMLSeLoadingElement;
    new (): HTMLSeLoadingElement;
  };

  interface HTMLSeRadioGroupElement extends Components.SeRadioGroup, HTMLStencilElement {}
  var HTMLSeRadioGroupElement: {
    prototype: HTMLSeRadioGroupElement;
    new (): HTMLSeRadioGroupElement;
  };

  interface HTMLSeRadioOnOffElement extends Components.SeRadioOnOff, HTMLStencilElement {}
  var HTMLSeRadioOnOffElement: {
    prototype: HTMLSeRadioOnOffElement;
    new (): HTMLSeRadioOnOffElement;
  };

  interface HTMLSeRadioSwitchElement extends Components.SeRadioSwitch, HTMLStencilElement {}
  var HTMLSeRadioSwitchElement: {
    prototype: HTMLSeRadioSwitchElement;
    new (): HTMLSeRadioSwitchElement;
  };

  interface HTMLSeRadioElement extends Components.SeRadio, HTMLStencilElement {}
  var HTMLSeRadioElement: {
    prototype: HTMLSeRadioElement;
    new (): HTMLSeRadioElement;
  };

  interface HTMLSeSidemenuItemElement extends Components.SeSidemenuItem, HTMLStencilElement {}
  var HTMLSeSidemenuItemElement: {
    prototype: HTMLSeSidemenuItemElement;
    new (): HTMLSeSidemenuItemElement;
  };

  interface HTMLSeSidemenuElement extends Components.SeSidemenu, HTMLStencilElement {}
  var HTMLSeSidemenuElement: {
    prototype: HTMLSeSidemenuElement;
    new (): HTMLSeSidemenuElement;
  };

  interface HTMLSeSliderElement extends Components.SeSlider, HTMLStencilElement {}
  var HTMLSeSliderElement: {
    prototype: HTMLSeSliderElement;
    new (): HTMLSeSliderElement;
  };

  interface HTMLSeSnackbarElement extends Components.SeSnackbar, HTMLStencilElement {}
  var HTMLSeSnackbarElement: {
    prototype: HTMLSeSnackbarElement;
    new (): HTMLSeSnackbarElement;
  };

  interface HTMLSeTabbarElement extends Components.SeTabbar, HTMLStencilElement {}
  var HTMLSeTabbarElement: {
    prototype: HTMLSeTabbarElement;
    new (): HTMLSeTabbarElement;
  };

  interface HTMLSeTooltipContentElement extends Components.SeTooltipContent, HTMLStencilElement {}
  var HTMLSeTooltipContentElement: {
    prototype: HTMLSeTooltipContentElement;
    new (): HTMLSeTooltipContentElement;
  };

  interface HTMLSeTooltipFooterElement extends Components.SeTooltipFooter, HTMLStencilElement {}
  var HTMLSeTooltipFooterElement: {
    prototype: HTMLSeTooltipFooterElement;
    new (): HTMLSeTooltipFooterElement;
  };

  interface HTMLSeTooltipHeaderElement extends Components.SeTooltipHeader, HTMLStencilElement {}
  var HTMLSeTooltipHeaderElement: {
    prototype: HTMLSeTooltipHeaderElement;
    new (): HTMLSeTooltipHeaderElement;
  };

  interface HTMLSeTooltipElement extends Components.SeTooltip, HTMLStencilElement {}
  var HTMLSeTooltipElement: {
    prototype: HTMLSeTooltipElement;
    new (): HTMLSeTooltipElement;
  };

  interface HTMLSeVisualLinearElement extends Components.SeVisualLinear, HTMLStencilElement {}
  var HTMLSeVisualLinearElement: {
    prototype: HTMLSeVisualLinearElement;
    new (): HTMLSeVisualLinearElement;
  };

  interface HTMLSeVisualRadialElement extends Components.SeVisualRadial, HTMLStencilElement {}
  var HTMLSeVisualRadialElement: {
    prototype: HTMLSeVisualRadialElement;
    new (): HTMLSeVisualRadialElement;
  };

  interface HTMLSeWidgetContentElement extends Components.SeWidgetContent, HTMLStencilElement {}
  var HTMLSeWidgetContentElement: {
    prototype: HTMLSeWidgetContentElement;
    new (): HTMLSeWidgetContentElement;
  };

  interface HTMLSeWidgetFooterElement extends Components.SeWidgetFooter, HTMLStencilElement {}
  var HTMLSeWidgetFooterElement: {
    prototype: HTMLSeWidgetFooterElement;
    new (): HTMLSeWidgetFooterElement;
  };

  interface HTMLSeWidgetHeaderElement extends Components.SeWidgetHeader, HTMLStencilElement {}
  var HTMLSeWidgetHeaderElement: {
    prototype: HTMLSeWidgetHeaderElement;
    new (): HTMLSeWidgetHeaderElement;
  };

  interface HTMLSeWidgetElement extends Components.SeWidget, HTMLStencilElement {}
  var HTMLSeWidgetElement: {
    prototype: HTMLSeWidgetElement;
    new (): HTMLSeWidgetElement;
  };

  interface HTMLElementTagNameMap {
    'se-about': HTMLSeAboutElement
    'se-app': HTMLSeAppElement
    'se-authentication': HTMLSeAuthenticationElement
    'se-button': HTMLSeButtonElement
    'se-checkbox': HTMLSeCheckboxElement
    'se-chip': HTMLSeChipElement
    'se-container': HTMLSeContainerElement
    'se-dialog-content': HTMLSeDialogContentElement
    'se-dialog-footer': HTMLSeDialogFooterElement
    'se-dialog-header': HTMLSeDialogHeaderElement
    'se-dialog': HTMLSeDialogElement
    'se-divider': HTMLSeDividerElement
    'se-dropdown': HTMLSeDropdownElement
    'se-fab': HTMLSeFabElement
    'se-form-field': HTMLSeFormFieldElement
    'se-header': HTMLSeHeaderElement
    'se-icon-ecostruxure': HTMLSeIconEcostruxureElement
    'se-icon-lifeison': HTMLSeIconLifeisonElement
    'se-icon-schneider': HTMLSeIconSchneiderElement
    'se-icon': HTMLSeIconElement
    'se-link': HTMLSeLinkElement
    'se-list-group': HTMLSeListGroupElement
    'se-list-item': HTMLSeListItemElement
    'se-list': HTMLSeListElement
    'se-loading': HTMLSeLoadingElement
    'se-radio-group': HTMLSeRadioGroupElement
    'se-radio-on-off': HTMLSeRadioOnOffElement
    'se-radio-switch': HTMLSeRadioSwitchElement
    'se-radio': HTMLSeRadioElement
    'se-sidemenu-item': HTMLSeSidemenuItemElement
    'se-sidemenu': HTMLSeSidemenuElement
    'se-slider': HTMLSeSliderElement
    'se-snackbar': HTMLSeSnackbarElement
    'se-tabbar': HTMLSeTabbarElement
    'se-tooltip-content': HTMLSeTooltipContentElement
    'se-tooltip-footer': HTMLSeTooltipFooterElement
    'se-tooltip-header': HTMLSeTooltipHeaderElement
    'se-tooltip': HTMLSeTooltipElement
    'se-visual-linear': HTMLSeVisualLinearElement
    'se-visual-radial': HTMLSeVisualRadialElement
    'se-widget-content': HTMLSeWidgetContentElement
    'se-widget-footer': HTMLSeWidgetFooterElement
    'se-widget-header': HTMLSeWidgetHeaderElement
    'se-widget': HTMLSeWidgetElement
  }

  interface ElementTagNameMap {
    'se-about': HTMLSeAboutElement;
    'se-app': HTMLSeAppElement;
    'se-authentication': HTMLSeAuthenticationElement;
    'se-button': HTMLSeButtonElement;
    'se-checkbox': HTMLSeCheckboxElement;
    'se-chip': HTMLSeChipElement;
    'se-container': HTMLSeContainerElement;
    'se-dialog-content': HTMLSeDialogContentElement;
    'se-dialog-footer': HTMLSeDialogFooterElement;
    'se-dialog-header': HTMLSeDialogHeaderElement;
    'se-dialog': HTMLSeDialogElement;
    'se-divider': HTMLSeDividerElement;
    'se-dropdown': HTMLSeDropdownElement;
    'se-fab': HTMLSeFabElement;
    'se-form-field': HTMLSeFormFieldElement;
    'se-header': HTMLSeHeaderElement;
    'se-icon-ecostruxure': HTMLSeIconEcostruxureElement;
    'se-icon-lifeison': HTMLSeIconLifeisonElement;
    'se-icon-schneider': HTMLSeIconSchneiderElement;
    'se-icon': HTMLSeIconElement;
    'se-link': HTMLSeLinkElement;
    'se-list-group': HTMLSeListGroupElement;
    'se-list-item': HTMLSeListItemElement;
    'se-list': HTMLSeListElement;
    'se-loading': HTMLSeLoadingElement;
    'se-radio-group': HTMLSeRadioGroupElement;
    'se-radio-on-off': HTMLSeRadioOnOffElement;
    'se-radio-switch': HTMLSeRadioSwitchElement;
    'se-radio': HTMLSeRadioElement;
    'se-sidemenu-item': HTMLSeSidemenuItemElement;
    'se-sidemenu': HTMLSeSidemenuElement;
    'se-slider': HTMLSeSliderElement;
    'se-snackbar': HTMLSeSnackbarElement;
    'se-tabbar': HTMLSeTabbarElement;
    'se-tooltip-content': HTMLSeTooltipContentElement;
    'se-tooltip-footer': HTMLSeTooltipFooterElement;
    'se-tooltip-header': HTMLSeTooltipHeaderElement;
    'se-tooltip': HTMLSeTooltipElement;
    'se-visual-linear': HTMLSeVisualLinearElement;
    'se-visual-radial': HTMLSeVisualRadialElement;
    'se-widget-content': HTMLSeWidgetContentElement;
    'se-widget-footer': HTMLSeWidgetFooterElement;
    'se-widget-header': HTMLSeWidgetHeaderElement;
    'se-widget': HTMLSeWidgetElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
